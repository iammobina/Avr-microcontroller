
AVRASM ver. 2.1.30  C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm Fri Dec 25 22:31:07 2020

C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q2\Debug\List\Q2.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _speed=R6
                 	.DEF _speed_msb=R7
                 	.DEF _rot=R8
                 	.DEF _rot_msb=R9
                 	.DEF _left=R10
                 	.DEF _left_msb=R11
                 	.DEF _right=R12
                 	.DEF _right_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x17:
00002a 0009
00002b 0008
00002c 000c
00002d 0004      	.DB  0x9,0x0,0x8,0x0,0xC,0x0,0x4,0x0
00002e 0006
00002f 0009
000030 0001
000031 0003      	.DB  0x6,0x0,0x9,0x0,0x1,0x0,0x3,0x0
000032 0002
000033 0006      	.DB  0x2,0x0,0x6,0x0
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000047 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000048 bfed      	OUT  SPL,R30
000049 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004d 940c 00a1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;int i;
                 ;int speed, rot, left, right, stop;
                 ;void setup_t(){
                 ; 0000 0007 void setup_t(){
                 
                 	.CSEG
                 _setup_t:
                 ; .FSTART _setup_t
                 ; 0000 0008       for (i = 0;i < 7;i++)
00004f 2444      	CLR  R4
000050 2455      	CLR  R5
                 _0x4:
000051 e0e7      	LDI  R30,LOW(7)
000052 e0f0      	LDI  R31,HIGH(7)
000053 164e      	CP   R4,R30
000054 065f      	CPC  R5,R31
000055 f48c      	BRGE _0x5
                 ; 0000 0009       {
                 ; 0000 000A         TCNT1H=0x00;
000056 e0e0      	LDI  R30,LOW(0)
000057 bded      	OUT  0x2D,R30
                 ; 0000 000B         TCNT1L=0x00;
000058 bdec      	OUT  0x2C,R30
                 ; 0000 000C         TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000059 e0e1      	LDI  R30,LOW(1)
00005a bdee      	OUT  0x2E,R30
                 ; 0000 000D         while (!(TIFR & (1 << TOV1)));
                 _0x6:
00005b b7e8      	IN   R30,0x38
00005c 70e4      	ANDI R30,LOW(0x4)
00005d f3e9      	BREQ _0x6
                 ; 0000 000E         TIFR |= (1 << TOV1);
00005e b7e8      	IN   R30,0x38
00005f 60e4      	ORI  R30,4
000060 bfe8      	OUT  0x38,R30
                 ; 0000 000F         TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000061 e0e0      	LDI  R30,LOW(0)
000062 bdee      	OUT  0x2E,R30
                 ; 0000 0010       }
000063 01f2      	MOVW R30,R4
000064 9631      	ADIW R30,1
000065 012f      	MOVW R4,R30
000066 cfea      	RJMP _0x4
                 _0x5:
                 ; 0000 0011 }
000067 9508      	RET
                 ; .FEND
                 ;
                 ;void speed_handler(){
                 ; 0000 0013 void speed_handler(){
                 _speed_handler:
                 ; .FSTART _speed_handler
                 ; 0000 0014 if (speed)
000068 2c06      	MOV  R0,R6
000069 2807      	OR   R0,R7
00006a f011      	BREQ _0x9
                 ; 0000 0015     OCR2 = 0;
00006b e0e0      	LDI  R30,LOW(0)
00006c bde3      	OUT  0x23,R30
                 ; 0000 0016 if (rot)
                 _0x9:
00006d 2c08      	MOV  R0,R8
00006e 2809      	OR   R0,R9
00006f f011      	BREQ _0xA
                 ; 0000 0017     OCR0 = 0;
000070 e0e0      	LDI  R30,LOW(0)
000071 bfec      	OUT  0x3C,R30
                 ; 0000 0018 if (speed && !rot && (OCR0 < 0xFC))
                 _0xA:
000072 2c06      	MOV  R0,R6
000073 2807      	OR   R0,R7
000074 f031      	BREQ _0xC
000075 2c08      	MOV  R0,R8
000076 2809      	OR   R0,R9
000077 f419      	BRNE _0xC
000078 b7ec      	IN   R30,0x3C
000079 3fec      	CPI  R30,LOW(0xFC)
00007a f008      	BRLO _0xD
                 _0xC:
00007b c003      	RJMP _0xB
                 _0xD:
                 ; 0000 0019     OCR0 += 4;
00007c b7ec      	IN   R30,0x3C
00007d 5fec      	SUBI R30,-LOW(4)
00007e bfec      	OUT  0x3C,R30
                 ; 0000 001A if (!speed && (OCR0 != 0x00))
                 _0xB:
00007f 2c06      	MOV  R0,R6
000080 2807      	OR   R0,R7
000081 f419      	BRNE _0xF
000082 b7ec      	IN   R30,0x3C
000083 30e0      	CPI  R30,0
000084 f409      	BRNE _0x10
                 _0xF:
000085 c003      	RJMP _0xE
                 _0x10:
                 ; 0000 001B     OCR0 -= 1;
000086 b7ec      	IN   R30,0x3C
000087 50e1      	SUBI R30,LOW(1)
000088 bfec      	OUT  0x3C,R30
                 ; 0000 001C if (rot && !speed && (OCR2 < 0xFC))
                 _0xE:
000089 2c08      	MOV  R0,R8
00008a 2809      	OR   R0,R9
00008b f031      	BREQ _0x12
00008c 2c06      	MOV  R0,R6
00008d 2807      	OR   R0,R7
00008e f419      	BRNE _0x12
00008f b5e3      	IN   R30,0x23
000090 3fec      	CPI  R30,LOW(0xFC)
000091 f008      	BRLO _0x13
                 _0x12:
000092 c003      	RJMP _0x11
                 _0x13:
                 ; 0000 001D     OCR2 += 4;
000093 b5e3      	IN   R30,0x23
000094 5fec      	SUBI R30,-LOW(4)
000095 bde3      	OUT  0x23,R30
                 ; 0000 001E if (!rot && (OCR2 != 0x00))
                 _0x11:
000096 2c08      	MOV  R0,R8
000097 2809      	OR   R0,R9
000098 f419      	BRNE _0x15
000099 b5e3      	IN   R30,0x23
00009a 30e0      	CPI  R30,0
00009b f409      	BRNE _0x16
                 _0x15:
00009c c003      	RJMP _0x14
                 _0x16:
                 ; 0000 001F     OCR2 -= 1;
00009d b5e3      	IN   R30,0x23
00009e 50e1      	SUBI R30,LOW(1)
00009f bde3      	OUT  0x23,R30
                 ; 0000 0020 }
                 _0x14:
0000a0 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 // Declare your local variables here
                 ; 0000 0024 
                 ; 0000 0025 int right_val[5] = {0x09, 0x01, 0x03, 0x02, 0x06}, right_step = 0;
                 ; 0000 0026 int left_val[5] = {0x09, 0x08, 0x0C, 0x04, 0x06}, left_step = 0;
                 ; 0000 0027 
                 ; 0000 0028 // Input/Output Ports initialization
                 ; 0000 0029 // Port A initialization
                 ; 0000 002A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a1 9764      	SBIW R28,20
0000a2 e184      	LDI  R24,20
0000a3 e0a0      	LDI  R26,LOW(0)
0000a4 e0b0      	LDI  R27,HIGH(0)
0000a5 e5e4      	LDI  R30,LOW(_0x17*2)
0000a6 e0f0      	LDI  R31,HIGH(_0x17*2)
0000a7 940e 0154 	CALL __INITLOCB
                 ;	right_val -> Y+10
                 ;	right_step -> R16,R17
                 ;	left_val -> Y+0
                 ;	left_step -> R18,R19
                +
0000a9 e000     +LDI R16 , LOW ( 0 )
0000aa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000ab e020     +LDI R18 , LOW ( 0 )
0000ac e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbea      	OUT  0x1A,R30
                 ; 0000 002C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000af bbeb      	OUT  0x1B,R30
                 ; 0000 002E 
                 ; 0000 002F // Port B initialization
                 ; 0000 0030 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0031 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b0 e8e8      	LDI  R30,LOW(136)
0000b1 bbe7      	OUT  0x17,R30
                 ; 0000 0032 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0033 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbe8      	OUT  0x18,R30
                 ; 0000 0034 
                 ; 0000 0035 // Port C initialization
                 ; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0037 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0039 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe5      	OUT  0x15,R30
                 ; 0000 003A 
                 ; 0000 003B // Port D initialization
                 ; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003D DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000b8 efef      	LDI  R30,LOW(255)
0000b9 bbe1      	OUT  0x11,R30
                 ; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bbe2      	OUT  0x12,R30
                 ; 0000 0040 
                 ; 0000 0041 // Timer/Counter 0 initialization
                 ; 0000 0042 // Clock source: System Clock
                 ; 0000 0043 // Clock value: 8000.000 kHz
                 ; 0000 0044 // Mode: Fast PWM top=0xFF
                 ; 0000 0045 // OC0 output: Non-Inverted PWM
                 ; 0000 0046 // Timer Period: 0.032 ms
                 ; 0000 0047 // Output Pulse(s):
                 ; 0000 0048 // OC0 Period: 0.032 ms Width: 0.017067 ms
                 ; 0000 0049 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000bc e6ed      	LDI  R30,LOW(109)
0000bd bfe3      	OUT  0x33,R30
                 ; 0000 004A TCNT0=0x00;
0000be e0e0      	LDI  R30,LOW(0)
0000bf bfe2      	OUT  0x32,R30
                 ; 0000 004B OCR0=0x00;
0000c0 bfec      	OUT  0x3C,R30
                 ; 0000 004C 
                 ; 0000 004D // Timer/Counter 1 initialization
                 ; 0000 004E // Clock source: System Clock
                 ; 0000 004F // Clock value: Timer1 Stopped
                 ; 0000 0050 // Mode: Normal top=0xFFFF
                 ; 0000 0051 // OC1A output: Disconnected
                 ; 0000 0052 // OC1B output: Disconnected
                 ; 0000 0053 // Noise Canceler: Off
                 ; 0000 0054 // Input Capture on Falling Edge
                 ; 0000 0055 // Timer1 Overflow Interrupt: Off
                 ; 0000 0056 // Input Capture Interrupt: Off
                 ; 0000 0057 // Compare A Match Interrupt: Off
                 ; 0000 0058 // Compare B Match Interrupt: Off
                 ; 0000 0059 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c1 bdef      	OUT  0x2F,R30
                 ; 0000 005A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c2 bdee      	OUT  0x2E,R30
                 ; 0000 005B TCNT1H=0x00;
0000c3 bded      	OUT  0x2D,R30
                 ; 0000 005C TCNT1L=0x00;
0000c4 bdec      	OUT  0x2C,R30
                 ; 0000 005D ICR1H=0x00;
0000c5 bde7      	OUT  0x27,R30
                 ; 0000 005E ICR1L=0x00;
0000c6 bde6      	OUT  0x26,R30
                 ; 0000 005F OCR1AH=0x00;
0000c7 bdeb      	OUT  0x2B,R30
                 ; 0000 0060 OCR1AL=0x00;
0000c8 bdea      	OUT  0x2A,R30
                 ; 0000 0061 OCR1BH=0x00;
0000c9 bde9      	OUT  0x29,R30
                 ; 0000 0062 OCR1BL=0x00;
0000ca bde8      	OUT  0x28,R30
                 ; 0000 0063 
                 ; 0000 0064 // Timer/Counter 2 initialization
                 ; 0000 0065 // Clock source: System Clock
                 ; 0000 0066 // Clock value: Timer2 Stopped
                 ; 0000 0067 // Mode: Normal top=0xFF
                 ; 0000 0068 // OC2 output: Disconnected
                 ; 0000 0069 ASSR=0<<AS2;
0000cb bde2      	OUT  0x22,R30
                 ; 0000 006A TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000cc e6ef      	LDI  R30,LOW(111)
0000cd bde5      	OUT  0x25,R30
                 ; 0000 006B TCNT2=0x00;
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bde4      	OUT  0x24,R30
                 ; 0000 006C OCR2=0x00;
0000d0 bde3      	OUT  0x23,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 006F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000d1 bfe9      	OUT  0x39,R30
                 ; 0000 0070 
                 ; 0000 0071 // External Interrupt(s) initialization
                 ; 0000 0072 // INT0: Off
                 ; 0000 0073 // INT1: Off
                 ; 0000 0074 // INT2: Off
                 ; 0000 0075 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000d2 bfe5      	OUT  0x35,R30
                 ; 0000 0076 MCUCSR=(0<<ISC2);
0000d3 bfe4      	OUT  0x34,R30
                 ; 0000 0077 
                 ; 0000 0078 // USART initialization
                 ; 0000 0079 // USART disabled
                 ; 0000 007A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d4 b9ea      	OUT  0xA,R30
                 ; 0000 007B 
                 ; 0000 007C // Analog Comparator initialization
                 ; 0000 007D // Analog Comparator: Off
                 ; 0000 007E // The Analog Comparator's positive input is
                 ; 0000 007F // connected to the AIN0 pin
                 ; 0000 0080 // The Analog Comparator's negative input is
                 ; 0000 0081 // connected to the AIN1 pin
                 ; 0000 0082 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d5 e8e0      	LDI  R30,LOW(128)
0000d6 b9e8      	OUT  0x8,R30
                 ; 0000 0083 SFIOR=(0<<ACME);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bfe0      	OUT  0x30,R30
                 ; 0000 0084 
                 ; 0000 0085 // ADC initialization
                 ; 0000 0086 // ADC disabled
                 ; 0000 0087 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000d9 b9e6      	OUT  0x6,R30
                 ; 0000 0088 
                 ; 0000 0089 // SPI initialization
                 ; 0000 008A // SPI disabled
                 ; 0000 008B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000da b9ed      	OUT  0xD,R30
                 ; 0000 008C 
                 ; 0000 008D // TWI initialization
                 ; 0000 008E // TWI disabled
                 ; 0000 008F TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000db bfe6      	OUT  0x36,R30
                 ; 0000 0090 
                 ; 0000 0091 while (1)
                 _0x18:
                 ; 0000 0092       {
                 ; 0000 0093       setup_t();
0000dc df72      	RCALL _setup_t
                 ; 0000 0094 
                 ; 0000 0095       speed = (PINA & 0b10000);
0000dd b3e9      	IN   R30,0x19
0000de 71e0      	ANDI R30,LOW(0x10)
0000df 2e6e      	MOV  R6,R30
0000e0 2477      	CLR  R7
                 ; 0000 0096       rot = (PINA & 0b1000);
0000e1 b3e9      	IN   R30,0x19
0000e2 70e8      	ANDI R30,LOW(0x8)
0000e3 2e8e      	MOV  R8,R30
0000e4 2499      	CLR  R9
                 ; 0000 0097       right = (PINA &0b0100);
0000e5 b3e9      	IN   R30,0x19
0000e6 70e4      	ANDI R30,LOW(0x4)
0000e7 2ece      	MOV  R12,R30
0000e8 24dd      	CLR  R13
                 ; 0000 0098       left = (PINA & 0b0010);
0000e9 b3e9      	IN   R30,0x19
0000ea 70e2      	ANDI R30,LOW(0x2)
0000eb 2eae      	MOV  R10,R30
0000ec 24bb      	CLR  R11
                 ; 0000 0099       stop = (PINA & 0b0001);
0000ed b3e9      	IN   R30,0x19
0000ee 70e1      	ANDI R30,LOW(0x1)
0000ef e0f0      	LDI  R31,0
0000f0 93e0 0260 	STS  _stop,R30
0000f2 93f0 0261 	STS  _stop+1,R31
                 ; 0000 009A 
                 ; 0000 009B       if (stop)
0000f4 9730      	SBIW R30,0
0000f5 f021      	BREQ _0x1B
                 ; 0000 009C         OCR0 = OCR2 = 0x00;
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 bde3      	OUT  0x23,R30
0000f8 bfec      	OUT  0x3C,R30
                 ; 0000 009D       else
0000f9 c001      	RJMP _0x1C
                 _0x1B:
                 ; 0000 009E       {
                 ; 0000 009F         speed_handler();
0000fa df6d      	RCALL _speed_handler
                 ; 0000 00A0       }
                 _0x1C:
                 ; 0000 00A1 
                 ; 0000 00A2 
                 ; 0000 00A3 
                 ; 0000 00A4       if (right && !left)
0000fb 2c0c      	MOV  R0,R12
0000fc 280d      	OR   R0,R13
0000fd f019      	BREQ _0x1E
0000fe 2c0a      	MOV  R0,R10
0000ff 280b      	OR   R0,R11
000100 f009      	BREQ _0x1F
                 _0x1E:
000101 c00e      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00A5       {
                 ; 0000 00A6         PORTD &= 0x80;
000102 b3e2      	IN   R30,0x12
000103 78e0      	ANDI R30,LOW(0x80)
000104 bbe2      	OUT  0x12,R30
                 ; 0000 00A7 
                 ; 0000 00A8         if (right_step < 4)
                +
000105 3004     +CPI R16 , LOW ( 4 )
000106 e0e0     +LDI R30 , HIGH ( 4 )
000107 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000108 f414      	BRGE _0x20
                 ; 0000 00A9         {
                 ; 0000 00AA             right_step++;
                +
000109 5f0f     +SUBI R16 , LOW ( - 1 )
00010a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00AB         }
                 ; 0000 00AC         PORTD |= right_val[right_step];
                 _0x20:
00010b d033      	RCALL SUBOPT_0x0
                 ; 0000 00AD         left_step = 0;
                +
00010c e020     +LDI R18 , LOW ( 0 )
00010d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 00AE         PORTC = left_val[left_step];
00010e d03c      	RCALL SUBOPT_0x1
                 ; 0000 00AF       }
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2       else if(!right && !left)
00010f c02d      	RJMP _0x21
                 _0x1D:
000110 2c0c      	MOV  R0,R12
000111 280d      	OR   R0,R13
000112 f419      	BRNE _0x23
000113 2c0a      	MOV  R0,R10
000114 280b      	OR   R0,R11
000115 f009      	BREQ _0x24
                 _0x23:
000116 c012      	RJMP _0x22
                 _0x24:
                 ; 0000 00B3       {
                 ; 0000 00B4         PORTD &= 0x80;
000117 b3e2      	IN   R30,0x12
000118 78e0      	ANDI R30,LOW(0x80)
000119 bbe2      	OUT  0x12,R30
                 ; 0000 00B5         if (right_step > 0)
00011a 2400      	CLR  R0
00011b 1600      	CP   R0,R16
00011c 0601      	CPC  R0,R17
00011d f414      	BRGE _0x25
                 ; 0000 00B6         {
                 ; 0000 00B7             right_step--;
                +
00011e 5001     +SUBI R16 , LOW ( 1 )
00011f 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 00B8         }
                 ; 0000 00B9         PORTD |= right_val[right_step];
                 _0x25:
000120 d01e      	RCALL SUBOPT_0x0
                 ; 0000 00BA         if (left_step > 0)
000121 2400      	CLR  R0
000122 1602      	CP   R0,R18
000123 0603      	CPC  R0,R19
000124 f414      	BRGE _0x26
                 ; 0000 00BB         {
                 ; 0000 00BC             left_step--;
                +
000125 5021     +SUBI R18 , LOW ( 1 )
000126 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 00BD         }
                 ; 0000 00BE         PORTC = left_val[left_step];
                 _0x26:
000127 d023      	RCALL SUBOPT_0x1
                 ; 0000 00BF       }
                 ; 0000 00C0 
                 ; 0000 00C1 
                 ; 0000 00C2       else if (left && !right)
000128 c014      	RJMP _0x27
                 _0x22:
000129 2c0a      	MOV  R0,R10
00012a 280b      	OR   R0,R11
00012b f019      	BREQ _0x29
00012c 2c0c      	MOV  R0,R12
00012d 280d      	OR   R0,R13
00012e f009      	BREQ _0x2A
                 _0x29:
00012f c00d      	RJMP _0x28
                 _0x2A:
                 ; 0000 00C3       {
                 ; 0000 00C4         if (left_step < 4)
                +
000130 3024     +CPI R18 , LOW ( 4 )
000131 e0e0     +LDI R30 , HIGH ( 4 )
000132 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000133 f414      	BRGE _0x2B
                 ; 0000 00C5         {
                 ; 0000 00C6             left_step++;
                +
000134 5f2f     +SUBI R18 , LOW ( - 1 )
000135 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00C7         }
                 ; 0000 00C8         PORTC = left_val[left_step];
                 _0x2B:
000136 d014      	RCALL SUBOPT_0x1
                 ; 0000 00C9         right_step = 0;
                +
000137 e000     +LDI R16 , LOW ( 0 )
000138 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 00CA         PORTD &= 0x80;
000139 b3e2      	IN   R30,0x12
00013a 78e0      	ANDI R30,LOW(0x80)
00013b bbe2      	OUT  0x12,R30
                 ; 0000 00CB         PORTD |= right_val[right_step];
00013c d002      	RCALL SUBOPT_0x0
                 ; 0000 00CC       }
                 ; 0000 00CD       }
                 _0x28:
                 _0x27:
                 _0x21:
00013d cf9e      	RJMP _0x18
                 ; 0000 00CE }
                 _0x2C:
00013e cfff      	RJMP _0x2C
                 ; .FEND
                 
                 	.DSEG
                 _stop:
000260           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
00013f b202      	IN   R0,18
000140 01f8      	MOVW R30,R16
000141 01de      	MOVW R26,R28
000142 961a      	ADIW R26,10
000143 0fee      	LSL  R30
000144 1fff      	ROL  R31
000145 0fae      	ADD  R26,R30
000146 1fbf      	ADC  R27,R31
000147 91ec      	LD   R30,X
000148 29e0      	OR   R30,R0
000149 bbe2      	OUT  0x12,R30
00014a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
00014b 01f9      	MOVW R30,R18
00014c 01de      	MOVW R26,R28
00014d 0fee      	LSL  R30
00014e 1fff      	ROL  R31
00014f 0fae      	ADD  R26,R30
000150 1fbf      	ADC  R27,R31
000151 91ec      	LD   R30,X
000152 bbe5      	OUT  0x15,R30
000153 9508      	RET
                 
                 
                 	.CSEG
                 __INITLOCB:
                 __INITLOCW:
000154 0fac      	ADD  R26,R28
000155 1fbd      	ADC  R27,R29
                 __INITLOC0:
000156 9005      	LPM  R0,Z+
000157 920d      	ST   X+,R0
000158 958a      	DEC  R24
000159 f7e1      	BRNE __INITLOC0
00015a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  38 r1 :   0 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   5 r7 :   5 
r8 :   5 r9 :   5 r10:   4 r11:   4 r12:   4 r13:   4 r14:   0 r15:   0 
r16:   7 r17:   6 r18:   7 r19:   6 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   1 r26:   9 r27:   5 r28:   5 r29:   2 r30: 142 r31:  11 
x  :   5 y  :   0 z  :   1 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   2 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   5 cpi   :   6 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  19 inc   :   0 jmp   :  22 ld    :   2 ldd   :   0 ldi   :  47 
lds   :   0 lpm   :   1 lsl   :   2 lsr   :   0 mov   :  18 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :  15 
ori   :   1 out   :  58 pop   :   0 push  :   0 rcall :   8 ret   :   5 
reti  :   0 rjmp  :  13 rol   :   2 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   3 std   :   0 sts   :   2 sub   :   0 subi  :   8 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 35 out of 116 (30.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b6    674     20    694   32768   2.1%
[.dseg] 0x000060 0x000262      0      2      2    2048   0.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
