;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/15/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;# include <delay.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;int counter = 0;
;char st[20];
;// Declare your global variables here
;char* morseCode[] ={
;    ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....",
;    "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.",
;    "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-",
;    "-.--", "--.."
;};

	.DSEG
_0x3:
	.BYTE 0x6C
;char alpha [] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
;'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C // Place your code here
; 0000 002D }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;void T1Delay(){
; 0000 002F void T1Delay(){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030     int i;
; 0000 0031     for(i=0; i<1; i++){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	i -> R16,R17
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0032         TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033         TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0034         while((TIFR & (1<<TOV1)==1));
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0035         TCCR1B = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0036         TIFR = 0x4;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0037     }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0038 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void main(void)
; 0000 003B {
;PCODE: $00000035 VOL: 0
; 0000 003C // Declare your local variables here
; 0000 003D 
; 0000 003E // Input/Output Ports initialization
; 0000 003F // Port A initialization
; 0000 0040 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0041 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0042 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0043 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0044 
; 0000 0045 // Port B initialization
; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0047 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0049 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004A 
; 0000 004B // Port C initialization
; 0000 004C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 004D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 004F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0053 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0055 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0056 
; 0000 0057 // Timer/Counter 1 initialization
; 0000 0058 // Clock source: System Clock
; 0000 0059 // Clock value: 125.000 kHz
; 0000 005A // Mode: CTC top=OCR1A
; 0000 005B // OC1A output: Disconnected
; 0000 005C // OC1B output: Disconnected
; 0000 005D // Noise Canceler: Off
; 0000 005E // Input Capture on Falling Edge
; 0000 005F // Timer Period: 0.1 s
; 0000 0060 // Timer1 Overflow Interrupt: Off
; 0000 0061 // Input Capture Interrupt: Off
; 0000 0062 // Compare A Match Interrupt: On
; 0000 0063 // Compare B Match Interrupt: Off
; 0000 0064 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0065 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0066 TCNT1H=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0067 TCNT1L=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0068 ICR1H=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0069 ICR1L=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006A OCR1AH=0x30;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006B OCR1AL=0xD3;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006C OCR1BH=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006D OCR1BL=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006E 
; 0000 006F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0070 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0071 
; 0000 0072 // Alphanumeric LCD initialization
; 0000 0073 // Connections are specified in the
; 0000 0074 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0075 // RS - PORTC Bit 0
; 0000 0076 // RD - PORTC Bit 1
; 0000 0077 // EN - PORTC Bit 2
; 0000 0078 // D4 - PORTC Bit 4
; 0000 0079 // D5 - PORTC Bit 5
; 0000 007A // D6 - PORTC Bit 6
; 0000 007B // D7 - PORTC Bit 7
; 0000 007C // Characters/line: 16
; 0000 007D lcd_init(16);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007E 
; 0000 007F // Global enable interrupts
; 0000 0080 #asm("sei")
;PCODE: $0000005E VOL: 0
	sei
;PCODE: $0000005F VOL: 0
; 0000 0081 
; 0000 0082 while (1)
;PCODE: $00000060 VOL: 0
; 0000 0083       {
; 0000 0084       // Place your code here
; 0000 0085       if(PINA.0 ==1){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0086         T1Delay(); //0.1 second delay
;PCODE: $00000064 VOL: 0
; 0000 0087         counter++;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0088       }
; 0000 0089       if(counter == 6){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008A       lcd_putchar('s');
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 008B       }
; 0000 008C 
; 0000 008D             lcd_putchar('b');
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008E       }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008F }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
