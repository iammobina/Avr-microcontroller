;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/15/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <string.h>
;# include <delay.h>
;#include <stdbool.h>
;// Declare your global variables here
;//int counter=0;
;//char dot[20];
;//char dash[20];
;//char st[20];
;//char bb[20];
;//int index=0;
;//int flag=0;
;//char final = '';
;//char input;
;char Revmorse[27][7] = {"._", "_...", "_._.", "_..", ".", ".._.", "__.", "....", "..", ".___", "_._", "._..", "__", "_." ...

	.DSEG
;
;//char* morseCode[] ={
;//    ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....",
;//    "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.",
;//    "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-",
;//    "-.--", "--.."
;//};
;char alphabets [] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
;'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
;
;void HundredDelay(){
; 0000 0034 void HundredDelay(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0035       TCNT0 = 0xB2;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0036       TCCR0 = (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0037       while ((TIFR & (1 << TOV0)) == 0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038       TCCR0 = 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039       TIFR = 1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003A }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;//
;//void display(int counter)
;//{     if (counter !=0){
;//      if(counter > 6){
;//        lcd_putchar('.');
;////      currentChar = '.';
;//      if(flag ==0)
;//      {
;//      flag++;
;//      }
;//      if(flag == 1){
;//       lcd_putchar('.');
;//        flag=5;
;//      }
;//      }
;//      else if(counter <6)
;//      {
;////            currentChar = '-';
;//            if(flag ==0)
;//      {
;//      flag++;
;//      }
;//            if(flag == 1){
;//           lcd_putchar('-');
;//           flag=5;
;//          }
;//      }
;//      index++;
;//      int i;
;//      for(i=0;i<st.length;i++)
;//      {
;//        sent +=st[i];
;//      }
;//      sprintf(bb,"%p",st[index]);
;//      lcd_puts(bb);
;//}
;//      counter=0;
;//      flag =0;
;//
;//}
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0065 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0066 // Place your code here
; 0000 0067 
; 0000 0068 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;//void DetectMorse()
;//{
;//int j=0;
;//    for(j = 0; j < 26; j++)
;//    {
;//
;////        if(strcmp(morseOutput, morseCode[j]))
;//        {
;//            final = alpha[j];
;//            lcd_putchar(final);
;//            delay_ms(50);
;//            break;
;//        }
;//    }
;//    lcd_clear();
;//    lcd_putchar(final);
;//    delay_ms(50);
;//}
;//
;
;
;void main(void)
; 0000 007F {
;PCODE: $00000025 VOL: 0
; 0000 0080 // Declare your local variables here
; 0000 0081 int fixed = 60;
; 0000 0082 int counter = 0;
; 0000 0083 int last = 0;
; 0000 0084 int now = 0;
; 0000 0085 int i = 0;
; 0000 0086 int j = 0;
; 0000 0087 int flag = 0;
; 0000 0088 char sent[7], alph[27];
; 0000 0089 bool filed = true;
; 0000 008A 
; 0000 008B // Input/Output Ports initialization
; 0000 008C // Port A initialization
; 0000 008D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	fixed -> R16,R17
;	counter -> R18,R19
;	last -> R20,R21
;	now -> Y+41
;	i -> Y+39
;	j -> Y+37
;	flag -> Y+35
;	sent -> Y+28
;	alph -> Y+1
;	filed -> Y+0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 008F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0090 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0091 
; 0000 0092 // Port B initialization
; 0000 0093 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0094 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0095 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0096 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0097 
; 0000 0098 // Port C initialization
; 0000 0099 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 009A DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 009B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 009C PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 009D 
; 0000 009E // Port D initialization
; 0000 009F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A0 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 00A1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A2 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 00A3 
; 0000 00A4 
; 0000 00A5 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00A6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00A7 TCNT1H=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00A8 TCNT1L=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00A9 ICR1H=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00AA ICR1L=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00AB OCR1AH=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00AC OCR1AL=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00AD OCR1BH=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00AE OCR1BL=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00AF 
; 0000 00B0 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00B1 TCNT0=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00B2 OCR0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00B3 
; 0000 00B4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00B6 
; 0000 00B7 // Alphanumeric LCD initialization
; 0000 00B8 // Connections are specified in the
; 0000 00B9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00BA // RS - PORTC Bit 0
; 0000 00BB // RD - PORTC Bit 1
; 0000 00BC // EN - PORTC Bit 2
; 0000 00BD // D4 - PORTC Bit 4
; 0000 00BE // D5 - PORTC Bit 5
; 0000 00BF // D6 - PORTC Bit 6
; 0000 00C0 // D7 - PORTC Bit 7
; 0000 00C1 // Characters/line: 16
; 0000 00C2 lcd_init(16);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00C3 
; 0000 00C4 // Global enable interrupts
; 0000 00C5 #asm("sei")
;PCODE: $0000005F VOL: 0
	sei
;PCODE: $00000060 VOL: 0
; 0000 00C6 for (i = 0;i < 7;i++)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00C7     sent[i] = 0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00C8 for (i = 0;i < 26;i++)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C9     alph[i] = 'A' + i;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CA alph[26] = '.';
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CB 
; 0000 00CC i = 0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00CD while (1)
;PCODE: $00000090 VOL: 0
; 0000 00CE       {
; 0000 00CF       HundredDelay();
;PCODE: $00000091 VOL: 0
; 0000 00D0 //      CheckMorse();
; 0000 00D1       now = PINA & 1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00D2       if (now == 1 && last == 0)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D3       {
; 0000 00D4       //        while(input == 1){T1Delay();
; 0000 00D5 //            counter++;}
; 0000 00D6 //        display(counter);
; 0000 00D7         counter = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D8         filed = false;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D9       }
; 0000 00DA       if (now == 1 && last == 1)
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00DB         counter++;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00DC       if (now == 0 && last == 1)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DD       {
; 0000 00DE       //        counter = 0;
; 0000 00DF //        while(input== 0 ){T1Delay();}
; 0000 00E0 //        display(counter);
; 0000 00E1 //      }
; 0000 00E2 //
; 0000 00E3         flag = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E4         if (counter > fixed)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00E5             sent[i] = '.';
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E6         else
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E7             sent[i] = '_';
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00E8         i++;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E9       }
; 0000 00EA       if (now == 0 && last == 0 && !filed)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00EB         flag++;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00EC       if ((flag > 200 || i == 6 || (i == 4 && strcmp(sent, "._._"))) && !filed)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00ED       {
; 0000 00EE         filed = true;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00EF         flag = 0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F0         for (j = 0;j < 27;j++)
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F1         //      int i;
; 0000 00F2 //      for(i=0;i<100;i++){
; 0000 00F3 //      }
; 0000 00F4 //
; 0000 00F5 //           OneSecDelay();
; 0000 00F6 //     display(counter);
; 0000 00F7 //     DetectMorse();
; 0000 00F8 //     }
; 0000 00F9 
; 0000 00FA             if (!strcmp(sent, Revmorse[j]))
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00FB             {
; 0000 00FC                 lcd_putchar(alph[j]);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00FD                 break;
;PCODE: $00000119 VOL: 0
; 0000 00FE             }
; 0000 00FF         for (j = 0;j < 7;j++)
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0100             sent[j] = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0101 i = 0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0102       }
; 0000 0103       last = now;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0104 
; 0000 0105 //     input = PINA.0;
; 0000 0106 //     if(input == 1){
; 0000 0107 //     counter = 0;
; 0000 0108 //        while(input == 1){T1Delay();
; 0000 0109 //            counter++;}
; 0000 010A //        display(counter);
; 0000 010B //      }
; 0000 010C //      if(input == 0)
; 0000 010D //      {
; 0000 010E //        counter = 0;
; 0000 010F //        while(input== 0 ){T1Delay();}
; 0000 0110 //        display(counter);
; 0000 0111 //      }
; 0000 0112 //
; 0000 0113 //      int i;
; 0000 0114 //      for(i=0;i<100;i++){
; 0000 0115 //      }
; 0000 0116 //
; 0000 0117 //           OneSecDelay();
; 0000 0118 //     display(counter);
; 0000 0119 //     DetectMorse();
; 0000 011A //     }
; 0000 011B 
; 0000 011C // if(PINA.1 == 0)
; 0000 011D //      {
; 0000 011E //      lcd_clear();
; 0000 011F //      }
; 0000 0120 //        DetectMorse();
; 0000 0121       }
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0122 }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0

	.DSEG
_0x23:
	.BYTE 0x5
