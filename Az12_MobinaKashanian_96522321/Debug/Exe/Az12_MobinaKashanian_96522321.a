;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Az12_mobinakashanina
;Version :
;Date    : 7/18/2020
;Author  : MobinaKashanian
;Company : 96522321
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include <font5x7.h>
;
;// Declare your global variables here
;int p=0;
;int q=0;
;int x_coor=63;
;int y_coor=31;
;int move=0;
;int gradient=10;

	.DSEG
;void main(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002A // Declare your local variables here
; 0000 002B // Variable used to store graphic display
; 0000 002C // controller initialization data
; 0000 002D GLCDINIT_t glcd_init_data;
; 0000 002E 
; 0000 002F // Input/Output Ports initialization
; 0000 0030 // Port A initialization
; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0032 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0034 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0035 
; 0000 0036 // Port B initialization
; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0038 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003B 
; 0000 003C // Port C initialization
; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0040 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0041 
; 0000 0042 // Port D initialization
; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0044 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0046 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0047 
; 0000 0048 // Timer/Counter 0 initialization
; 0000 0049 // Clock source: System Clock
; 0000 004A // Clock value: Timer 0 Stopped
; 0000 004B // Mode: Normal top=0xFF
; 0000 004C // OC0 output: Disconnected
; 0000 004D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004E TCNT0=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004F OCR0=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0050 
; 0000 0051 // Timer/Counter 1 initialization
; 0000 0052 // Clock source: System Clock
; 0000 0053 // Clock value: Timer1 Stopped
; 0000 0054 // Mode: Normal top=0xFFFF
; 0000 0055 // OC1A output: Disconnected
; 0000 0056 // OC1B output: Disconnected
; 0000 0057 // Noise Canceler: Off
; 0000 0058 // Input Capture on Falling Edge
; 0000 0059 // Timer1 Overflow Interrupt: Off
; 0000 005A // Input Capture Interrupt: Off
; 0000 005B // Compare A Match Interrupt: Off
; 0000 005C // Compare B Match Interrupt: Off
; 0000 005D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005F TCNT1H=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0060 TCNT1L=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0061 ICR1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0062 ICR1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0063 OCR1AH=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0064 OCR1AL=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0065 OCR1BH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0066 OCR1BL=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0067 
; 0000 0068 // Timer/Counter 2 initialization
; 0000 0069 // Clock source: System Clock
; 0000 006A // Clock value: Timer2 Stopped
; 0000 006B // Mode: Normal top=0xFF
; 0000 006C // OC2 output: Disconnected
; 0000 006D ASSR=0<<AS2;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006F TCNT2=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0070 OCR2=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0071 
; 0000 0072 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0073 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0074 
; 0000 0075 // External Interrupt(s) initialization
; 0000 0076 // INT0: Off
; 0000 0077 // INT1: Off
; 0000 0078 // INT2: Off
; 0000 0079 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007A MCUCSR=(0<<ISC2);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 007B 
; 0000 007C // USART initialization
; 0000 007D // USART disabled
; 0000 007E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007F 
; 0000 0080 // Analog Comparator initialization
; 0000 0081 // Analog Comparator: Off
; 0000 0082 // The Analog Comparator's positive input is
; 0000 0083 // connected to the AIN0 pin
; 0000 0084 // The Analog Comparator's negative input is
; 0000 0085 // connected to the AIN1 pin
; 0000 0086 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0087 SFIOR=(0<<ACME);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0088 
; 0000 0089 // ADC initialization
; 0000 008A // ADC disabled
; 0000 008B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 008C 
; 0000 008D // SPI initialization
; 0000 008E // SPI disabled
; 0000 008F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0090 
; 0000 0091 // TWI initialization
; 0000 0092 // TWI disabled
; 0000 0093 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0094 
; 0000 0095 // Graphic Display Controller initialization
; 0000 0096 // The KS0108 connections are specified in the
; 0000 0097 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 0098 // DB0 - PORTA Bit 0
; 0000 0099 // DB1 - PORTA Bit 1
; 0000 009A // DB2 - PORTA Bit 2
; 0000 009B // DB3 - PORTA Bit 3
; 0000 009C // DB4 - PORTA Bit 4
; 0000 009D // DB5 - PORTA Bit 5
; 0000 009E // DB6 - PORTA Bit 6
; 0000 009F // DB7 - PORTA Bit 7
; 0000 00A0 // E - PORTB Bit 0
; 0000 00A1 // RD /WR - PORTB Bit 1
; 0000 00A2 // RS - PORTB Bit 2
; 0000 00A3 // /RST - PORTB Bit 3
; 0000 00A4 // CS1 - PORTB Bit 4
; 0000 00A5 // CS2 - PORTB Bit 5
; 0000 00A6 
; 0000 00A7 // Specify the current font for displaying text
; 0000 00A8 glcd_init_data.font=font5x7;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00A9 // No function is used for reading
; 0000 00AA // image data from external memory
; 0000 00AB glcd_init_data.readxmem=NULL;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00AC // No function is used for writing
; 0000 00AD // image data to external memory
; 0000 00AE glcd_init_data.writexmem=NULL;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00AF 
; 0000 00B0 glcd_init(&glcd_init_data);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00B1 
; 0000 00B2 while (1)
;PCODE: $0000005B VOL: 0
; 0000 00B3       {
; 0000 00B4        //Place your code here
; 0000 00B5       p=0;
;PCODE: $0000005C VOL: 0
; 0000 00B6       q=0;
;PCODE: $0000005D VOL: 0
; 0000 00B7       glcd_clear();
;PCODE: $0000005E VOL: 0
; 0000 00B8       glcd_outtextxy(0,0,"Mobina Kashanian");
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00B9       glcd_outtextxy(0,10,"96522321");
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00BA       delay_ms(1000);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00BB       glcd_clear();
;PCODE: $0000006F VOL: 0
; 0000 00BC       //glcd_putimage        niazmand be lcd vission ast vali lcd vission kar nemikone
; 0000 00BD       //dar natije sheklo mikesham
; 0000 00BE       glcd_moveto(15,15);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00BF 
; 0000 00C0       while(p<20)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C1       {
; 0000 00C2       glcd_line(52,60,88,60);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C3       glcd_line(88,60,88,29);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C4       glcd_line(52,60,52,29);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C5       glcd_line(52,29,42,29);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C6       glcd_line(98,29,88,29);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00C7       glcd_line(70,0,98,29);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00C8       glcd_line(70,0,56,11);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C9       glcd_line(42,29,56,11);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00CA       p++;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00CB       if(p==19)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CC       {
; 0000 00CD             glcd_clear();
;PCODE: $000000BE VOL: 0
; 0000 00CE             delay_ms(100);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CF             glcd_clear();
;PCODE: $000000C2 VOL: 0
; 0000 00D0       }
; 0000 00D1       }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D2 
; 0000 00D3       glcd_clear();
;PCODE: $000000C6 VOL: 0
; 0000 00D4 
; 0000 00D5 
; 0000 00D6       while(q<30)
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D7     {
; 0000 00D8        glcd_circle(x_coor,y_coor,10);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00D9       if(move==0)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DA         {
; 0000 00DB            y_coor=y_coor-gradient;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DC            x_coor=x_coor+gradient;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00DD            if(x_coor+gradient>=127)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00DE            {
; 0000 00DF             move=3;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E0            }
; 0000 00E1               if(y_coor-gradient<=0)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00E2            {
; 0000 00E3             move=1;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E4            }
; 0000 00E5         }
;PCODE: $000000E5 VOL: 0
; 0000 00E6           else if(move==1)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00E7         {
; 0000 00E8            y_coor=y_coor+gradient;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00E9            x_coor=x_coor+gradient;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00EA            if(x_coor+gradient>=127)
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00EB            {
; 0000 00EC             move=2;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00ED            }
; 0000 00EE               if(y_coor+gradient>=63)
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00EF            {
; 0000 00F0             move=0;
;PCODE: $000000FC VOL: 0
; 0000 00F1            }
; 0000 00F2         }
;PCODE: $000000FD VOL: 0
; 0000 00F3             else if(move==2)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F4         {
; 0000 00F5            y_coor=y_coor+gradient;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F6            x_coor=x_coor-gradient;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00F7            if(x_coor-gradient<=0)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F8            {
; 0000 00F9             move=1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00FA            }
; 0000 00FB               if(y_coor+gradient>=63)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00FC            {
; 0000 00FD             move=3;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00FE            }
; 0000 00FF         }
;PCODE: $00000117 VOL: 0
; 0000 0100         else
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0101         {
; 0000 0102            y_coor=y_coor-gradient;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0103            x_coor=x_coor-gradient;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0104            if(x_coor-gradient<=0)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0105            {
; 0000 0106             move=0;
;PCODE: $00000125 VOL: 0
; 0000 0107            }
; 0000 0108               if(y_coor-gradient<=0)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0109            {
; 0000 010A             move=2;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 010B            }
; 0000 010C         }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 010D 
; 0000 010E        glcd_clear();
;PCODE: $00000132 VOL: 0
; 0000 010F        glcd_circle(x_coor,y_coor,10);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0110        delay_ms(50);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0111        q++;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0112       }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0113       }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0114 }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0

	.DSEG
_0x7:
	.BYTE 0x1A
