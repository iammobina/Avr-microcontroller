
AVRASM ver. 2.1.30  C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm Fri Dec 25 21:19:33 2020

C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321\Debug\List\Q3.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sec=R5
                 	.DEF _minute=R4
                 	.DEF _hour=R7
                 	.DEF _tenth=R6
                 	.DEF _day=R9
                 	.DEF _month=R8
                 	.DEF _year=R11
                 	.DEF _control_menu=R10
                 	.DEF _left_menu=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 010d 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 010f 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 010e 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0032
00002b 0400      	.DB  0x32,0x0,0x0,0x4
00002c 0b07
00002d 4d00      	.DB  0x7,0xB,0x0,0x4D
00002e 0000      	.DB  0x0,0x0
                 
                 _0x55:
00002f 0000
000030 0000
000031 0000
000032 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000033 0000
000034 0000
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0004      	.DW  0x04
00003a 0054      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0136 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;//-------in ghesmat bargerefte az code mohandes mashhoun baraye az rizpar mibashad---------
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;#define KEYPAD_DIV  10
                 ;#define KEYPAD_MUL  11
                 ;#define KEYPAD_PLS  12
                 ;#define KEYPAD_MNS  13
                 ;#define KEYPAD_EQU  14
                 ;#define KEYPAD_ON   15
                 ;
                 ;void delay()
                 ; 0000 0022 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ; 0000 0023     TCCR0 = (1 << CS02) | (1 << CS00);
000069 e0e5      	LDI  R30,LOW(5)
00006a bfe3      	OUT  0x33,R30
                 ; 0000 0024     TCNT0 = 231;
00006b eee7      	LDI  R30,LOW(231)
00006c bfe2      	OUT  0x32,R30
                 ; 0000 0025     while ((TIFR & (1 << TOV0)) == 0);
                 _0x3:
00006d b7e8      	IN   R30,0x38
00006e ffe0      	SBRS R30,0
00006f cffd      	RJMP _0x3
                 ; 0000 0026     TIFR = (1 << TOV0);
000070 e0e1      	LDI  R30,LOW(1)
000071 bfe8      	OUT  0x38,R30
                 ; 0000 0027 }
000072 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char keypad_scan()
                 ; 0000 002A {
                 _keypad_scan:
                 ; .FSTART _keypad_scan
                 ; 0000 002B unsigned char result=255;
                 ; 0000 002C ////////////////////////  ROW1 ////////////////////////
                 ; 0000 002D KEYPAD_R1 = 1; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row1 for Keypad
000073 931a      	ST   -Y,R17
                 ;	result -> R17
000074 ef1f      	LDI  R17,255
000075 9a90      	SBI  0x12,0
000076 9891      	CBI  0x12,1
000077 9892      	CBI  0x12,2
000078 9893      	CBI  0x12,3
                 ; 0000 002E delay();
000079 dfef      	RCALL _delay
                 ; 0000 002F if (KEYPAD_C1)
00007a 9b84      	SBIS 0x10,4
00007b c002      	RJMP _0xE
                 ; 0000 0030 result = KEYPAD_NUM7;
00007c e017      	LDI  R17,LOW(7)
                 ; 0000 0031 else if (KEYPAD_C2)
00007d c00a      	RJMP _0xF
                 _0xE:
00007e 9b85      	SBIS 0x10,5
00007f c002      	RJMP _0x10
                 ; 0000 0032 result = KEYPAD_NUM8;
000080 e018      	LDI  R17,LOW(8)
                 ; 0000 0033 else if (KEYPAD_C3)
000081 c006      	RJMP _0x11
                 _0x10:
000082 9b86      	SBIS 0x10,6
000083 c002      	RJMP _0x12
                 ; 0000 0034 result = KEYPAD_NUM9;
000084 e019      	LDI  R17,LOW(9)
                 ; 0000 0035 else if (KEYPAD_C4)
000085 c002      	RJMP _0x13
                 _0x12:
000086 9987      	SBIC 0x10,7
                 ; 0000 0036 result = KEYPAD_DIV;
000087 e01a      	LDI  R17,LOW(10)
                 ; 0000 0037 
                 ; 0000 0038 ////////////////////////  ROW2 ////////////////////////
                 ; 0000 0039 KEYPAD_R1 = 0; KEYPAD_R2 = 1;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row2 for Keypad
                 _0x13:
                 _0x11:
                 _0xF:
000088 9890      	CBI  0x12,0
000089 9a91      	SBI  0x12,1
00008a 9892      	CBI  0x12,2
00008b 9893      	CBI  0x12,3
                 ; 0000 003A delay();
00008c dfdc      	RCALL _delay
                 ; 0000 003B if (KEYPAD_C1)
00008d 9b84      	SBIS 0x10,4
00008e c002      	RJMP _0x1D
                 ; 0000 003C result = KEYPAD_NUM4;
00008f e014      	LDI  R17,LOW(4)
                 ; 0000 003D else if (KEYPAD_C2)
000090 c00a      	RJMP _0x1E
                 _0x1D:
000091 9b85      	SBIS 0x10,5
000092 c002      	RJMP _0x1F
                 ; 0000 003E result = KEYPAD_NUM5;
000093 e015      	LDI  R17,LOW(5)
                 ; 0000 003F else if (KEYPAD_C3)
000094 c006      	RJMP _0x20
                 _0x1F:
000095 9b86      	SBIS 0x10,6
000096 c002      	RJMP _0x21
                 ; 0000 0040 result = KEYPAD_NUM6;
000097 e016      	LDI  R17,LOW(6)
                 ; 0000 0041 else if (KEYPAD_C4)
000098 c002      	RJMP _0x22
                 _0x21:
000099 9987      	SBIC 0x10,7
                 ; 0000 0042 result = KEYPAD_MUL;
00009a e01b      	LDI  R17,LOW(11)
                 ; 0000 0043 
                 ; 0000 0044 ////////////////////////  ROW3 ////////////////////////
                 ; 0000 0045 KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 1;  KEYPAD_R4 = 0; //set Row3 for Keypad
                 _0x22:
                 _0x20:
                 _0x1E:
00009b 9890      	CBI  0x12,0
00009c 9891      	CBI  0x12,1
00009d 9a92      	SBI  0x12,2
00009e 9893      	CBI  0x12,3
                 ; 0000 0046 delay();
00009f dfc9      	RCALL _delay
                 ; 0000 0047 if (KEYPAD_C1)
0000a0 9b84      	SBIS 0x10,4
0000a1 c002      	RJMP _0x2C
                 ; 0000 0048 result = KEYPAD_NUM1;
0000a2 e011      	LDI  R17,LOW(1)
                 ; 0000 0049 else if (KEYPAD_C2)
0000a3 c00a      	RJMP _0x2D
                 _0x2C:
0000a4 9b85      	SBIS 0x10,5
0000a5 c002      	RJMP _0x2E
                 ; 0000 004A result = KEYPAD_NUM2;
0000a6 e012      	LDI  R17,LOW(2)
                 ; 0000 004B else if (KEYPAD_C3)
0000a7 c006      	RJMP _0x2F
                 _0x2E:
0000a8 9b86      	SBIS 0x10,6
0000a9 c002      	RJMP _0x30
                 ; 0000 004C result = KEYPAD_NUM3;
0000aa e013      	LDI  R17,LOW(3)
                 ; 0000 004D else if (KEYPAD_C4)
0000ab c002      	RJMP _0x31
                 _0x30:
0000ac 9987      	SBIC 0x10,7
                 ; 0000 004E result = KEYPAD_MNS;
0000ad e01d      	LDI  R17,LOW(13)
                 ; 0000 004F 
                 ; 0000 0050 ////////////////////////  ROW4 ////////////////////////
                 ; 0000 0051 KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 1; //set Row4 for Keypad
                 _0x31:
                 _0x2F:
                 _0x2D:
0000ae 9890      	CBI  0x12,0
0000af 9891      	CBI  0x12,1
0000b0 9892      	CBI  0x12,2
0000b1 9a93      	SBI  0x12,3
                 ; 0000 0052 delay();
0000b2 dfb6      	RCALL _delay
                 ; 0000 0053 if (KEYPAD_C1)
0000b3 9b84      	SBIS 0x10,4
0000b4 c002      	RJMP _0x3B
                 ; 0000 0054 result = KEYPAD_ON;
0000b5 e01f      	LDI  R17,LOW(15)
                 ; 0000 0055 else if (KEYPAD_C2)
0000b6 c00a      	RJMP _0x3C
                 _0x3B:
0000b7 9b85      	SBIS 0x10,5
0000b8 c002      	RJMP _0x3D
                 ; 0000 0056 result = KEYPAD_NUM0;
0000b9 e010      	LDI  R17,LOW(0)
                 ; 0000 0057 else if (KEYPAD_C3)
0000ba c006      	RJMP _0x3E
                 _0x3D:
0000bb 9b86      	SBIS 0x10,6
0000bc c002      	RJMP _0x3F
                 ; 0000 0058 result = KEYPAD_EQU;
0000bd e01e      	LDI  R17,LOW(14)
                 ; 0000 0059 else if (KEYPAD_C4)
0000be c002      	RJMP _0x40
                 _0x3F:
0000bf 9987      	SBIC 0x10,7
                 ; 0000 005A result = KEYPAD_PLS;
0000c0 e01c      	LDI  R17,LOW(12)
                 ; 0000 005B 
                 ; 0000 005C return result;
                 _0x40:
                 _0x3E:
                 _0x3C:
0000c1 2fe1      	MOV  R30,R17
0000c2 9119      	LD   R17,Y+
0000c3 9508      	RET
                 ; 0000 005D }
                 ; .FEND
                 ;
                 ;char sec=0,minute=50,hour=04,tenth=0;
                 ;char day=11,month=07,year=77;
                 ;char control_menu=0, left_menu=0;
                 ;
                 ;//flash char display[2]={0x3f,0x2d};
                 ;
                 ;int convert_to_hex(int n)
                 ; 0000 0066 {
                 _convert_to_hex:
                 ; .FSTART _convert_to_hex
                 ; 0000 0067     switch(n){
0000c4 93ba      	ST   -Y,R27
0000c5 93aa      	ST   -Y,R26
                 ;	n -> Y+0
0000c6 81e8      	LD   R30,Y
0000c7 81f9      	LDD  R31,Y+1
                 ; 0000 0068         case 0:
0000c8 9730      	SBIW R30,0
0000c9 f419      	BRNE _0x45
                 ; 0000 0069             return 0X3F;
0000ca e3ef      	LDI  R30,LOW(63)
0000cb e0f0      	LDI  R31,HIGH(63)
0000cc c03e      	RJMP _0x2000001
                 ; 0000 006A         case 1:
                 _0x45:
0000cd 30e1      	CPI  R30,LOW(0x1)
0000ce e0a0      	LDI  R26,HIGH(0x1)
0000cf 07fa      	CPC  R31,R26
0000d0 f419      	BRNE _0x46
                 ; 0000 006B             return 0X06;
0000d1 e0e6      	LDI  R30,LOW(6)
0000d2 e0f0      	LDI  R31,HIGH(6)
0000d3 c037      	RJMP _0x2000001
                 ; 0000 006C         case 2:
                 _0x46:
0000d4 30e2      	CPI  R30,LOW(0x2)
0000d5 e0a0      	LDI  R26,HIGH(0x2)
0000d6 07fa      	CPC  R31,R26
0000d7 f419      	BRNE _0x47
                 ; 0000 006D             return 0X5B;
0000d8 e5eb      	LDI  R30,LOW(91)
0000d9 e0f0      	LDI  R31,HIGH(91)
0000da c030      	RJMP _0x2000001
                 ; 0000 006E         case 3:
                 _0x47:
0000db 30e3      	CPI  R30,LOW(0x3)
0000dc e0a0      	LDI  R26,HIGH(0x3)
0000dd 07fa      	CPC  R31,R26
0000de f419      	BRNE _0x48
                 ; 0000 006F             return 0X4F;
0000df e4ef      	LDI  R30,LOW(79)
0000e0 e0f0      	LDI  R31,HIGH(79)
0000e1 c029      	RJMP _0x2000001
                 ; 0000 0070         case 4:
                 _0x48:
0000e2 30e4      	CPI  R30,LOW(0x4)
0000e3 e0a0      	LDI  R26,HIGH(0x4)
0000e4 07fa      	CPC  R31,R26
0000e5 f419      	BRNE _0x49
                 ; 0000 0071             return 0X66;
0000e6 e6e6      	LDI  R30,LOW(102)
0000e7 e0f0      	LDI  R31,HIGH(102)
0000e8 c022      	RJMP _0x2000001
                 ; 0000 0072         case 5:
                 _0x49:
0000e9 30e5      	CPI  R30,LOW(0x5)
0000ea e0a0      	LDI  R26,HIGH(0x5)
0000eb 07fa      	CPC  R31,R26
0000ec f419      	BRNE _0x4A
                 ; 0000 0073             return 0X6D;
0000ed e6ed      	LDI  R30,LOW(109)
0000ee e0f0      	LDI  R31,HIGH(109)
0000ef c01b      	RJMP _0x2000001
                 ; 0000 0074         case 6:
                 _0x4A:
0000f0 30e6      	CPI  R30,LOW(0x6)
0000f1 e0a0      	LDI  R26,HIGH(0x6)
0000f2 07fa      	CPC  R31,R26
0000f3 f419      	BRNE _0x4B
                 ; 0000 0075             return 0X7D;
0000f4 e7ed      	LDI  R30,LOW(125)
0000f5 e0f0      	LDI  R31,HIGH(125)
0000f6 c014      	RJMP _0x2000001
                 ; 0000 0076         case 7:
                 _0x4B:
0000f7 30e7      	CPI  R30,LOW(0x7)
0000f8 e0a0      	LDI  R26,HIGH(0x7)
0000f9 07fa      	CPC  R31,R26
0000fa f419      	BRNE _0x4C
                 ; 0000 0077             return 0X07;
0000fb e0e7      	LDI  R30,LOW(7)
0000fc e0f0      	LDI  R31,HIGH(7)
0000fd c00d      	RJMP _0x2000001
                 ; 0000 0078         case 8:
                 _0x4C:
0000fe 30e8      	CPI  R30,LOW(0x8)
0000ff e0a0      	LDI  R26,HIGH(0x8)
000100 07fa      	CPC  R31,R26
000101 f419      	BRNE _0x4D
                 ; 0000 0079             return 0X7F;
000102 e7ef      	LDI  R30,LOW(127)
000103 e0f0      	LDI  R31,HIGH(127)
000104 c006      	RJMP _0x2000001
                 ; 0000 007A         case 9:
                 _0x4D:
000105 30e9      	CPI  R30,LOW(0x9)
000106 e0a0      	LDI  R26,HIGH(0x9)
000107 07fa      	CPC  R31,R26
000108 f411      	BRNE _0x44
                 ; 0000 007B             return 0X6F;
000109 e6ef      	LDI  R30,LOW(111)
00010a e0f0      	LDI  R31,HIGH(111)
                 ; 0000 007C     }
                 _0x44:
                 ; 0000 007D }
                 _0x2000001:
00010b 9622      	ADIW R28,2
00010c 9508      	RET
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 007F {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0080 
                 ; 0000 0081 }
00010d 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0084 //{{
                 ; 0000 0085 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 0086 //  tenth++;
                 ; 0000 0087 //  if(tenth ==10){
                 ; 0000 0088 //   PORTD ^= (1<<0);
                 ; 0000 0089 //  }
                 ; 0000 008A }
00010e 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 008E {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00010f 93ea      	ST   -Y,R30
000110 b7ef      	IN   R30,SREG
000111 93ea      	ST   -Y,R30
                 ; 0000 008F 
                 ; 0000 0090 sec++;
000112 9453      	INC  R5
                 ; 0000 0091 if(sec ==60)
000113 e3ec      	LDI  R30,LOW(60)
000114 15e5      	CP   R30,R5
000115 f411      	BRNE _0x4F
                 ; 0000 0092 {
                 ; 0000 0093 minute++;
000116 9443      	INC  R4
                 ; 0000 0094 sec=0;
000117 2455      	CLR  R5
                 ; 0000 0095 }
                 ; 0000 0096 if(minute ==60){
                 _0x4F:
000118 e3ec      	LDI  R30,LOW(60)
000119 15e4      	CP   R30,R4
00011a f411      	BRNE _0x50
                 ; 0000 0097 hour++;
00011b 9473      	INC  R7
                 ; 0000 0098 minute=0;
00011c 2444      	CLR  R4
                 ; 0000 0099 }
                 ; 0000 009A if(hour==24)
                 _0x50:
00011d e1e8      	LDI  R30,LOW(24)
00011e 15e7      	CP   R30,R7
00011f f411      	BRNE _0x51
                 ; 0000 009B {
                 ; 0000 009C hour=0;
000120 2477      	CLR  R7
                 ; 0000 009D day++;
000121 9493      	INC  R9
                 ; 0000 009E }
                 ; 0000 009F if(day == 30)
                 _0x51:
000122 e1ee      	LDI  R30,LOW(30)
000123 15e9      	CP   R30,R9
000124 f419      	BRNE _0x52
                 ; 0000 00A0 {
                 ; 0000 00A1 month++;
000125 9483      	INC  R8
                 ; 0000 00A2 day=1;
000126 e0e1      	LDI  R30,LOW(1)
000127 2e9e      	MOV  R9,R30
                 ; 0000 00A3 }
                 ; 0000 00A4 if(month == 12){
                 _0x52:
000128 e0ec      	LDI  R30,LOW(12)
000129 15e8      	CP   R30,R8
00012a f419      	BRNE _0x53
                 ; 0000 00A5 year++;
00012b 94b3      	INC  R11
                 ; 0000 00A6 month=1;
00012c e0e1      	LDI  R30,LOW(1)
00012d 2e8e      	MOV  R8,R30
                 ; 0000 00A7 }
                 ; 0000 00A8 if ( year == 99)
                 _0x53:
00012e e6e3      	LDI  R30,LOW(99)
00012f 15eb      	CP   R30,R11
000130 f409      	BRNE _0x54
                 ; 0000 00A9 {
                 ; 0000 00AA year = 0;
000131 24bb      	CLR  R11
                 ; 0000 00AB }
                 ; 0000 00AC }
                 _0x54:
000132 91e9      	LD   R30,Y+
000133 bfef      	OUT  SREG,R30
000134 91e9      	LD   R30,Y+
000135 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00AF {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B0 int minute0=0,minute1=0;
                 ; 0000 00B1 int hour0=0,hour1=0;
                 ; 0000 00B2 int sec1=0,sec0=0;
                 ; 0000 00B3 int day0=0,day1=0;
                 ; 0000 00B4 int month0=0,month1=0;
                 ; 0000 00B5 int year0=0,year1=0;
                 ; 0000 00B6 unsigned char key_res;
                 ; 0000 00B7 //DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
                 ; 0000 00B8 //
                 ; 0000 00B9 //PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
                 ; 0000 00BA //
                 ; 0000 00BB //DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
                 ; 0000 00BC //PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
                 ; 0000 00BD //
                 ; 0000 00BE //
                 ; 0000 00BF //DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
                 ; 0000 00C0 //PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
                 ; 0000 00C1 //
                 ; 0000 00C2 //DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
                 ; 0000 00C3 //PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
                 ; 0000 00C4 DDRC=0xFF;
000136 9763      	SBIW R28,19
000137 e182      	LDI  R24,18
000138 e0a1      	LDI  R26,LOW(1)
000139 e0b0      	LDI  R27,HIGH(1)
00013a e5ee      	LDI  R30,LOW(_0x55*2)
00013b e0f0      	LDI  R31,HIGH(_0x55*2)
00013c 940e 0496 	CALL __INITLOCB
                 ;	minute0 -> R16,R17
                 ;	minute1 -> R18,R19
                 ;	hour0 -> R20,R21
                 ;	hour1 -> Y+17
                 ;	sec1 -> Y+15
                 ;	sec0 -> Y+13
                 ;	day0 -> Y+11
                 ;	day1 -> Y+9
                 ;	month0 -> Y+7
                 ;	month1 -> Y+5
                 ;	year0 -> Y+3
                 ;	year1 -> Y+1
                 ;	key_res -> Y+0
                +
00013e e000     +LDI R16 , LOW ( 0 )
00013f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000140 e020     +LDI R18 , LOW ( 0 )
000141 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000142 e040     +LDI R20 , LOW ( 0 )
000143 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000144 efef      	LDI  R30,LOW(255)
000145 bbe4      	OUT  0x14,R30
                 ; 0000 00C5 DDRD=0x0F;
000146 e0ef      	LDI  R30,LOW(15)
000147 bbe1      	OUT  0x11,R30
                 ; 0000 00C6 PORTC=0xFF;
000148 efef      	LDI  R30,LOW(255)
000149 bbe5      	OUT  0x15,R30
                 ; 0000 00C7 PORTB=0xFF;
00014a bbe8      	OUT  0x18,R30
                 ; 0000 00C8 DDRA=0xFF;
00014b bbea      	OUT  0x1A,R30
                 ; 0000 00C9 DDRB=0xFF;
00014c bbe7      	OUT  0x17,R30
                 ; 0000 00CA 
                 ; 0000 00CB // Timer/Counter 1 initialization
                 ; 0000 00CC // Clock source: System Clock
                 ; 0000 00CD // Clock value: 31.250 kHz
                 ; 0000 00CE // Mode: CTC top=OCR1A
                 ; 0000 00CF // OC1A output: Discon.
                 ; 0000 00D0 // OC1B output: Discon.
                 ; 0000 00D1 // Noise Canceler: Off
                 ; 0000 00D2 // Input Capture on Falling Edge
                 ; 0000 00D3 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D4 // Input Capture Interrupt: Off
                 ; 0000 00D5 // Compare A Match Interrupt: On
                 ; 0000 00D6 // Compare B Match Interrupt: Off
                 ; 0000 00D7 TCCR1A = 0x00;
00014d e0e0      	LDI  R30,LOW(0)
00014e bdef      	OUT  0x2F,R30
                 ; 0000 00D8 TCCR1B = 0x0C;
00014f e0ec      	LDI  R30,LOW(12)
000150 bdee      	OUT  0x2E,R30
                 ; 0000 00D9 TCNT1H = 0x00;
000151 e0e0      	LDI  R30,LOW(0)
000152 bded      	OUT  0x2D,R30
                 ; 0000 00DA TCNT1L = 0x00;
000153 bdec      	OUT  0x2C,R30
                 ; 0000 00DB ICR1H = 0x00;
000154 bde7      	OUT  0x27,R30
                 ; 0000 00DC ICR1L = 0x00;
000155 bde6      	OUT  0x26,R30
                 ; 0000 00DD OCR1AH = 0x7A;
000156 e7ea      	LDI  R30,LOW(122)
000157 bdeb      	OUT  0x2B,R30
                 ; 0000 00DE OCR1AL = 0x12;
000158 e1e2      	LDI  R30,LOW(18)
000159 bdea      	OUT  0x2A,R30
                 ; 0000 00DF OCR1BH = 0x00;
00015a e0e0      	LDI  R30,LOW(0)
00015b bde9      	OUT  0x29,R30
                 ; 0000 00E0 OCR1BL = 0x00;
00015c bde8      	OUT  0x28,R30
                 ; 0000 00E1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00E2 TIMSK = 0x10;
00015d e1e0      	LDI  R30,LOW(16)
00015e bfe9      	OUT  0x39,R30
                 ; 0000 00E3 
                 ; 0000 00E4 
                 ; 0000 00E5 // Timer/Counter 0 initialization
                 ; 0000 00E6 // Clock source: System Clock
                 ; 0000 00E7 // Clock value: 0.977 kHz
                 ; 0000 00E8 // Mode: Normal top=0xFF
                 ; 0000 00E9 // OC0 output: Disconnected
                 ; 0000 00EA // Timer Period: 0.26214 s
                 ; 0000 00EB TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00015f e0e5      	LDI  R30,LOW(5)
000160 bfe3      	OUT  0x33,R30
                 ; 0000 00EC TCNT0=0x00;
000161 e0e0      	LDI  R30,LOW(0)
000162 bfe2      	OUT  0x32,R30
                 ; 0000 00ED OCR0=0x60;
000163 e6e0      	LDI  R30,LOW(96)
000164 bfec      	OUT  0x3C,R30
                 ; 0000 00EE 
                 ; 0000 00EF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00F0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
000165 e0e2      	LDI  R30,LOW(2)
000166 bfe9      	OUT  0x39,R30
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3 
                 ; 0000 00F4 #asm("sei")
000167 9478      	sei
                 ; 0000 00F5 
                 ; 0000 00F6 while (1)
                 _0x56:
                 ; 0000 00F7       {
                 ; 0000 00F8     sec0=sec%10;
000168 2da5      	MOV  R26,R5
000169 d2c1      	RCALL SUBOPT_0x0
00016a 87ed      	STD  Y+13,R30
00016b 87fe      	STD  Y+13+1,R31
                 ; 0000 00F9     sec1=sec/10;
00016c 2da5      	MOV  R26,R5
00016d d2c3      	RCALL SUBOPT_0x1
00016e 87ef      	STD  Y+15,R30
00016f 8bf8      	STD  Y+15+1,R31
                 ; 0000 00FA     minute0=minute%10;
000170 2da4      	MOV  R26,R4
000171 d2b9      	RCALL SUBOPT_0x0
000172 018f      	MOVW R16,R30
                 ; 0000 00FB     minute1=minute/10;
000173 2da4      	MOV  R26,R4
000174 d2bc      	RCALL SUBOPT_0x1
000175 019f      	MOVW R18,R30
                 ; 0000 00FC     hour0=hour %10;
000176 2da7      	MOV  R26,R7
000177 d2b3      	RCALL SUBOPT_0x0
000178 01af      	MOVW R20,R30
                 ; 0000 00FD     hour1=hour /10;
000179 2da7      	MOV  R26,R7
00017a d2b6      	RCALL SUBOPT_0x1
00017b 8be9      	STD  Y+17,R30
00017c 8bfa      	STD  Y+17+1,R31
                 ; 0000 00FE     day0=day %10;
00017d 2da9      	MOV  R26,R9
00017e d2ac      	RCALL SUBOPT_0x0
00017f 87eb      	STD  Y+11,R30
000180 87fc      	STD  Y+11+1,R31
                 ; 0000 00FF     day1=day /10;
000181 2da9      	MOV  R26,R9
000182 d2ae      	RCALL SUBOPT_0x1
000183 87e9      	STD  Y+9,R30
000184 87fa      	STD  Y+9+1,R31
                 ; 0000 0100     month0=month %10;
000185 2da8      	MOV  R26,R8
000186 d2a4      	RCALL SUBOPT_0x0
000187 83ef      	STD  Y+7,R30
000188 87f8      	STD  Y+7+1,R31
                 ; 0000 0101     month1=month /10;
000189 2da8      	MOV  R26,R8
00018a d2a6      	RCALL SUBOPT_0x1
00018b 83ed      	STD  Y+5,R30
00018c 83fe      	STD  Y+5+1,R31
                 ; 0000 0102     year0=year %10;
00018d 2dab      	MOV  R26,R11
00018e d29c      	RCALL SUBOPT_0x0
00018f 83eb      	STD  Y+3,R30
000190 83fc      	STD  Y+3+1,R31
                 ; 0000 0103     year1=year /10;
000191 2dab      	MOV  R26,R11
000192 d29e      	RCALL SUBOPT_0x1
000193 83e9      	STD  Y+1,R30
000194 83fa      	STD  Y+1+1,R31
                 ; 0000 0104 
                 ; 0000 0105 
                 ; 0000 0106         PORTB = 0b11111110;
000195 efee      	LDI  R30,LOW(254)
000196 bbe8      	OUT  0x18,R30
                 ; 0000 0107         PORTA = 0b11101111;
000197 eeef      	LDI  R30,LOW(239)
000198 bbeb      	OUT  0x1B,R30
                 ; 0000 0108     PORTC = convert_to_hex(hour1);
000199 89a9      	LDD  R26,Y+17
00019a 89ba      	LDD  R27,Y+17+1
00019b d29b      	RCALL SUBOPT_0x2
                 ; 0000 0109     delay();
                 ; 0000 010A 
                 ; 0000 010B         PORTB = 0b11111101;
00019c efed      	LDI  R30,LOW(253)
00019d bbe8      	OUT  0x18,R30
                 ; 0000 010C         PORTA = 0b11101111;
00019e eeef      	LDI  R30,LOW(239)
00019f bbeb      	OUT  0x1B,R30
                 ; 0000 010D     PORTC = convert_to_hex(hour0);
0001a0 01da      	MOVW R26,R20
0001a1 d295      	RCALL SUBOPT_0x2
                 ; 0000 010E     delay();
                 ; 0000 010F 
                 ; 0000 0110 
                 ; 0000 0111         PORTB = 0b11111011;
0001a2 efeb      	LDI  R30,LOW(251)
0001a3 bbe8      	OUT  0x18,R30
                 ; 0000 0112         PORTA = 0b11101111;
0001a4 eeef      	LDI  R30,LOW(239)
0001a5 bbeb      	OUT  0x1B,R30
                 ; 0000 0113     PORTC = convert_to_hex(minute1);
0001a6 01d9      	MOVW R26,R18
0001a7 d28f      	RCALL SUBOPT_0x2
                 ; 0000 0114     delay();
                 ; 0000 0115 
                 ; 0000 0116 
                 ; 0000 0117         PORTB = 0b11110111;
0001a8 efe7      	LDI  R30,LOW(247)
0001a9 bbe8      	OUT  0x18,R30
                 ; 0000 0118         PORTA = 0b11101111;
0001aa eeef      	LDI  R30,LOW(239)
0001ab bbeb      	OUT  0x1B,R30
                 ; 0000 0119     PORTC = convert_to_hex(minute0) ;
0001ac 01d8      	MOVW R26,R16
0001ad d289      	RCALL SUBOPT_0x2
                 ; 0000 011A     delay();
                 ; 0000 011B 
                 ; 0000 011C 
                 ; 0000 011D         PORTB = 0b11101111;
0001ae eeef      	LDI  R30,LOW(239)
0001af bbe8      	OUT  0x18,R30
                 ; 0000 011E         PORTA = 0b11101111;
0001b0 bbeb      	OUT  0x1B,R30
                 ; 0000 011F     PORTC = convert_to_hex(day1);
0001b1 85a9      	LDD  R26,Y+9
0001b2 85ba      	LDD  R27,Y+9+1
0001b3 d283      	RCALL SUBOPT_0x2
                 ; 0000 0120     delay();
                 ; 0000 0121 
                 ; 0000 0122         PORTB = 0b11011111;
0001b4 edef      	LDI  R30,LOW(223)
0001b5 bbe8      	OUT  0x18,R30
                 ; 0000 0123     PORTC = convert_to_hex(day0) ;
0001b6 85ab      	LDD  R26,Y+11
0001b7 85bc      	LDD  R27,Y+11+1
0001b8 d27e      	RCALL SUBOPT_0x2
                 ; 0000 0124     delay();
                 ; 0000 0125 
                 ; 0000 0126         PORTA = 0b11111110;
0001b9 efee      	LDI  R30,LOW(254)
0001ba bbeb      	OUT  0x1B,R30
                 ; 0000 0127         PORTB = 0b11111111;
0001bb efef      	LDI  R30,LOW(255)
0001bc bbe8      	OUT  0x18,R30
                 ; 0000 0128     PORTC = convert_to_hex(month1);
0001bd 81ad      	LDD  R26,Y+5
0001be 81be      	LDD  R27,Y+5+1
0001bf d277      	RCALL SUBOPT_0x2
                 ; 0000 0129     delay();
                 ; 0000 012A 
                 ; 0000 012B         PORTA = 0b01111101;
0001c0 e7ed      	LDI  R30,LOW(125)
0001c1 bbeb      	OUT  0x1B,R30
                 ; 0000 012C         PORTB = 0b11111111;
0001c2 efef      	LDI  R30,LOW(255)
0001c3 bbe8      	OUT  0x18,R30
                 ; 0000 012D     PORTC = convert_to_hex(month0);
0001c4 81af      	LDD  R26,Y+7
0001c5 85b8      	LDD  R27,Y+7+1
0001c6 d270      	RCALL SUBOPT_0x2
                 ; 0000 012E     delay();
                 ; 0000 012F 
                 ; 0000 0130         PORTA = 0b11111011;
0001c7 efeb      	LDI  R30,LOW(251)
0001c8 bbeb      	OUT  0x1B,R30
                 ; 0000 0131         PORTB = 0b11111111;
0001c9 efef      	LDI  R30,LOW(255)
0001ca bbe8      	OUT  0x18,R30
                 ; 0000 0132     PORTC = convert_to_hex(year1);
0001cb 81a9      	LDD  R26,Y+1
0001cc 81ba      	LDD  R27,Y+1+1
0001cd d269      	RCALL SUBOPT_0x2
                 ; 0000 0133     delay();
                 ; 0000 0134 
                 ; 0000 0135 
                 ; 0000 0136         PORTA = 0b11110111;
0001ce efe7      	LDI  R30,LOW(247)
0001cf bbeb      	OUT  0x1B,R30
                 ; 0000 0137         PORTB = 0b11111111;
0001d0 efef      	LDI  R30,LOW(255)
0001d1 bbe8      	OUT  0x18,R30
                 ; 0000 0138     PORTC = convert_to_hex(year0);
0001d2 81ab      	LDD  R26,Y+3
0001d3 81bc      	LDD  R27,Y+3+1
0001d4 d262      	RCALL SUBOPT_0x2
                 ; 0000 0139     delay();
                 ; 0000 013A 
                 ; 0000 013B       key_res = keypad_scan();
0001d5 de9d      	RCALL _keypad_scan
0001d6 83e8      	ST   Y,R30
                 ; 0000 013C       if(key_res != 255)
0001d7 81a8      	LD   R26,Y
0001d8 3faf      	CPI  R26,LOW(0xFF)
0001d9 f409      	BRNE PC+2
0001da c24e      	RJMP _0x59
                 ; 0000 013D       {
                 ; 0000 013E       while(keypad_scan() != 255);
                 _0x5A:
0001db de97      	RCALL _keypad_scan
0001dc 3fef      	CPI  R30,LOW(0xFF)
0001dd f7e9      	BRNE _0x5A
                 ; 0000 013F       delay();
0001de de8a      	RCALL _delay
                 ; 0000 0140       delay();
0001df de89      	RCALL _delay
                 ; 0000 0141       delay();
0001e0 de88      	RCALL _delay
                 ; 0000 0142       delay();
0001e1 de87      	RCALL _delay
                 ; 0000 0143       if (key_res == KEYPAD_NUM1)
0001e2 81a8      	LD   R26,Y
0001e3 30a1      	CPI  R26,LOW(0x1)
0001e4 f431      	BRNE _0x5D
                 ; 0000 0144       {
                 ; 0000 0145         left_menu++;
0001e5 94d3      	INC  R13
                 ; 0000 0146         if (left_menu == 2)
0001e6 e0e2      	LDI  R30,LOW(2)
0001e7 15ed      	CP   R30,R13
0001e8 f409      	BRNE _0x5E
                 ; 0000 0147         {
                 ; 0000 0148             left_menu = 0;
0001e9 24dd      	CLR  R13
                 ; 0000 0149         }
                 ; 0000 014A       }
                 _0x5E:
                 ; 0000 014B       else if (key_res == KEYPAD_NUM2)
0001ea c23e      	RJMP _0x5F
                 _0x5D:
0001eb 81a8      	LD   R26,Y
0001ec 30a2      	CPI  R26,LOW(0x2)
0001ed f009      	BREQ PC+2
0001ee c0fb      	RJMP _0x60
                 ; 0000 014C       {
                 ; 0000 014D          if (left_menu == 1)
0001ef e0e1      	LDI  R30,LOW(1)
0001f0 15ed      	CP   R30,R13
0001f1 f009      	BREQ PC+2
0001f2 c0f6      	RJMP _0x61
                 ; 0000 014E          {
                 ; 0000 014F             if (control_menu == 1)
0001f3 15ea      	CP   R30,R10
0001f4 f509      	BRNE _0x62
                 ; 0000 0150             {
                 ; 0000 0151             if (hour1 == 0 && hour0 > 4)
0001f5 89a9      	LDD  R26,Y+17
0001f6 89ba      	LDD  R27,Y+17+1
0001f7 9710      	SBIW R26,0
0001f8 f421      	BRNE _0x64
                +
0001f9 3045     +CPI R20 , LOW ( 5 )
0001fa e0e0     +LDI R30 , HIGH ( 5 )
0001fb 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
0001fc f40c      	BRGE _0x65
                 _0x64:
0001fd c002      	RJMP _0x63
                 _0x65:
                 ; 0000 0152             {
                 ; 0000 0153             hour = 0;
0001fe 2477      	CLR  R7
                 ; 0000 0154             }
                 ; 0000 0155             else if (hour1 == 1 | hour0 == 2)
0001ff c015      	RJMP _0x66
                 _0x63:
000200 89a9      	LDD  R26,Y+17
000201 89ba      	LDD  R27,Y+17+1
000202 e0e1      	LDI  R30,LOW(1)
000203 e0f0      	LDI  R31,HIGH(1)
000204 940e 0452 	CALL __EQW12
000206 2e0e      	MOV  R0,R30
000207 01da      	MOVW R26,R20
000208 e0e2      	LDI  R30,LOW(2)
000209 e0f0      	LDI  R31,HIGH(2)
00020a 940e 0452 	CALL __EQW12
00020c 29e0      	OR   R30,R0
00020d f021      	BREQ _0x67
                 ; 0000 0156             {
                 ; 0000 0157             hour = ((hour1 - 1) * 10) + hour0;
00020e 89e9      	LDD  R30,Y+17
00020f d22a      	RCALL SUBOPT_0x3
000210 0fe4      	ADD  R30,R20
000211 c002      	RJMP _0x103
                 ; 0000 0158             }
                 ; 0000 0159             else {
                 _0x67:
                 ; 0000 015A              hour = 20 + hour0;
000212 2fe4      	MOV  R30,R20
000213 5eec      	SUBI R30,-LOW(20)
                 _0x103:
000214 2e7e      	MOV  R7,R30
                 ; 0000 015B               }
                 _0x66:
                 ; 0000 015C             }
                 ; 0000 015D 
                 ; 0000 015E 
                 ; 0000 015F             else if (control_menu == 2)
000215 c0d3      	RJMP _0x69
                 _0x62:
000216 e0e2      	LDI  R30,LOW(2)
000217 15ea      	CP   R30,R10
000218 f4d9      	BRNE _0x6A
                 ; 0000 0160             {
                 ; 0000 0161             if ( hour1 == 0 && hour0 == 0)
000219 89a9      	LDD  R26,Y+17
00021a 89ba      	LDD  R27,Y+17+1
00021b 9710      	SBIW R26,0
00021c f421      	BRNE _0x6C
00021d 2400      	CLR  R0
00021e 1604      	CP   R0,R20
00021f 0605      	CPC  R0,R21
000220 f009      	BREQ _0x6D
                 _0x6C:
000221 c004      	RJMP _0x6B
                 _0x6D:
                 ; 0000 0162              {
                 ; 0000 0163              hour = (hour1 * 10) + 9;
000222 89e9      	LDD  R30,Y+17
000223 d21b      	RCALL SUBOPT_0x4
000224 2e7e      	MOV  R7,R30
                 ; 0000 0164              }
                 ; 0000 0165             else if ( hour1 == 2 && hour0 == 0 )
000225 c00d      	RJMP _0x6E
                 _0x6B:
000226 89a9      	LDD  R26,Y+17
000227 89ba      	LDD  R27,Y+17+1
000228 9712      	SBIW R26,2
000229 f421      	BRNE _0x70
00022a 2400      	CLR  R0
00022b 1604      	CP   R0,R20
00022c 0605      	CPC  R0,R21
00022d f009      	BREQ _0x71
                 _0x70:
00022e c003      	RJMP _0x6F
                 _0x71:
                 ; 0000 0166             {
                 ; 0000 0167             hour = 23;
00022f e1e7      	LDI  R30,LOW(23)
000230 2e7e      	MOV  R7,R30
                 ; 0000 0168             }
                 ; 0000 0169             else
000231 c001      	RJMP _0x72
                 _0x6F:
                 ; 0000 016A             {
                 ; 0000 016B             hour = hour - 1;
000232 947a      	DEC  R7
                 ; 0000 016C             }
                 _0x72:
                 _0x6E:
                 ; 0000 016D             }
                 ; 0000 016E 
                 ; 0000 016F 
                 ; 0000 0170             else if (control_menu == 3)
000233 c0b5      	RJMP _0x73
                 _0x6A:
000234 e0e3      	LDI  R30,LOW(3)
000235 15ea      	CP   R30,R10
000236 f481      	BRNE _0x74
                 ; 0000 0171             {
                 ; 0000 0172             if ( minute1 == 0)
000237 2e02      	MOV  R0,R18
000238 2a03      	OR   R0,R19
000239 f421      	BRNE _0x75
                 ; 0000 0173             {
                 ; 0000 0174              minute = 50 + minute0;
00023a 2fe0      	MOV  R30,R16
00023b 5cee      	SUBI R30,-LOW(50)
00023c 2e4e      	MOV  R4,R30
                 ; 0000 0175              }
                 ; 0000 0176             else if (1 <= minute1 <= 5)
00023d c008      	RJMP _0x76
                 _0x75:
00023e 01f9      	MOVW R30,R18
00023f d204      	RCALL SUBOPT_0x5
000240 30e6      	CPI  R30,LOW(0x6)
000241 f420      	BRSH _0x77
                 ; 0000 0177             {
                 ; 0000 0178              minute = ((minute1 - 1) * 10) + minute0;
000242 2fe2      	MOV  R30,R18
000243 d1f6      	RCALL SUBOPT_0x3
000244 0fe0      	ADD  R30,R16
000245 2e4e      	MOV  R4,R30
                 ; 0000 0179             }
                 ; 0000 017A             else {}
                 _0x77:
                 _0x76:
                 ; 0000 017B             }
                 ; 0000 017C 
                 ; 0000 017D 
                 ; 0000 017E 
                 ; 0000 017F             else if (control_menu == 4)
000246 c0a2      	RJMP _0x79
                 _0x74:
000247 e0e4      	LDI  R30,LOW(4)
000248 15ea      	CP   R30,R10
000249 f459      	BRNE _0x7A
                 ; 0000 0180             {
                 ; 0000 0181             if ( minute0 == 0)
00024a 2e00      	MOV  R0,R16
00024b 2a01      	OR   R0,R17
00024c f431      	BRNE _0x7B
                 ; 0000 0182             {
                 ; 0000 0183              minute = ((minute1) * 10) + 9;
00024d e0aa      	LDI  R26,LOW(10)
00024e 022a      	MULS R18,R26
00024f 01f0      	MOVW R30,R0
000250 5fe7      	SUBI R30,-LOW(9)
000251 2e4e      	MOV  R4,R30
                 ; 0000 0184             }
                 ; 0000 0185             else
000252 c001      	RJMP _0x7C
                 _0x7B:
                 ; 0000 0186             {
                 ; 0000 0187             minute = minute - 1;
000253 944a      	DEC  R4
                 ; 0000 0188             }
                 _0x7C:
                 ; 0000 0189             }
                 ; 0000 018A 
                 ; 0000 018B 
                 ; 0000 018C             else if (control_menu == 5)
000254 c094      	RJMP _0x7D
                 _0x7A:
000255 e0e5      	LDI  R30,LOW(5)
000256 15ea      	CP   R30,R10
000257 f491      	BRNE _0x7E
                 ; 0000 018D             {
                 ; 0000 018E             if ( day1 == 0)
000258 85e9      	LDD  R30,Y+9
000259 85fa      	LDD  R31,Y+9+1
00025a 9730      	SBIW R30,0
00025b f419      	BRNE _0x7F
                 ; 0000 018F             {
                 ; 0000 0190              day = 30;
00025c e1ee      	LDI  R30,LOW(30)
00025d 2e9e      	MOV  R9,R30
                 ; 0000 0191              }
                 ; 0000 0192             else if ( 1 <= day0 <= 3 )
00025e c00a      	RJMP _0x80
                 _0x7F:
00025f 85eb      	LDD  R30,Y+11
000260 85fc      	LDD  R31,Y+11+1
000261 d1e2      	RCALL SUBOPT_0x5
000262 30e4      	CPI  R30,LOW(0x4)
000263 f428      	BRSH _0x81
                 ; 0000 0193             {
                 ; 0000 0194              day = ((day1 - 1) * 10) + day0;
000264 85e9      	LDD  R30,Y+9
000265 d1d4      	RCALL SUBOPT_0x3
000266 85ab      	LDD  R26,Y+11
000267 0fea      	ADD  R30,R26
000268 2e9e      	MOV  R9,R30
                 ; 0000 0195             }
                 ; 0000 0196             else {
                 _0x81:
                 ; 0000 0197             }
                 _0x80:
                 ; 0000 0198             }
                 ; 0000 0199 
                 ; 0000 019A 
                 ; 0000 019B             else if (control_menu == 6)
000269 c07f      	RJMP _0x83
                 _0x7E:
00026a e0e6      	LDI  R30,LOW(6)
00026b 15ea      	CP   R30,R10
00026c f4b1      	BRNE _0x84
                 ; 0000 019C             {
                 ; 0000 019D             if ( day0 == 0)
00026d 85eb      	LDD  R30,Y+11
00026e 85fc      	LDD  R31,Y+11+1
00026f 9730      	SBIW R30,0
000270 f421      	BRNE _0x85
                 ; 0000 019E             {
                 ; 0000 019F              day = (day1 * 10) + 9;
000271 85e9      	LDD  R30,Y+9
000272 d1cc      	RCALL SUBOPT_0x4
000273 2e9e      	MOV  R9,R30
                 ; 0000 01A0             }
                 ; 0000 01A1             else if ( day1 == 0 && day0 == 1)
000274 c00d      	RJMP _0x86
                 _0x85:
000275 85a9      	LDD  R26,Y+9
000276 85ba      	LDD  R27,Y+9+1
000277 9710      	SBIW R26,0
000278 f421      	BRNE _0x88
000279 85ab      	LDD  R26,Y+11
00027a 85bc      	LDD  R27,Y+11+1
00027b 9711      	SBIW R26,1
00027c f009      	BREQ _0x89
                 _0x88:
00027d c003      	RJMP _0x87
                 _0x89:
                 ; 0000 01A2             {
                 ; 0000 01A3              day = 9;
00027e e0e9      	LDI  R30,LOW(9)
00027f 2e9e      	MOV  R9,R30
                 ; 0000 01A4             }
                 ; 0000 01A5             else
000280 c001      	RJMP _0x8A
                 _0x87:
                 ; 0000 01A6             {
                 ; 0000 01A7              day = day - 1;
000281 949a      	DEC  R9
                 ; 0000 01A8              }
                 _0x8A:
                 _0x86:
                 ; 0000 01A9             }
                 ; 0000 01AA 
                 ; 0000 01AB 
                 ; 0000 01AC 
                 ; 0000 01AD             else if (control_menu == 7)
000282 c066      	RJMP _0x8B
                 _0x84:
000283 e0e7      	LDI  R30,LOW(7)
000284 15ea      	CP   R30,R10
000285 f529      	BRNE _0x8C
                 ; 0000 01AE             {
                 ; 0000 01AF             if ( month0 > 2)
000286 81af      	LDD  R26,Y+7
000287 85b8      	LDD  R27,Y+7+1
000288 9713      	SBIW R26,3
000289 f01c      	BRLT _0x8D
                 ; 0000 01B0             {
                 ; 0000 01B1              month = 12;
00028a e0ec      	LDI  R30,LOW(12)
00028b 2e8e      	MOV  R8,R30
                 ; 0000 01B2              }
                 ; 0000 01B3             else if ( month1 == 1 && 1 <= month0 <= 2)
00028c c01d      	RJMP _0x8E
                 _0x8D:
00028d 81ad      	LDD  R26,Y+5
00028e 81be      	LDD  R27,Y+5+1
00028f 9711      	SBIW R26,1
000290 f429      	BRNE _0x90
000291 81ef      	LDD  R30,Y+7
000292 85f8      	LDD  R31,Y+7+1
000293 d1b0      	RCALL SUBOPT_0x5
000294 30e3      	CPI  R30,LOW(0x3)
000295 f008      	BRLO _0x91
                 _0x90:
000296 c006      	RJMP _0x8F
                 _0x91:
                 ; 0000 01B4             {
                 ; 0000 01B5              month = (((month1) - 1) * 10) + month0;
000297 81ed      	LDD  R30,Y+5
000298 d1a1      	RCALL SUBOPT_0x3
000299 81af      	LDD  R26,Y+7
00029a 0fea      	ADD  R30,R26
00029b 2e8e      	MOV  R8,R30
                 ; 0000 01B6             }
                 ; 0000 01B7             else if ( month1 == 0 && 1 <= month0 <= 2)
00029c c00d      	RJMP _0x92
                 _0x8F:
00029d 81ad      	LDD  R26,Y+5
00029e 81be      	LDD  R27,Y+5+1
00029f 9710      	SBIW R26,0
0002a0 f429      	BRNE _0x94
0002a1 81ef      	LDD  R30,Y+7
0002a2 85f8      	LDD  R31,Y+7+1
0002a3 d1a0      	RCALL SUBOPT_0x5
0002a4 30e3      	CPI  R30,LOW(0x3)
0002a5 f008      	BRLO _0x95
                 _0x94:
0002a6 c003      	RJMP _0x93
                 _0x95:
                 ; 0000 01B8             {
                 ; 0000 01B9              month =  10 + month0;
0002a7 81ef      	LDD  R30,Y+7
0002a8 5fe6      	SUBI R30,-LOW(10)
0002a9 2e8e      	MOV  R8,R30
                 ; 0000 01BA             }
                 ; 0000 01BB             else {}
                 _0x93:
                 _0x92:
                 _0x8E:
                 ; 0000 01BC             }
                 ; 0000 01BD 
                 ; 0000 01BE 
                 ; 0000 01BF 
                 ; 0000 01C0             else if (control_menu == 8)
0002aa c03e      	RJMP _0x97
                 _0x8C:
0002ab e0e8      	LDI  R30,LOW(8)
0002ac 15ea      	CP   R30,R10
0002ad f4c9      	BRNE _0x98
                 ; 0000 01C1             {
                 ; 0000 01C2             if ( month0 == 0)
0002ae 81ef      	LDD  R30,Y+7
0002af 85f8      	LDD  R31,Y+7+1
0002b0 9730      	SBIW R30,0
0002b1 f439      	BRNE _0x99
                 ; 0000 01C3             {
                 ; 0000 01C4              month = (month1 * 10) + 2;
0002b2 81ed      	LDD  R30,Y+5
0002b3 e0aa      	LDI  R26,LOW(10)
0002b4 02ea      	MULS R30,R26
0002b5 01f0      	MOVW R30,R0
0002b6 5fee      	SUBI R30,-LOW(2)
0002b7 2e8e      	MOV  R8,R30
                 ; 0000 01C5             }
                 ; 0000 01C6             else if ( month1 == 0 && month0 == 1)
0002b8 c00d      	RJMP _0x9A
                 _0x99:
0002b9 81ad      	LDD  R26,Y+5
0002ba 81be      	LDD  R27,Y+5+1
0002bb 9710      	SBIW R26,0
0002bc f421      	BRNE _0x9C
0002bd 81af      	LDD  R26,Y+7
0002be 85b8      	LDD  R27,Y+7+1
0002bf 9711      	SBIW R26,1
0002c0 f009      	BREQ _0x9D
                 _0x9C:
0002c1 c003      	RJMP _0x9B
                 _0x9D:
                 ; 0000 01C7             {
                 ; 0000 01C8             month = 9;
0002c2 e0e9      	LDI  R30,LOW(9)
0002c3 2e8e      	MOV  R8,R30
                 ; 0000 01C9             }
                 ; 0000 01CA             else
0002c4 c001      	RJMP _0x9E
                 _0x9B:
                 ; 0000 01CB             {
                 ; 0000 01CC              month = month - 1;
0002c5 948a      	DEC  R8
                 ; 0000 01CD             }
                 _0x9E:
                 _0x9A:
                 ; 0000 01CE             }
                 ; 0000 01CF 
                 ; 0000 01D0 
                 ; 0000 01D1             else if (control_menu == 9)
0002c6 c022      	RJMP _0x9F
                 _0x98:
0002c7 e0e9      	LDI  R30,LOW(9)
0002c8 15ea      	CP   R30,R10
0002c9 f499      	BRNE _0xA0
                 ; 0000 01D2             {
                 ; 0000 01D3             if ( 1 <= year1 <=9)
0002ca 81e9      	LDD  R30,Y+1
0002cb 81fa      	LDD  R31,Y+1+1
0002cc d177      	RCALL SUBOPT_0x5
0002cd 30ea      	CPI  R30,LOW(0xA)
0002ce f430      	BRSH _0xA1
                 ; 0000 01D4             {
                 ; 0000 01D5              year = ((year1 - 1) * 10) + year0;
0002cf 81e9      	LDD  R30,Y+1
0002d0 d169      	RCALL SUBOPT_0x3
0002d1 81ab      	LDD  R26,Y+3
0002d2 0fea      	ADD  R30,R26
0002d3 2ebe      	MOV  R11,R30
                 ; 0000 01D6             }
                 ; 0000 01D7             else if ( year1 == 0)
0002d4 c007      	RJMP _0xA2
                 _0xA1:
0002d5 81e9      	LDD  R30,Y+1
0002d6 81fa      	LDD  R31,Y+1+1
0002d7 9730      	SBIW R30,0
0002d8 f419      	BRNE _0xA3
                 ; 0000 01D8             {
                 ; 0000 01D9              year = 90 + year0;
0002d9 81eb      	LDD  R30,Y+3
0002da 5ae6      	SUBI R30,-LOW(90)
0002db 2ebe      	MOV  R11,R30
                 ; 0000 01DA             }
                 ; 0000 01DB             else {}
                 _0xA3:
                 _0xA2:
                 ; 0000 01DC             }
                 ; 0000 01DD 
                 ; 0000 01DE 
                 ; 0000 01DF 
                 ; 0000 01E0             else if (control_menu == 10)
0002dc c00c      	RJMP _0xA5
                 _0xA0:
0002dd e0ea      	LDI  R30,LOW(10)
0002de 15ea      	CP   R30,R10
0002df f449      	BRNE _0xA6
                 ; 0000 01E1             {
                 ; 0000 01E2             if ( year0 == 0 )
0002e0 81eb      	LDD  R30,Y+3
0002e1 81fc      	LDD  R31,Y+3+1
0002e2 9730      	SBIW R30,0
0002e3 f421      	BRNE _0xA7
                 ; 0000 01E3             {
                 ; 0000 01E4              year = (year1 * 10) + 9;
0002e4 81e9      	LDD  R30,Y+1
0002e5 d159      	RCALL SUBOPT_0x4
0002e6 2ebe      	MOV  R11,R30
                 ; 0000 01E5             }
                 ; 0000 01E6             else
0002e7 c001      	RJMP _0xA8
                 _0xA7:
                 ; 0000 01E7             {
                 ; 0000 01E8             year = year - 1;
0002e8 94ba      	DEC  R11
                 ; 0000 01E9             }
                 _0xA8:
                 ; 0000 01EA             }
                 ; 0000 01EB 
                 ; 0000 01EC         }
                 _0xA6:
                 _0xA5:
                 _0x9F:
                 _0x97:
                 _0x8B:
                 _0x83:
                 _0x7D:
                 _0x79:
                 _0x73:
                 _0x69:
                 ; 0000 01ED         else {}
                 _0x61:
                 ; 0000 01EE       }
                 ; 0000 01EF       else if (key_res == KEYPAD_NUM3)
0002e9 c13f      	RJMP _0xAA
                 _0x60:
0002ea 81a8      	LD   R26,Y
0002eb 30a3      	CPI  R26,LOW(0x3)
0002ec f009      	BREQ PC+2
0002ed c130      	RJMP _0xAB
                 ; 0000 01F0       {
                 ; 0000 01F1          if (left_menu == 1)
0002ee e0e1      	LDI  R30,LOW(1)
0002ef 15ed      	CP   R30,R13
0002f0 f009      	BREQ PC+2
0002f1 c12b      	RJMP _0xAC
                 ; 0000 01F2          {
                 ; 0000 01F3             if (control_menu == 1)
0002f2 15ea      	CP   R30,R10
0002f3 f4e1      	BRNE _0xAD
                 ; 0000 01F4             {
                 ; 0000 01F5             if (hour / 10 == 1 && hour % 10 > 4) hour = 23;
0002f4 2da7      	MOV  R26,R7
0002f5 d13b      	RCALL SUBOPT_0x1
0002f6 9731      	SBIW R30,1
0002f7 f421      	BRNE _0xAF
0002f8 2da7      	MOV  R26,R7
0002f9 d131      	RCALL SUBOPT_0x0
0002fa 9735      	SBIW R30,5
0002fb f40c      	BRGE _0xB0
                 _0xAF:
0002fc c002      	RJMP _0xAE
                 _0xB0:
0002fd e1e7      	LDI  R30,LOW(23)
0002fe c00f      	RJMP _0x104
                 ; 0000 01F6             else if ( hour / 10 == 2) hour = hour % 10;
                 _0xAE:
0002ff 2da7      	MOV  R26,R7
000300 d130      	RCALL SUBOPT_0x1
000301 30e2      	CPI  R30,LOW(0x2)
000302 e0a0      	LDI  R26,HIGH(0x2)
000303 07fa      	CPC  R31,R26
000304 f419      	BRNE _0xB2
000305 2da7      	MOV  R26,R7
000306 d124      	RCALL SUBOPT_0x0
000307 c006      	RJMP _0x104
                 ; 0000 01F7             else { hour = ((hour / 10) + 1) * 10 + hour % 10; }
                 _0xB2:
000308 2da7      	MOV  R26,R7
000309 d127      	RCALL SUBOPT_0x1
00030a d13e      	RCALL SUBOPT_0x6
00030b 2da7      	MOV  R26,R7
00030c d11e      	RCALL SUBOPT_0x0
00030d 0fe6      	ADD  R30,R22
                 _0x104:
00030e 2e7e      	MOV  R7,R30
                 ; 0000 01F8             }
                 ; 0000 01F9             else if (control_menu == 2)
00030f c10d      	RJMP _0xB4
                 _0xAD:
000310 e0e2      	LDI  R30,LOW(2)
000311 15ea      	CP   R30,R10
000312 f529      	BRNE _0xB5
                 ; 0000 01FA             {
                 ; 0000 01FB             if ( hour / 10 == 2 && hour % 10 == 3) hour = 20;
000313 2da7      	MOV  R26,R7
000314 d11c      	RCALL SUBOPT_0x1
000315 9732      	SBIW R30,2
000316 f431      	BRNE _0xB7
000317 2da7      	MOV  R26,R7
000318 d112      	RCALL SUBOPT_0x0
000319 30e3      	CPI  R30,LOW(0x3)
00031a e0a0      	LDI  R26,HIGH(0x3)
00031b 07fa      	CPC  R31,R26
00031c f009      	BREQ _0xB8
                 _0xB7:
00031d c003      	RJMP _0xB6
                 _0xB8:
00031e e1e4      	LDI  R30,LOW(20)
00031f 2e7e      	MOV  R7,R30
                 ; 0000 01FC             else if ( (hour / 10 == 0 || hour / 10 == 1 ) && hour % 10 == 9 ) hour = ((hour / 10) * 10);
000320 c016      	RJMP _0xB9
                 _0xB6:
000321 2da7      	MOV  R26,R7
000322 d10e      	RCALL SUBOPT_0x1
000323 9730      	SBIW R30,0
000324 f021      	BREQ _0xBB
000325 30e1      	CPI  R30,LOW(0x1)
000326 e0a0      	LDI  R26,HIGH(0x1)
000327 07fa      	CPC  R31,R26
000328 f431      	BRNE _0xBD
                 _0xBB:
000329 2da7      	MOV  R26,R7
00032a d100      	RCALL SUBOPT_0x0
00032b 30e9      	CPI  R30,LOW(0x9)
00032c e0a0      	LDI  R26,HIGH(0x9)
00032d 07fa      	CPC  R31,R26
00032e f009      	BREQ _0xBE
                 _0xBD:
00032f c006      	RJMP _0xBA
                 _0xBE:
000330 2da7      	MOV  R26,R7
000331 d0ff      	RCALL SUBOPT_0x1
000332 e0aa      	LDI  R26,LOW(10)
000333 02ea      	MULS R30,R26
000334 2c70      	MOV  R7,R0
                 ; 0000 01FD             else hour = hour + 1;
000335 c001      	RJMP _0xBF
                 _0xBA:
000336 9473      	INC  R7
                 ; 0000 01FE             }
                 _0xBF:
                 _0xB9:
                 ; 0000 01FF             else if (control_menu == 3)
000337 c0e5      	RJMP _0xC0
                 _0xB5:
000338 e0e3      	LDI  R30,LOW(3)
000339 15ea      	CP   R30,R10
00033a f4d1      	BRNE _0xC1
                 ; 0000 0200             {
                 ; 0000 0201             if ( minute / 10 == 5) minute =  minute % 10;
00033b 2da4      	MOV  R26,R4
00033c d0f4      	RCALL SUBOPT_0x1
00033d 30e5      	CPI  R30,LOW(0x5)
00033e e0a0      	LDI  R26,HIGH(0x5)
00033f 07fa      	CPC  R31,R26
000340 f421      	BRNE _0xC2
000341 2da4      	MOV  R26,R4
000342 d0e8      	RCALL SUBOPT_0x0
000343 2e4e      	MOV  R4,R30
                 ; 0000 0202             else if (0 <= minute / 10 <= 4 ) minute = (((minute / 10) + 1) * 10) + minute % 10;
000344 c00f      	RJMP _0xC3
                 _0xC2:
000345 2da4      	MOV  R26,R4
000346 d0ea      	RCALL SUBOPT_0x1
000347 e0a0      	LDI  R26,LOW(0)
000348 e0b0      	LDI  R27,HIGH(0)
000349 940e 0458 	CALL __LEW12
00034b 30e5      	CPI  R30,LOW(0x5)
00034c f438      	BRSH _0xC4
00034d 2da4      	MOV  R26,R4
00034e d0e2      	RCALL SUBOPT_0x1
00034f d0f9      	RCALL SUBOPT_0x6
000350 2da4      	MOV  R26,R4
000351 d0d9      	RCALL SUBOPT_0x0
000352 0fe6      	ADD  R30,R22
000353 2e4e      	MOV  R4,R30
                 ; 0000 0203             else {}
                 _0xC4:
                 _0xC3:
                 ; 0000 0204             }
                 ; 0000 0205             else if (control_menu == 4)
000354 c0c8      	RJMP _0xC6
                 _0xC1:
000355 e0e4      	LDI  R30,LOW(4)
000356 15ea      	CP   R30,R10
000357 f471      	BRNE _0xC7
                 ; 0000 0206             {
                 ; 0000 0207             if ( minute % 10 == 9) minute = ((minute / 10) * 10);
000358 2da4      	MOV  R26,R4
000359 d0d1      	RCALL SUBOPT_0x0
00035a 30e9      	CPI  R30,LOW(0x9)
00035b e0a0      	LDI  R26,HIGH(0x9)
00035c 07fa      	CPC  R31,R26
00035d f431      	BRNE _0xC8
00035e 2da4      	MOV  R26,R4
00035f d0d1      	RCALL SUBOPT_0x1
000360 e0aa      	LDI  R26,LOW(10)
000361 02ea      	MULS R30,R26
000362 2c40      	MOV  R4,R0
                 ; 0000 0208             else minute = minute + 1;
000363 c001      	RJMP _0xC9
                 _0xC8:
000364 9443      	INC  R4
                 ; 0000 0209             }
                 _0xC9:
                 ; 0000 020A             else if (control_menu == 5)
000365 c0b7      	RJMP _0xCA
                 _0xC7:
000366 e0e5      	LDI  R30,LOW(5)
000367 15ea      	CP   R30,R10
000368 f4e1      	BRNE _0xCB
                 ; 0000 020B             {
                 ; 0000 020C             if ( day / 10 == 3 ) day = 1;
000369 2da9      	MOV  R26,R9
00036a d0c6      	RCALL SUBOPT_0x1
00036b 30e3      	CPI  R30,LOW(0x3)
00036c e0a0      	LDI  R26,HIGH(0x3)
00036d 07fa      	CPC  R31,R26
00036e f411      	BRNE _0xCC
00036f e0e1      	LDI  R30,LOW(1)
000370 c012      	RJMP _0x105
                 ; 0000 020D             else if ( day / 10 == 2 && day % 10 > 0 ) day = 30;
                 _0xCC:
000371 2da9      	MOV  R26,R9
000372 d0be      	RCALL SUBOPT_0x1
000373 9732      	SBIW R30,2
000374 f429      	BRNE _0xCF
000375 2da9      	MOV  R26,R9
000376 d0b4      	RCALL SUBOPT_0x0
000377 940e 0492 	CALL __CPW01
000379 f00c      	BRLT _0xD0
                 _0xCF:
00037a c002      	RJMP _0xCE
                 _0xD0:
00037b e1ee      	LDI  R30,LOW(30)
00037c c006      	RJMP _0x105
                 ; 0000 020E             else { day = (((day / 10) + 1) * 10) + day % 10; }
                 _0xCE:
00037d 2da9      	MOV  R26,R9
00037e d0b2      	RCALL SUBOPT_0x1
00037f d0c9      	RCALL SUBOPT_0x6
000380 2da9      	MOV  R26,R9
000381 d0a9      	RCALL SUBOPT_0x0
000382 0fe6      	ADD  R30,R22
                 _0x105:
000383 2e9e      	MOV  R9,R30
                 ; 0000 020F             }
                 ; 0000 0210             else if (control_menu == 6)
000384 c098      	RJMP _0xD2
                 _0xCB:
000385 e0e6      	LDI  R30,LOW(6)
000386 15ea      	CP   R30,R10
000387 f541      	BRNE _0xD3
                 ; 0000 0211             {
                 ; 0000 0212             if ( day % 10 == 9 && day / 10 == 0) day = 1;
000388 2da9      	MOV  R26,R9
000389 d0a1      	RCALL SUBOPT_0x0
00038a 9739      	SBIW R30,9
00038b f421      	BRNE _0xD5
00038c 2da9      	MOV  R26,R9
00038d d0a3      	RCALL SUBOPT_0x1
00038e 9730      	SBIW R30,0
00038f f009      	BREQ _0xD6
                 _0xD5:
000390 c003      	RJMP _0xD4
                 _0xD6:
000391 e0e1      	LDI  R30,LOW(1)
000392 2e9e      	MOV  R9,R30
                 ; 0000 0213             else if ( day / 10 == 3) day = 30;
000393 c01b      	RJMP _0xD7
                 _0xD4:
000394 2da9      	MOV  R26,R9
000395 d09b      	RCALL SUBOPT_0x1
000396 30e3      	CPI  R30,LOW(0x3)
000397 e0a0      	LDI  R26,HIGH(0x3)
000398 07fa      	CPC  R31,R26
000399 f419      	BRNE _0xD8
00039a e1ee      	LDI  R30,LOW(30)
00039b 2e9e      	MOV  R9,R30
                 ; 0000 0214             else if ( day / 10 == 1 && day % 10 == 9) day = (((day / 10) + 1) * 10) + 9;
00039c c012      	RJMP _0xD9
                 _0xD8:
00039d 2da9      	MOV  R26,R9
00039e d092      	RCALL SUBOPT_0x1
00039f 9731      	SBIW R30,1
0003a0 f431      	BRNE _0xDB
0003a1 2da9      	MOV  R26,R9
0003a2 d088      	RCALL SUBOPT_0x0
0003a3 30e9      	CPI  R30,LOW(0x9)
0003a4 e0a0      	LDI  R26,HIGH(0x9)
0003a5 07fa      	CPC  R31,R26
0003a6 f009      	BREQ _0xDC
                 _0xDB:
0003a7 c006      	RJMP _0xDA
                 _0xDC:
0003a8 2da9      	MOV  R26,R9
0003a9 d087      	RCALL SUBOPT_0x1
0003aa 5fef      	SUBI R30,-LOW(1)
0003ab d093      	RCALL SUBOPT_0x4
0003ac 2e9e      	MOV  R9,R30
                 ; 0000 0215             else day = day + 1;
0003ad c001      	RJMP _0xDD
                 _0xDA:
0003ae 9493      	INC  R9
                 ; 0000 0216             }
                 _0xDD:
                 _0xD9:
                 _0xD7:
                 ; 0000 0217             else if (control_menu == 7)
0003af c06d      	RJMP _0xDE
                 _0xD3:
0003b0 e0e7      	LDI  R30,LOW(7)
0003b1 15ea      	CP   R30,R10
0003b2 f521      	BRNE _0xDF
                 ; 0000 0218             {
                 ; 0000 0219             if ( month % 10 > 2) month = 12;
0003b3 2da8      	MOV  R26,R8
0003b4 d076      	RCALL SUBOPT_0x0
0003b5 9733      	SBIW R30,3
0003b6 f01c      	BRLT _0xE0
0003b7 e0ec      	LDI  R30,LOW(12)
0003b8 2e8e      	MOV  R8,R30
                 ; 0000 021A             else if ( month / 10 == 1 && 1 <= month % 10 <= 2) month =  month % 10;
0003b9 c01c      	RJMP _0xE1
                 _0xE0:
0003ba 2da8      	MOV  R26,R8
0003bb d075      	RCALL SUBOPT_0x1
0003bc 9731      	SBIW R30,1
0003bd f429      	BRNE _0xE3
0003be 2da8      	MOV  R26,R8
0003bf d06b      	RCALL SUBOPT_0x0
0003c0 d083      	RCALL SUBOPT_0x5
0003c1 30e3      	CPI  R30,LOW(0x3)
0003c2 f008      	BRLO _0xE4
                 _0xE3:
0003c3 c004      	RJMP _0xE2
                 _0xE4:
0003c4 2da8      	MOV  R26,R8
0003c5 d065      	RCALL SUBOPT_0x0
0003c6 2e8e      	MOV  R8,R30
                 ; 0000 021B             else if ( month / 10 == 0 && 1 <= month % 10 <= 2) month =  10 + month % 10;
0003c7 c00e      	RJMP _0xE5
                 _0xE2:
0003c8 2da8      	MOV  R26,R8
0003c9 d067      	RCALL SUBOPT_0x1
0003ca 9730      	SBIW R30,0
0003cb f429      	BRNE _0xE7
0003cc 2da8      	MOV  R26,R8
0003cd d05d      	RCALL SUBOPT_0x0
0003ce d075      	RCALL SUBOPT_0x5
0003cf 30e3      	CPI  R30,LOW(0x3)
0003d0 f008      	BRLO _0xE8
                 _0xE7:
0003d1 c004      	RJMP _0xE6
                 _0xE8:
0003d2 2da8      	MOV  R26,R8
0003d3 d057      	RCALL SUBOPT_0x0
0003d4 5fe6      	SUBI R30,-LOW(10)
0003d5 2e8e      	MOV  R8,R30
                 ; 0000 021C             else {}
                 _0xE6:
                 _0xE5:
                 _0xE1:
                 ; 0000 021D             }
                 ; 0000 021E             else if (control_menu == 8)
0003d6 c046      	RJMP _0xEA
                 _0xDF:
0003d7 e0e8      	LDI  R30,LOW(8)
0003d8 15ea      	CP   R30,R10
0003d9 f4b1      	BRNE _0xEB
                 ; 0000 021F             {
                 ; 0000 0220             if ( month == 12 ) month = 10;
0003da e0ec      	LDI  R30,LOW(12)
0003db 15e8      	CP   R30,R8
0003dc f419      	BRNE _0xEC
0003dd e0ea      	LDI  R30,LOW(10)
0003de 2e8e      	MOV  R8,R30
                 ; 0000 0221             else if ( month / 10 == 0 && month % 10 == 9) month = 1;
0003df c00f      	RJMP _0xED
                 _0xEC:
0003e0 2da8      	MOV  R26,R8
0003e1 d04f      	RCALL SUBOPT_0x1
0003e2 9730      	SBIW R30,0
0003e3 f431      	BRNE _0xEF
0003e4 2da8      	MOV  R26,R8
0003e5 d045      	RCALL SUBOPT_0x0
0003e6 30e9      	CPI  R30,LOW(0x9)
0003e7 e0a0      	LDI  R26,HIGH(0x9)
0003e8 07fa      	CPC  R31,R26
0003e9 f009      	BREQ _0xF0
                 _0xEF:
0003ea c003      	RJMP _0xEE
                 _0xF0:
0003eb e0e1      	LDI  R30,LOW(1)
0003ec 2e8e      	MOV  R8,R30
                 ; 0000 0222             else month = month + 1;
0003ed c001      	RJMP _0xF1
                 _0xEE:
0003ee 9483      	INC  R8
                 ; 0000 0223             }
                 _0xF1:
                 _0xED:
                 ; 0000 0224             else if (control_menu == 9)
0003ef c02d      	RJMP _0xF2
                 _0xEB:
0003f0 e0e9      	LDI  R30,LOW(9)
0003f1 15ea      	CP   R30,R10
0003f2 f4d1      	BRNE _0xF3
                 ; 0000 0225             {
                 ; 0000 0226             if ( 0 <= year / 10 <= 8) year = (((year / 10) + 1) * 10) + year % 10;
0003f3 2dab      	MOV  R26,R11
0003f4 d03c      	RCALL SUBOPT_0x1
0003f5 e0a0      	LDI  R26,LOW(0)
0003f6 e0b0      	LDI  R27,HIGH(0)
0003f7 940e 0458 	CALL __LEW12
0003f9 30e9      	CPI  R30,LOW(0x9)
0003fa f440      	BRSH _0xF4
0003fb 2dab      	MOV  R26,R11
0003fc d034      	RCALL SUBOPT_0x1
0003fd d04b      	RCALL SUBOPT_0x6
0003fe 2dab      	MOV  R26,R11
0003ff d02b      	RCALL SUBOPT_0x0
000400 0fe6      	ADD  R30,R22
000401 2ebe      	MOV  R11,R30
                 ; 0000 0227             else if ( year / 10 == 9) year =  year % 10;
000402 c009      	RJMP _0xF5
                 _0xF4:
000403 2dab      	MOV  R26,R11
000404 d02c      	RCALL SUBOPT_0x1
000405 30e9      	CPI  R30,LOW(0x9)
000406 e0a0      	LDI  R26,HIGH(0x9)
000407 07fa      	CPC  R31,R26
000408 f419      	BRNE _0xF6
000409 2dab      	MOV  R26,R11
00040a d020      	RCALL SUBOPT_0x0
00040b 2ebe      	MOV  R11,R30
                 ; 0000 0228             else {}
                 _0xF6:
                 _0xF5:
                 ; 0000 0229             }
                 ; 0000 022A             else if (control_menu == 10)
00040c c010      	RJMP _0xF8
                 _0xF3:
00040d e0ea      	LDI  R30,LOW(10)
00040e 15ea      	CP   R30,R10
00040f f469      	BRNE _0xF9
                 ; 0000 022B             {
                 ; 0000 022C             if ( year % 10 == 9 ) year = ((year / 10) * 10);
000410 2dab      	MOV  R26,R11
000411 d019      	RCALL SUBOPT_0x0
000412 30e9      	CPI  R30,LOW(0x9)
000413 e0a0      	LDI  R26,HIGH(0x9)
000414 07fa      	CPC  R31,R26
000415 f431      	BRNE _0xFA
000416 2dab      	MOV  R26,R11
000417 d019      	RCALL SUBOPT_0x1
000418 e0aa      	LDI  R26,LOW(10)
000419 02ea      	MULS R30,R26
00041a 2cb0      	MOV  R11,R0
                 ; 0000 022D             else year = year + 1;
00041b c001      	RJMP _0xFB
                 _0xFA:
00041c 94b3      	INC  R11
                 ; 0000 022E             }
                 _0xFB:
                 ; 0000 022F 
                 ; 0000 0230         }
                 _0xF9:
                 _0xF8:
                 _0xF2:
                 _0xEA:
                 _0xDE:
                 _0xD2:
                 _0xCA:
                 _0xC6:
                 _0xC0:
                 _0xB4:
                 ; 0000 0231         else {}
                 _0xAC:
                 ; 0000 0232       }
                 ; 0000 0233       else if (key_res == KEYPAD_NUM4)
00041d c00b      	RJMP _0xFD
                 _0xAB:
00041e 81a8      	LD   R26,Y
00041f 30a4      	CPI  R26,LOW(0x4)
000420 f441      	BRNE _0xFE
                 ; 0000 0234       {
                 ; 0000 0235         if (left_menu == 1)
000421 e0e1      	LDI  R30,LOW(1)
000422 15ed      	CP   R30,R13
000423 f429      	BRNE _0xFF
                 ; 0000 0236         {
                 ; 0000 0237         if( control_menu == 10 ) control_menu = 0;
000424 e0ea      	LDI  R30,LOW(10)
000425 15ea      	CP   R30,R10
000426 f409      	BRNE _0x100
000427 24aa      	CLR  R10
                 ; 0000 0238         control_menu ++;
                 _0x100:
000428 94a3      	INC  R10
                 ; 0000 0239 
                 ; 0000 023A         }
                 ; 0000 023B         else
                 _0xFF:
                 ; 0000 023C         {
                 ; 0000 023D         }
                 ; 0000 023E       }
                 ; 0000 023F 
                 ; 0000 0240       }
                 _0xFE:
                 _0xFD:
                 _0xAA:
                 _0x5F:
                 ; 0000 0241       }
                 _0x59:
000429 cd3e      	RJMP _0x56
                 ; 0000 0242 }
                 _0x102:
00042a cfff      	RJMP _0x102
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:75 WORDS
                 SUBOPT_0x0:
00042b 27bb      	CLR  R27
00042c e0ea      	LDI  R30,LOW(10)
00042d e0f0      	LDI  R31,HIGH(10)
00042e 940e 0476 	CALL __MODW21
000430 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:84 WORDS
                 SUBOPT_0x1:
000431 e0b0      	LDI  R27,0
000432 e0ea      	LDI  R30,LOW(10)
000433 e0f0      	LDI  R31,HIGH(10)
000434 940e 0471 	CALL __DIVW21
000436 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x2:
000437 dc8c      	RCALL _convert_to_hex
000438 bbe5      	OUT  0x15,R30
000439 cc2f      	RJMP _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00043a 50e1      	SUBI R30,LOW(1)
00043b e0aa      	LDI  R26,LOW(10)
00043c 02ea      	MULS R30,R26
00043d 01f0      	MOVW R30,R0
00043e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00043f e0aa      	LDI  R26,LOW(10)
000440 02ea      	MULS R30,R26
000441 01f0      	MOVW R30,R0
000442 5fe7      	SUBI R30,-LOW(9)
000443 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000444 e0a1      	LDI  R26,LOW(1)
000445 e0b0      	LDI  R27,HIGH(1)
000446 940e 0458 	CALL __LEW12
000448 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000449 5fef      	SUBI R30,-LOW(1)
00044a e0aa      	LDI  R26,LOW(10)
00044b 02ea      	MULS R30,R26
00044c 2d60      	MOV  R22,R0
00044d 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00044e 95f1      	NEG  R31
00044f 95e1      	NEG  R30
000450 40f0      	SBCI R31,0
000451 9508      	RET
                 
                 __EQW12:
000452 17ea      	CP   R30,R26
000453 07fb      	CPC  R31,R27
000454 e0e1      	LDI  R30,1
000455 f009      	BREQ __EQW12T
000456 27ee      	CLR  R30
                 __EQW12T:
000457 9508      	RET
                 
                 __LEW12:
000458 17ea      	CP   R30,R26
000459 07fb      	CPC  R31,R27
00045a e0e1      	LDI  R30,1
00045b f40c      	BRGE __LEW12T
00045c 27ee      	CLR  R30
                 __LEW12T:
00045d 9508      	RET
                 
                 __DIVW21U:
00045e 2400      	CLR  R0
00045f 2411      	CLR  R1
000460 e190      	LDI  R25,16
                 __DIVW21U1:
000461 0faa      	LSL  R26
000462 1fbb      	ROL  R27
000463 1c00      	ROL  R0
000464 1c11      	ROL  R1
000465 1a0e      	SUB  R0,R30
000466 0a1f      	SBC  R1,R31
000467 f418      	BRCC __DIVW21U2
000468 0e0e      	ADD  R0,R30
000469 1e1f      	ADC  R1,R31
00046a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00046b 60a1      	SBR  R26,1
                 __DIVW21U3:
00046c 959a      	DEC  R25
00046d f799      	BRNE __DIVW21U1
00046e 01fd      	MOVW R30,R26
00046f 01d0      	MOVW R26,R0
000470 9508      	RET
                 
                 __DIVW21:
000471 d012      	RCALL __CHKSIGNW
000472 dfeb      	RCALL __DIVW21U
000473 f40e      	BRTC __DIVW211
000474 dfd9      	RCALL __ANEGW1
                 __DIVW211:
000475 9508      	RET
                 
                 __MODW21:
000476 94e8      	CLT
000477 ffb7      	SBRS R27,7
000478 c004      	RJMP __MODW211
000479 95a0      	COM  R26
00047a 95b0      	COM  R27
00047b 9611      	ADIW R26,1
00047c 9468      	SET
                 __MODW211:
00047d fdf7      	SBRC R31,7
00047e dfcf      	RCALL __ANEGW1
00047f dfde      	RCALL __DIVW21U
000480 01fd      	MOVW R30,R26
000481 f40e      	BRTC __MODW212
000482 dfcb      	RCALL __ANEGW1
                 __MODW212:
000483 9508      	RET
                 
                 __CHKSIGNW:
000484 94e8      	CLT
000485 fff7      	SBRS R31,7
000486 c002      	RJMP __CHKSW1
000487 dfc6      	RCALL __ANEGW1
000488 9468      	SET
                 __CHKSW1:
000489 ffb7      	SBRS R27,7
00048a c006      	RJMP __CHKSW2
00048b 95a0      	COM  R26
00048c 95b0      	COM  R27
00048d 9611      	ADIW R26,1
00048e f800      	BLD  R0,0
00048f 9403      	INC  R0
000490 fa00      	BST  R0,0
                 __CHKSW2:
000491 9508      	RET
                 
                 __CPW01:
000492 2400      	CLR  R0
000493 160e      	CP   R0,R30
000494 060f      	CPC  R0,R31
000495 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000496 0fac      	ADD  R26,R28
000497 1fbd      	ADC  R27,R29
                 __INITLOC0:
000498 9005      	LPM  R0,Z+
000499 920d      	ST   X+,R0
00049a 958a      	DEC  R24
00049b f7e1      	BRNE __INITLOC0
00049c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :   5 r2 :   0 r3 :   0 r4 :  20 r5 :   5 r6 :   0 r7 :  25 
r8 :  27 r9 :  26 r10:  23 r11:  20 r12:   0 r13:   6 r14:   0 r15:   0 
r16:   6 r17:  22 r18:   7 r19:   2 r20:   9 r21:   4 r22:   7 r23:   0 
r24:   9 r25:   4 r26: 183 r27:  35 r28:   4 r29:   2 r30: 363 r31:  67 
x  :   4 y  : 101 z  :   8 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :  11 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   3 brmi  :   0 brne  :  79 brpl  :   0 brsh  :   5 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   9 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  37 cpc   :  27 cpi   :  37 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :  14 jmp   :  22 ld    :   9 ldd   :  68 ldi   : 189 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   : 103 movw  :  18 
mul   :   0 muls  :   8 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   0 out   :  51 pop   :   0 push  :   0 rcall : 105 ret   :  18 
reti  :   3 rjmp  : 116 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   4 sbic  :   4 sbis  :  12 sbiw  :  32 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  10 std   :  18 sts   :   0 sub   :   1 subi  :  11 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00093a   2326     36   2362   32768   7.2%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
