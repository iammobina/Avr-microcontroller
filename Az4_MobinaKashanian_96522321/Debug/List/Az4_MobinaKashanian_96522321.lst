
AVRASM ver. 2.1.30  C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\Az4_MobinaKashanian_96522321\Debug\List\Az4_MobinaKashanian_96522321.asm Wed Jul 29 10:13:33 2020

C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\Az4_MobinaKashanian_96522321\Debug\List\Az4_MobinaKashanian_96522321.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\Az4_MobinaKashanian_96522321\Debug\List\Az4_MobinaKashanian_96522321.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\Az4_MobinaKashanian_96522321\Debug\List\Az4_MobinaKashanian_96522321.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\Az4_MobinaKashanian_96522321\Debug\List\Az4_MobinaKashanian_96522321.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _minute=R5
                 	.DEF _hour=R4
                 	.DEF _sec=R7
                 	.DEF _led_counter=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0030 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 00a6 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 3a17
00002b 0001      	.DB  0x17,0x3A,0x1,0x0
                 
                 
                 __GLOBAL_INI_TBL:
00002c 0004      	.DW  0x04
00002d 0004      	.DW  0x04
00002e 0054      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;char minute=58;
                 ;char hour=23;
                 ;char sec=0;
                 ;//int index=0;
                 ;//int i=0;
                 ;flash char display[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
                 ;unsigned char led_counter=1;
                 ;
                 ;int convert_to_hex(int n)
                 ; 0000 000E {
                 
                 	.CSEG
                 _convert_to_hex:
                 ; .FSTART _convert_to_hex
                 ; 0000 000F     switch(n){
00005d 93ba      	ST   -Y,R27
00005e 93aa      	ST   -Y,R26
                 ;	n -> Y+0
00005f 81e8      	LD   R30,Y
000060 81f9      	LDD  R31,Y+1
                 ; 0000 0010         case 0:
000061 9730      	SBIW R30,0
000062 f419      	BRNE _0x6
                 ; 0000 0011             return 0X3F;
000063 e3ef      	LDI  R30,LOW(63)
000064 e0f0      	LDI  R31,HIGH(63)
000065 c03e      	RJMP _0x2000001
                 ; 0000 0012         case 1:
                 _0x6:
000066 30e1      	CPI  R30,LOW(0x1)
000067 e0a0      	LDI  R26,HIGH(0x1)
000068 07fa      	CPC  R31,R26
000069 f419      	BRNE _0x7
                 ; 0000 0013             return 0X06;
00006a e0e6      	LDI  R30,LOW(6)
00006b e0f0      	LDI  R31,HIGH(6)
00006c c037      	RJMP _0x2000001
                 ; 0000 0014         case 2:
                 _0x7:
00006d 30e2      	CPI  R30,LOW(0x2)
00006e e0a0      	LDI  R26,HIGH(0x2)
00006f 07fa      	CPC  R31,R26
000070 f419      	BRNE _0x8
                 ; 0000 0015             return 0X5B;
000071 e5eb      	LDI  R30,LOW(91)
000072 e0f0      	LDI  R31,HIGH(91)
000073 c030      	RJMP _0x2000001
                 ; 0000 0016         case 3:
                 _0x8:
000074 30e3      	CPI  R30,LOW(0x3)
000075 e0a0      	LDI  R26,HIGH(0x3)
000076 07fa      	CPC  R31,R26
000077 f419      	BRNE _0x9
                 ; 0000 0017             return 0X4F;
000078 e4ef      	LDI  R30,LOW(79)
000079 e0f0      	LDI  R31,HIGH(79)
00007a c029      	RJMP _0x2000001
                 ; 0000 0018         case 4:
                 _0x9:
00007b 30e4      	CPI  R30,LOW(0x4)
00007c e0a0      	LDI  R26,HIGH(0x4)
00007d 07fa      	CPC  R31,R26
00007e f419      	BRNE _0xA
                 ; 0000 0019             return 0X66;
00007f e6e6      	LDI  R30,LOW(102)
000080 e0f0      	LDI  R31,HIGH(102)
000081 c022      	RJMP _0x2000001
                 ; 0000 001A         case 5:
                 _0xA:
000082 30e5      	CPI  R30,LOW(0x5)
000083 e0a0      	LDI  R26,HIGH(0x5)
000084 07fa      	CPC  R31,R26
000085 f419      	BRNE _0xB
                 ; 0000 001B             return 0X6D;
000086 e6ed      	LDI  R30,LOW(109)
000087 e0f0      	LDI  R31,HIGH(109)
000088 c01b      	RJMP _0x2000001
                 ; 0000 001C         case 6:
                 _0xB:
000089 30e6      	CPI  R30,LOW(0x6)
00008a e0a0      	LDI  R26,HIGH(0x6)
00008b 07fa      	CPC  R31,R26
00008c f419      	BRNE _0xC
                 ; 0000 001D             return 0X7D;
00008d e7ed      	LDI  R30,LOW(125)
00008e e0f0      	LDI  R31,HIGH(125)
00008f c014      	RJMP _0x2000001
                 ; 0000 001E         case 7:
                 _0xC:
000090 30e7      	CPI  R30,LOW(0x7)
000091 e0a0      	LDI  R26,HIGH(0x7)
000092 07fa      	CPC  R31,R26
000093 f419      	BRNE _0xD
                 ; 0000 001F             return 0X07;
000094 e0e7      	LDI  R30,LOW(7)
000095 e0f0      	LDI  R31,HIGH(7)
000096 c00d      	RJMP _0x2000001
                 ; 0000 0020         case 8:
                 _0xD:
000097 30e8      	CPI  R30,LOW(0x8)
000098 e0a0      	LDI  R26,HIGH(0x8)
000099 07fa      	CPC  R31,R26
00009a f419      	BRNE _0xE
                 ; 0000 0021             return 0X7F;
00009b e7ef      	LDI  R30,LOW(127)
00009c e0f0      	LDI  R31,HIGH(127)
00009d c006      	RJMP _0x2000001
                 ; 0000 0022         case 9:
                 _0xE:
00009e 30e9      	CPI  R30,LOW(0x9)
00009f e0a0      	LDI  R26,HIGH(0x9)
0000a0 07fa      	CPC  R31,R26
0000a1 f411      	BRNE _0x5
                 ; 0000 0023             return 0X6F;
0000a2 e6ef      	LDI  R30,LOW(111)
0000a3 e0f0      	LDI  R31,HIGH(111)
                 ; 0000 0024     }
                 _0x5:
                 ; 0000 0025 }
                 _0x2000001:
0000a4 9622      	ADIW R28,2
0000a5 9508      	RET
                 ; .FEND
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0028 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000a6 93ea      	ST   -Y,R30
0000a7 b7ef      	IN   R30,SREG
0000a8 93ea      	ST   -Y,R30
                 ; 0000 0029 // Place your code here
                 ; 0000 002A sec++;
0000a9 9473      	INC  R7
                 ; 0000 002B if(sec ==60)
0000aa e3ec      	LDI  R30,LOW(60)
0000ab 15e7      	CP   R30,R7
0000ac f411      	BRNE _0x10
                 ; 0000 002C {
                 ; 0000 002D minute++;
0000ad 9453      	INC  R5
                 ; 0000 002E sec=0;
0000ae 2477      	CLR  R7
                 ; 0000 002F }
                 ; 0000 0030 if(minute ==60){
                 _0x10:
0000af e3ec      	LDI  R30,LOW(60)
0000b0 15e5      	CP   R30,R5
0000b1 f411      	BRNE _0x11
                 ; 0000 0031 hour++;
0000b2 9443      	INC  R4
                 ; 0000 0032 minute=0;
0000b3 2455      	CLR  R5
                 ; 0000 0033 }
                 ; 0000 0034 if(hour==60)
                 _0x11:
0000b4 e3ec      	LDI  R30,LOW(60)
0000b5 15e4      	CP   R30,R4
0000b6 f409      	BRNE _0x12
                 ; 0000 0035 {
                 ; 0000 0036 hour=0;
0000b7 2444      	CLR  R4
                 ; 0000 0037 }
                 ; 0000 0038     led_counter = led_counter << 1;
                 _0x12:
0000b8 0c66      	LSL  R6
                 ; 0000 0039     if (led_counter == 0) led_counter = 1;
0000b9 2066      	TST  R6
0000ba f411      	BRNE _0x13
0000bb e0e1      	LDI  R30,LOW(1)
0000bc 2e6e      	MOV  R6,R30
                 ; 0000 003A 
                 ; 0000 003B }
                 _0x13:
0000bd 91e9      	LD   R30,Y+
0000be bfef      	OUT  SREG,R30
0000bf 91e9      	LD   R30,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 003E {
                 _main:
                 ; .FSTART _main
                 ; 0000 003F // Declare your local variables here
                 ; 0000 0040 int minute0=0;
                 ; 0000 0041 int hour0=0;
                 ; 0000 0042 int sec0=0;
                 ; 0000 0043 int minute1=0;
                 ; 0000 0044 int hour1=0;
                 ; 0000 0045 int sec1=0;
                 ; 0000 0046 int dot=0x80;
                 ; 0000 0047 // Input/Output Ports initialization
                 ; 0000 0048 // Port A initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000c1 9728      	SBIW R28,8
0000c2 e8e0      	LDI  R30,LOW(128)
0000c3 83e8      	ST   Y,R30
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 83e9      	STD  Y+1,R30
0000c6 83ea      	STD  Y+2,R30
0000c7 83eb      	STD  Y+3,R30
0000c8 83ec      	STD  Y+4,R30
0000c9 83ed      	STD  Y+5,R30
0000ca 83ee      	STD  Y+6,R30
0000cb 83ef      	STD  Y+7,R30
                 ;	minute0 -> R16,R17
                 ;	hour0 -> R18,R19
                 ;	sec0 -> R20,R21
                 ;	minute1 -> Y+6
                 ;	hour1 -> Y+4
                 ;	sec1 -> Y+2
                 ;	dot -> Y+0
                +
0000cc e000     +LDI R16 , LOW ( 0 )
0000cd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000ce e020     +LDI R18 , LOW ( 0 )
0000cf e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000d0 e040     +LDI R20 , LOW ( 0 )
0000d1 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000d2 bbea      	OUT  0x1A,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d3 bbeb      	OUT  0x1B,R30
                 ; 0000 004D 
                 ; 0000 004E // Port B initialization
                 ; 0000 004F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0050 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d4 bbe7      	OUT  0x17,R30
                 ; 0000 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0052 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000d5 bbe8      	OUT  0x18,R30
                 ; 0000 0053 
                 ; 0000 0054 // Port C initialization
                 ; 0000 0055 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0056 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000d6 efef      	LDI  R30,LOW(255)
0000d7 bbe4      	OUT  0x14,R30
                 ; 0000 0057 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0058 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 bbe5      	OUT  0x15,R30
                 ; 0000 0059 
                 ; 0000 005A // Port D initialization
                 ; 0000 005B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005C DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000da efef      	LDI  R30,LOW(255)
0000db bbe1      	OUT  0x11,R30
                 ; 0000 005D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000dc e0e0      	LDI  R30,LOW(0)
0000dd bbe2      	OUT  0x12,R30
                 ; 0000 005F 
                 ; 0000 0060 // Timer/Counter 1 initialization
                 ; 0000 0061 // Clock source: System Clock
                 ; 0000 0062 // Clock value: 31.250 kHz
                 ; 0000 0063 // Mode: CTC top=OCR1A
                 ; 0000 0064 // OC1A output: Disconnected
                 ; 0000 0065 // OC1B output: Disconnected
                 ; 0000 0066 // Noise Canceler: Off
                 ; 0000 0067 // Input Capture on Falling Edge
                 ; 0000 0068 // Timer Period: 1 s
                 ; 0000 0069 // Timer1 Overflow Interrupt: Off
                 ; 0000 006A // Input Capture Interrupt: Off
                 ; 0000 006B // Compare A Match Interrupt: On
                 ; 0000 006C // Compare B Match Interrupt: Off
                 ; 0000 006D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000de bdef      	OUT  0x2F,R30
                 ; 0000 006E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000df e0ec      	LDI  R30,LOW(12)
0000e0 bdee      	OUT  0x2E,R30
                 ; 0000 006F TCNT1H=0x00;
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 bded      	OUT  0x2D,R30
                 ; 0000 0070 TCNT1L=0x00;
0000e3 bdec      	OUT  0x2C,R30
                 ; 0000 0071 ICR1H=0x00;
0000e4 bde7      	OUT  0x27,R30
                 ; 0000 0072 ICR1L=0x00;
0000e5 bde6      	OUT  0x26,R30
                 ; 0000 0073 OCR1AH=0x7A;
0000e6 e7ea      	LDI  R30,LOW(122)
0000e7 bdeb      	OUT  0x2B,R30
                 ; 0000 0074 OCR1AL=0x12;
0000e8 e1e2      	LDI  R30,LOW(18)
0000e9 bdea      	OUT  0x2A,R30
                 ; 0000 0075 OCR1BH=0x00;
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bde9      	OUT  0x29,R30
                 ; 0000 0076 OCR1BL=0x00;
0000ec bde8      	OUT  0x28,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0079 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ed e1e0      	LDI  R30,LOW(16)
0000ee bfe9      	OUT  0x39,R30
                 ; 0000 007A // Global enable interrupts
                 ; 0000 007B #asm("sei")
0000ef 9478      	sei
                 ; 0000 007C 
                 ; 0000 007D while (1)
                 _0x14:
                 ; 0000 007E {
                 ; 0000 007F     PORTB =led_counter;
0000f0 ba68      	OUT  0x18,R6
                 ; 0000 0080     sec0=sec%10;
0000f1 2da7      	MOV  R26,R7
0000f2 d03f      	RCALL SUBOPT_0x0
0000f3 01af      	MOVW R20,R30
                 ; 0000 0081     sec1=sec/10;
0000f4 2da7      	MOV  R26,R7
0000f5 d042      	RCALL SUBOPT_0x1
0000f6 83ea      	STD  Y+2,R30
0000f7 83fb      	STD  Y+2+1,R31
                 ; 0000 0082     minute0=minute%10;
0000f8 2da5      	MOV  R26,R5
0000f9 d038      	RCALL SUBOPT_0x0
0000fa 018f      	MOVW R16,R30
                 ; 0000 0083     minute1=minute/10;
0000fb 2da5      	MOV  R26,R5
0000fc d03b      	RCALL SUBOPT_0x1
0000fd 83ee      	STD  Y+6,R30
0000fe 83ff      	STD  Y+6+1,R31
                 ; 0000 0084     hour0=hour %10;
0000ff 2da4      	MOV  R26,R4
000100 d031      	RCALL SUBOPT_0x0
000101 019f      	MOVW R18,R30
                 ; 0000 0085     hour1=hour /10;
000102 2da4      	MOV  R26,R4
000103 d034      	RCALL SUBOPT_0x1
000104 83ec      	STD  Y+4,R30
000105 83fd      	STD  Y+4+1,R31
                 ; 0000 0086 
                 ; 0000 0087     if(sec0 %2 ==0)
000106 01da      	MOVW R26,R20
000107 e0e2      	LDI  R30,LOW(2)
000108 e0f0      	LDI  R31,HIGH(2)
000109 940e 0172 	CALL __MODW21
00010b 9730      	SBIW R30,0
00010c f429      	BRNE _0x17
                 ; 0000 0088         dot=0x80;
00010d e8e0      	LDI  R30,LOW(128)
00010e e0f0      	LDI  R31,HIGH(128)
00010f 83e8      	ST   Y,R30
000110 83f9      	STD  Y+1,R31
                 ; 0000 0089     else
000111 c003      	RJMP _0x18
                 _0x17:
                 ; 0000 008A         dot=0;
000112 e0e0      	LDI  R30,LOW(0)
000113 83e8      	STD  Y+0,R30
000114 83e9      	STD  Y+0+1,R30
                 ; 0000 008B 
                 ; 0000 008C 
                 ; 0000 008D     PORTD = 0B11111110;
                 _0x18:
000115 efee      	LDI  R30,LOW(254)
000116 bbe2      	OUT  0x12,R30
                 ; 0000 008E     PORTC = convert_to_hex(hour1);
000117 81ac      	LDD  R26,Y+4
000118 81bd      	LDD  R27,Y+4+1
000119 d024      	RCALL SUBOPT_0x2
                 ; 0000 008F     delay_ms(5);
                 ; 0000 0090 
                 ; 0000 0091     PORTD = 0B11111101;
00011a efed      	LDI  R30,LOW(253)
00011b bbe2      	OUT  0x12,R30
                 ; 0000 0092     PORTC = convert_to_hex(hour0) | dot;
00011c 01d9      	MOVW R26,R18
00011d d026      	RCALL SUBOPT_0x3
                 ; 0000 0093     delay_ms(5);
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096     PORTD = 0B11111011;
00011e efeb      	LDI  R30,LOW(251)
00011f bbe2      	OUT  0x12,R30
                 ; 0000 0097     PORTC = convert_to_hex(minute1);
000120 81ae      	LDD  R26,Y+6
000121 81bf      	LDD  R27,Y+6+1
000122 d01b      	RCALL SUBOPT_0x2
                 ; 0000 0098     delay_ms(5);
                 ; 0000 0099 
                 ; 0000 009A 
                 ; 0000 009B     PORTD = 0B11110111;
000123 efe7      	LDI  R30,LOW(247)
000124 bbe2      	OUT  0x12,R30
                 ; 0000 009C     PORTC = convert_to_hex(minute0) | dot;
000125 01d8      	MOVW R26,R16
000126 d01d      	RCALL SUBOPT_0x3
                 ; 0000 009D     delay_ms(5);
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0     PORTD = 0B11101111;
000127 eeef      	LDI  R30,LOW(239)
000128 bbe2      	OUT  0x12,R30
                 ; 0000 00A1     PORTC = convert_to_hex(sec1);
000129 81aa      	LDD  R26,Y+2
00012a 81bb      	LDD  R27,Y+2+1
00012b d012      	RCALL SUBOPT_0x2
                 ; 0000 00A2     delay_ms(5);
                 ; 0000 00A3 
                 ; 0000 00A4 
                 ; 0000 00A5     PORTD = 0B11011111;
00012c edef      	LDI  R30,LOW(223)
00012d bbe2      	OUT  0x12,R30
                 ; 0000 00A6     PORTC = convert_to_hex(sec0) | dot;
00012e 01da      	MOVW R26,R20
00012f d014      	RCALL SUBOPT_0x3
                 ; 0000 00A7     delay_ms(5);
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA }
000130 cfbf      	RJMP _0x14
                 ; 0000 00AB }
                 _0x19:
000131 cfff      	RJMP _0x19
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000132 27bb      	CLR  R27
000133 e0ea      	LDI  R30,LOW(10)
000134 e0f0      	LDI  R31,HIGH(10)
000135 940e 0172 	CALL __MODW21
000137 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000138 e0b0      	LDI  R27,0
000139 e0ea      	LDI  R30,LOW(10)
00013a e0f0      	LDI  R31,HIGH(10)
00013b 940e 016d 	CALL __DIVW21
00013d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00013e df1e      	RCALL _convert_to_hex
00013f bbe5      	OUT  0x15,R30
000140 e0a5      	LDI  R26,LOW(5)
000141 e0b0      	LDI  R27,0
000142 940c 014c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
000144 df18      	RCALL _convert_to_hex
000145 81a8      	LD   R26,Y
000146 2bea      	OR   R30,R26
000147 bbe5      	OUT  0x15,R30
000148 e0a5      	LDI  R26,LOW(5)
000149 e0b0      	LDI  R27,0
00014a 940c 014c 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
00014c 9610      	adiw r26,0
00014d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00014e ed80     +LDI R24 , LOW ( 0x7D0 )
00014f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000150 9701     +SBIW R24 , 1
000151 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000152 95a8      	wdr
000153 9711      	sbiw r26,1
000154 f7c9      	brne __delay_ms0
                 __delay_ms1:
000155 9508      	ret
                 
                 __ANEGW1:
000156 95f1      	NEG  R31
000157 95e1      	NEG  R30
000158 40f0      	SBCI R31,0
000159 9508      	RET
                 
                 __DIVW21U:
00015a 2400      	CLR  R0
00015b 2411      	CLR  R1
00015c e190      	LDI  R25,16
                 __DIVW21U1:
00015d 0faa      	LSL  R26
00015e 1fbb      	ROL  R27
00015f 1c00      	ROL  R0
000160 1c11      	ROL  R1
000161 1a0e      	SUB  R0,R30
000162 0a1f      	SBC  R1,R31
000163 f418      	BRCC __DIVW21U2
000164 0e0e      	ADD  R0,R30
000165 1e1f      	ADC  R1,R31
000166 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000167 60a1      	SBR  R26,1
                 __DIVW21U3:
000168 959a      	DEC  R25
000169 f799      	BRNE __DIVW21U1
00016a 01fd      	MOVW R30,R26
00016b 01d0      	MOVW R26,R0
00016c 9508      	RET
                 
                 __DIVW21:
00016d d012      	RCALL __CHKSIGNW
00016e dfeb      	RCALL __DIVW21U
00016f f40e      	BRTC __DIVW211
000170 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000171 9508      	RET
                 
                 __MODW21:
000172 94e8      	CLT
000173 ffb7      	SBRS R27,7
000174 c004      	RJMP __MODW211
000175 95a0      	COM  R26
000176 95b0      	COM  R27
000177 9611      	ADIW R26,1
000178 9468      	SET
                 __MODW211:
000179 fdf7      	SBRC R31,7
00017a dfdb      	RCALL __ANEGW1
00017b dfde      	RCALL __DIVW21U
00017c 01fd      	MOVW R30,R26
00017d f40e      	BRTC __MODW212
00017e dfd7      	RCALL __ANEGW1
                 __MODW212:
00017f 9508      	RET
                 
                 __CHKSIGNW:
000180 94e8      	CLT
000181 fff7      	SBRS R31,7
000182 c002      	RJMP __CHKSW1
000183 dfd2      	RCALL __ANEGW1
000184 9468      	SET
                 __CHKSW1:
000185 ffb7      	SBRS R27,7
000186 c006      	RJMP __CHKSW2
000187 95a0      	COM  R26
000188 95b0      	COM  R27
000189 9611      	ADIW R26,1
00018a f800      	BLD  R0,0
00018b 9403      	INC  R0
00018c fa00      	BST  R0,0
                 __CHKSW2:
00018d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   4 r7 :   5 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   3 r17:   1 r18:   3 r19:   1 r20:   4 r21:   1 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  50 r27:  15 r28:   3 r29:   1 r30: 123 r31:  37 
x  :   3 y  :  33 z  :   7 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   3 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   9 cpi   :   9 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   4 jmp   :  24 ld    :   4 ldd   :   7 ldi   :  86 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   7 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   0 out   :  35 pop   :   0 push  :   0 rcall :  21 ret   :   9 
reti  :   1 rjmp  :  17 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   9 std   :  16 sts   :   0 sub   :   1 subi  :   0 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031c    784     12    796   32768   2.4%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
