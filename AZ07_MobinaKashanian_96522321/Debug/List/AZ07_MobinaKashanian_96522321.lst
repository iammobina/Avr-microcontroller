
AVRASM ver. 2.1.30  C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm Sun Jul 19 19:44:54 2020

C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp=R4
                 	.DEF _temp_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 4d4c
000034 3533
000035 5320
000036 6e65      	.DB  0x4C,0x4D,0x33,0x35,0x20,0x53,0x65,0x6E
000037 6f73
000038 0072
000039 6554
00003a 706d      	.DB  0x73,0x6F,0x72,0x0,0x54,0x65,0x6D,0x70
00003b 203a
00003c 3025
00003d 6432
00003e 4320      	.DB  0x3A,0x20,0x25,0x30,0x32,0x64,0x20,0x43
C:\Users\AVAJANG\Desktop\Az11_MobinaKashanian_96522321\AZ07_MobinaKashanian_96522321\Debug\List\AZ07_MobinaKashanian_96522321.asm(1133): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 _0x2020003:
000040 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000041 000c      	.DW  0x0C
000042 0260      	.DW  _0x9
000043 0066      	.DW  _0x0*2
                 
000044 0002      	.DW  0x02
000045 0280      	.DW  __base_y_G101
000046 0080      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 0084 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int temp;
                 ;char st[20];
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0011 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0012 ADMUX=adc_input | ADC_VREF_TYPE;
000075 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000076 81e8      	LD   R30,Y
000077 64e0      	ORI  R30,0x40
000078 b9e7      	OUT  0x7,R30
                 ; 0000 0013 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0014 delay_us(10);
                +
000079 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00007a 958a     +DEC R24
00007b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0015 // Start the AD conversion
                 ; 0000 0016 ADCSRA|=(1<<ADSC);
00007c 9a36      	SBI  0x6,6
                 ; 0000 0017 // Wait for the AD conversion to complete
                 ; 0000 0018 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00007d 9b34      	SBIS 0x6,4
00007e cffe      	RJMP _0x3
                 ; 0000 0019 ADCSRA|=(1<<ADIF);
00007f 9a34      	SBI  0x6,4
                 ; 0000 001A return ADCW;
000080 b1e4      	IN   R30,0x4
000081 b1f5      	IN   R31,0x4+1
000082 940c 030c 	JMP  _0x2080001
                 ; 0000 001B }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001E {
                 _main:
                 ; .FSTART _main
                 ; 0000 001F // Declare your local variables here
                 ; 0000 0020 
                 ; 0000 0021 // Input/Output Ports initialization
                 ; 0000 0022 // Port A initialization
                 ; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0024 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000084 e0e0      	LDI  R30,LOW(0)
000085 bbea      	OUT  0x1A,R30
                 ; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0026 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000086 bbeb      	OUT  0x1B,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port B initialization
                 ; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000087 bbe7      	OUT  0x17,R30
                 ; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000088 bbe8      	OUT  0x18,R30
                 ; 0000 002D 
                 ; 0000 002E // Port C initialization
                 ; 0000 002F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0030 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000089 bbe4      	OUT  0x14,R30
                 ; 0000 0031 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0032 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00008a bbe5      	OUT  0x15,R30
                 ; 0000 0033 
                 ; 0000 0034 // Port D initialization
                 ; 0000 0035 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0036 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00008b bbe1      	OUT  0x11,R30
                 ; 0000 0037 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0038 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008c bbe2      	OUT  0x12,R30
                 ; 0000 0039 
                 ; 0000 003A // ADC initialization
                 ; 0000 003B // ADC Clock frequency: 250.000 kHz
                 ; 0000 003C // ADC Voltage Reference: AVCC pin
                 ; 0000 003D // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 003E ADMUX=ADC_VREF_TYPE;
00008d e4e0      	LDI  R30,LOW(64)
00008e b9e7      	OUT  0x7,R30
                 ; 0000 003F ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00008f e8e5      	LDI  R30,LOW(133)
000090 b9e6      	OUT  0x6,R30
                 ; 0000 0040 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000091 e0e0      	LDI  R30,LOW(0)
000092 bfe0      	OUT  0x30,R30
                 ; 0000 0041 
                 ; 0000 0042 // Alphanumeric LCD initialization
                 ; 0000 0043 // Connections are specified in the
                 ; 0000 0044 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0045 // RS - PORTC Bit 0
                 ; 0000 0046 // RD - PORTC Bit 1
                 ; 0000 0047 // EN - PORTC Bit 2
                 ; 0000 0048 // D4 - PORTC Bit 4
                 ; 0000 0049 // D5 - PORTC Bit 5
                 ; 0000 004A // D6 - PORTC Bit 6
                 ; 0000 004B // D7 - PORTC Bit 7
                 ; 0000 004C // Characters/line: 16
                 ; 0000 004D lcd_init(16);
000093 e1a0      	LDI  R26,LOW(16)
000094 940e 02e0 	CALL _lcd_init
                 ; 0000 004E 
                 ; 0000 004F while (1)
                 _0x6:
                 ; 0000 0050       {
                 ; 0000 0051       // Place your code here
                 ; 0000 0052        lcd_clear();
000096 940e 02ae 	CALL _lcd_clear
                 ; 0000 0053        lcd_gotoxy(2,0);
000098 e0e2      	LDI  R30,LOW(2)
000099 93ea      	ST   -Y,R30
00009a e0a0      	LDI  R26,LOW(0)
00009b 940e 02a1 	CALL _lcd_gotoxy
                 ; 0000 0054        lcd_puts("LM35 Sensor");
                +
00009d e6a0     +LDI R26 , LOW ( _0x9 + ( 0 ) )
00009e e0b2     +LDI R27 , HIGH ( _0x9 + ( 0 ) )
                 	__POINTW2MN _0x9,0
00009f 940e 02cf 	CALL _lcd_puts
                 ; 0000 0055        lcd_gotoxy(2,1);
0000a1 e0e2      	LDI  R30,LOW(2)
0000a2 93ea      	ST   -Y,R30
0000a3 e0a1      	LDI  R26,LOW(1)
0000a4 940e 02a1 	CALL _lcd_gotoxy
                 ; 0000 0056        temp=read_adc(0);
0000a6 e0a0      	LDI  R26,LOW(0)
0000a7 dfcd      	RCALL _read_adc
0000a8 012f      	MOVW R4,R30
                 ; 0000 0057        temp = temp * 4.88 / 10;
0000a9 940e 04a2 	CALL __CWD1
0000ab 940e 03d1 	CALL __CDF1
                +
0000ad efa6     +LDI R26 , LOW ( 0x409C28F6 )
0000ae e2b8     +LDI R27 , HIGH ( 0x409C28F6 )
0000af e98c     +LDI R24 , BYTE3 ( 0x409C28F6 )
0000b0 e490     +LDI R25 , BYTE4 ( 0x409C28F6 )
                 	__GETD2N 0x409C28F6
0000b1 940e 03ff 	CALL __MULF12
0000b3 01df      	MOVW R26,R30
0000b4 01cb      	MOVW R24,R22
                +
0000b5 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000b6 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000b7 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000b8 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000b9 940e 044d 	CALL __DIVF21
0000bb 940e 039a 	CALL __CFD1
0000bd 012f      	MOVW R4,R30
                 ; 0000 0058        sprintf(st,"Temp: %02d C",temp);
0000be e6ec      	LDI  R30,LOW(_st)
0000bf e0f2      	LDI  R31,HIGH(_st)
0000c0 93fa      	ST   -Y,R31
0000c1 93ea      	ST   -Y,R30
                +
0000c2 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0000c3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0000c4 93fa      	ST   -Y,R31
0000c5 93ea      	ST   -Y,R30
0000c6 01f2      	MOVW R30,R4
0000c7 940e 04a2 	CALL __CWD1
0000c9 940e 04af 	CALL __PUTPARD1
0000cb e084      	LDI  R24,4
0000cc 940e 024d 	CALL _sprintf
0000ce 9628      	ADIW R28,8
                 ; 0000 0059        lcd_puts(st);
0000cf e6ac      	LDI  R26,LOW(_st)
0000d0 e0b2      	LDI  R27,HIGH(_st)
0000d1 940e 02cf 	CALL _lcd_puts
                 ; 0000 005A        delay_ms(50);
0000d3 e3a2      	LDI  R26,LOW(50)
0000d4 e0b0      	LDI  R27,0
0000d5 940e 0361 	CALL _delay_ms
                 ; 0000 005B 
                 ; 0000 005C       }
0000d7 cfbe      	RJMP _0x6
                 ; 0000 005D }
                 _0xA:
0000d8 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x9:
000260           	.BYTE 0xC
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000d9 93ba      	ST   -Y,R27
0000da 93aa      	ST   -Y,R26
0000db 931a      	ST   -Y,R17
0000dc 930a      	ST   -Y,R16
0000dd 81aa      	LDD  R26,Y+2
0000de 81bb      	LDD  R27,Y+2+1
0000df 9612      	ADIW R26,2
0000e0 940e 04a7 	CALL __GETW1P
0000e2 9730      	SBIW R30,0
0000e3 f159      	BREQ _0x2000010
0000e4 81aa      	LDD  R26,Y+2
0000e5 81bb      	LDD  R27,Y+2+1
0000e6 9614      	ADIW R26,4
0000e7 940e 04a7 	CALL __GETW1P
0000e9 018f      	MOVW R16,R30
0000ea 9730      	SBIW R30,0
0000eb f061      	BREQ _0x2000012
                +
0000ec 3002     +CPI R16 , LOW ( 2 )
0000ed e0e0     +LDI R30 , HIGH ( 2 )
0000ee 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000ef f098      	BRLO _0x2000013
0000f0 01f8      	MOVW R30,R16
0000f1 9731      	SBIW R30,1
0000f2 018f      	MOVW R16,R30
                +
0000f3 81aa     +LDD R26 , Y + 2
0000f4 81bb     +LDD R27 , Y + 2 + 1
0000f5 9614     +ADIW R26 , 4
0000f6 93ed     +ST X + , R30
0000f7 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000f8 81aa      	LDD  R26,Y+2
0000f9 81bb      	LDD  R27,Y+2+1
0000fa 9612      	ADIW R26,2
0000fb 91ed      	LD   R30,X+
0000fc 91fd      	LD   R31,X+
0000fd 9631      	ADIW R30,1
0000fe 93fe      	ST   -X,R31
0000ff 93ee      	ST   -X,R30
000100 9731      	SBIW R30,1
000101 81ac      	LDD  R26,Y+4
000102 83a0      	STD  Z+0,R26
                 _0x2000013:
000103 81aa      	LDD  R26,Y+2
000104 81bb      	LDD  R27,Y+2+1
000105 940e 04a7 	CALL __GETW1P
000107 23ff      	TST  R31
000108 f02a      	BRMI _0x2000014
000109 91ed      	LD   R30,X+
00010a 91fd      	LD   R31,X+
00010b 9631      	ADIW R30,1
00010c 93fe      	ST   -X,R31
00010d 93ee      	ST   -X,R30
                 _0x2000014:
00010e c006      	RJMP _0x2000015
                 _0x2000010:
00010f 81aa      	LDD  R26,Y+2
000110 81bb      	LDD  R27,Y+2+1
000111 efef      	LDI  R30,LOW(65535)
000112 efff      	LDI  R31,HIGH(65535)
000113 93ed      	ST   X+,R30
000114 93fc      	ST   X,R31
                 _0x2000015:
000115 8119      	LDD  R17,Y+1
000116 8108      	LDD  R16,Y+0
000117 9625      	ADIW R28,5
000118 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000119 93ba      	ST   -Y,R27
00011a 93aa      	ST   -Y,R26
00011b 9726      	SBIW R28,6
00011c 940e 04b4 	CALL __SAVELOCR6
00011e e010      	LDI  R17,0
00011f 85ac      	LDD  R26,Y+12
000120 85bd      	LDD  R27,Y+12+1
000121 e0e0      	LDI  R30,LOW(0)
000122 e0f0      	LDI  R31,HIGH(0)
000123 93ed      	ST   X+,R30
000124 93fc      	ST   X,R31
                 _0x2000016:
000125 89ea      	LDD  R30,Y+18
000126 89fb      	LDD  R31,Y+18+1
000127 9631      	ADIW R30,1
000128 8bea      	STD  Y+18,R30
000129 8bfb      	STD  Y+18+1,R31
00012a 9731      	SBIW R30,1
00012b 91e4      	LPM  R30,Z
00012c 2f2e      	MOV  R18,R30
00012d 30e0      	CPI  R30,0
00012e f409      	BRNE PC+2
00012f c115      	RJMP _0x2000018
000130 2fe1      	MOV  R30,R17
000131 30e0      	CPI  R30,0
000132 f439      	BRNE _0x200001C
000133 3225      	CPI  R18,37
000134 f411      	BRNE _0x200001D
000135 e011      	LDI  R17,LOW(1)
000136 c002      	RJMP _0x200001E
                 _0x200001D:
000137 940e 0327 	CALL SUBOPT_0x0
                 _0x200001E:
000139 c10a      	RJMP _0x200001B
                 _0x200001C:
00013a 30e1      	CPI  R30,LOW(0x1)
00013b f4a9      	BRNE _0x200001F
00013c 3225      	CPI  R18,37
00013d f419      	BRNE _0x2000020
00013e 940e 0327 	CALL SUBOPT_0x0
000140 c102      	RJMP _0x20000CC
                 _0x2000020:
000141 e012      	LDI  R17,LOW(2)
000142 e040      	LDI  R20,LOW(0)
000143 e000      	LDI  R16,LOW(0)
000144 322d      	CPI  R18,45
000145 f411      	BRNE _0x2000021
000146 e001      	LDI  R16,LOW(1)
000147 c0fc      	RJMP _0x200001B
                 _0x2000021:
000148 322b      	CPI  R18,43
000149 f411      	BRNE _0x2000022
00014a e24b      	LDI  R20,LOW(43)
00014b c0f8      	RJMP _0x200001B
                 _0x2000022:
00014c 3220      	CPI  R18,32
00014d f411      	BRNE _0x2000023
00014e e240      	LDI  R20,LOW(32)
00014f c0f4      	RJMP _0x200001B
                 _0x2000023:
000150 c002      	RJMP _0x2000024
                 _0x200001F:
000151 30e2      	CPI  R30,LOW(0x2)
000152 f439      	BRNE _0x2000025
                 _0x2000024:
000153 e050      	LDI  R21,LOW(0)
000154 e013      	LDI  R17,LOW(3)
000155 3320      	CPI  R18,48
000156 f411      	BRNE _0x2000026
000157 6800      	ORI  R16,LOW(128)
000158 c0eb      	RJMP _0x200001B
                 _0x2000026:
000159 c003      	RJMP _0x2000027
                 _0x2000025:
00015a 30e3      	CPI  R30,LOW(0x3)
00015b f009      	BREQ PC+2
00015c c0e7      	RJMP _0x200001B
                 _0x2000027:
00015d 3320      	CPI  R18,48
00015e f010      	BRLO _0x200002A
00015f 332a      	CPI  R18,58
000160 f008      	BRLO _0x200002B
                 _0x200002A:
000161 c007      	RJMP _0x2000029
                 _0x200002B:
000162 e0aa      	LDI  R26,LOW(10)
000163 9f5a      	MUL  R21,R26
000164 2d50      	MOV  R21,R0
000165 2fe2      	MOV  R30,R18
000166 53e0      	SUBI R30,LOW(48)
000167 0f5e      	ADD  R21,R30
000168 c0db      	RJMP _0x200001B
                 _0x2000029:
000169 2fe2      	MOV  R30,R18
00016a 36e3      	CPI  R30,LOW(0x63)
00016b f449      	BRNE _0x200002F
00016c 940e 032e 	CALL SUBOPT_0x1
00016e 89e8      	LDD  R30,Y+16
00016f 89f9      	LDD  R31,Y+16+1
000170 81a4      	LDD  R26,Z+4
000171 93aa      	ST   -Y,R26
000172 940e 0334 	CALL SUBOPT_0x2
000174 c0ce      	RJMP _0x2000030
                 _0x200002F:
000175 37e3      	CPI  R30,LOW(0x73)
000176 f441      	BRNE _0x2000032
000177 940e 032e 	CALL SUBOPT_0x1
000179 940e 033a 	CALL SUBOPT_0x3
00017b 940e 030e 	CALL _strlen
00017d 2f1e      	MOV  R17,R30
00017e c00a      	RJMP _0x2000033
                 _0x2000032:
00017f 37e0      	CPI  R30,LOW(0x70)
000180 f461      	BRNE _0x2000035
000181 940e 032e 	CALL SUBOPT_0x1
000183 940e 033a 	CALL SUBOPT_0x3
000185 940e 031a 	CALL _strlenf
000187 2f1e      	MOV  R17,R30
000188 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000189 6002      	ORI  R16,LOW(2)
00018a 770f      	ANDI R16,LOW(127)
00018b e030      	LDI  R19,LOW(0)
00018c c034      	RJMP _0x2000036
                 _0x2000035:
00018d 36e4      	CPI  R30,LOW(0x64)
00018e f011      	BREQ _0x2000039
00018f 36e9      	CPI  R30,LOW(0x69)
000190 f411      	BRNE _0x200003A
                 _0x2000039:
000191 6004      	ORI  R16,LOW(4)
000192 c002      	RJMP _0x200003B
                 _0x200003A:
000193 37e5      	CPI  R30,LOW(0x75)
000194 f431      	BRNE _0x200003C
                 _0x200003B:
000195 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000196 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000197 83ee      	STD  Y+6,R30
000198 83ff      	STD  Y+6+1,R31
000199 e015      	LDI  R17,LOW(5)
00019a c00c      	RJMP _0x200003D
                 _0x200003C:
00019b 35e8      	CPI  R30,LOW(0x58)
00019c f411      	BRNE _0x200003F
00019d 6008      	ORI  R16,LOW(8)
00019e c003      	RJMP _0x2000040
                 _0x200003F:
00019f 37e8      	CPI  R30,LOW(0x78)
0001a0 f009      	BREQ PC+2
0001a1 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001a2 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001a3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001a4 83ee      	STD  Y+6,R30
0001a5 83ff      	STD  Y+6+1,R31
0001a6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001a7 ff02      	SBRS R16,2
0001a8 c014      	RJMP _0x2000042
0001a9 940e 032e 	CALL SUBOPT_0x1
0001ab 940e 0344 	CALL SUBOPT_0x4
0001ad 85ab      	LDD  R26,Y+11
0001ae 23aa      	TST  R26
0001af f43a      	BRPL _0x2000043
0001b0 85ea      	LDD  R30,Y+10
0001b1 85fb      	LDD  R31,Y+10+1
0001b2 940e 0496 	CALL __ANEGW1
0001b4 87ea      	STD  Y+10,R30
0001b5 87fb      	STD  Y+10+1,R31
0001b6 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001b7 3040      	CPI  R20,0
0001b8 f011      	BREQ _0x2000044
0001b9 5f1f      	SUBI R17,-LOW(1)
0001ba c001      	RJMP _0x2000045
                 _0x2000044:
0001bb 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001bc c004      	RJMP _0x2000046
                 _0x2000042:
0001bd 940e 032e 	CALL SUBOPT_0x1
0001bf 940e 0344 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001c1 fd00      	SBRC R16,0
0001c2 c011      	RJMP _0x2000047
                 _0x2000048:
0001c3 1715      	CP   R17,R21
0001c4 f478      	BRSH _0x200004A
0001c5 ff07      	SBRS R16,7
0001c6 c008      	RJMP _0x200004B
0001c7 ff02      	SBRS R16,2
0001c8 c004      	RJMP _0x200004C
0001c9 7f0b      	ANDI R16,LOW(251)
0001ca 2f24      	MOV  R18,R20
0001cb 5011      	SUBI R17,LOW(1)
0001cc c001      	RJMP _0x200004D
                 _0x200004C:
0001cd e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001ce c001      	RJMP _0x200004E
                 _0x200004B:
0001cf e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001d0 940e 0327 	CALL SUBOPT_0x0
0001d2 5051      	SUBI R21,LOW(1)
0001d3 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001d4 2f31      	MOV  R19,R17
0001d5 ff01      	SBRS R16,1
0001d6 c017      	RJMP _0x200004F
                 _0x2000050:
0001d7 3030      	CPI  R19,0
0001d8 f0a1      	BREQ _0x2000052
0001d9 ff03      	SBRS R16,3
0001da c006      	RJMP _0x2000053
0001db 81ee      	LDD  R30,Y+6
0001dc 81ff      	LDD  R31,Y+6+1
0001dd 9125      	LPM  R18,Z+
0001de 83ee      	STD  Y+6,R30
0001df 83ff      	STD  Y+6+1,R31
0001e0 c005      	RJMP _0x2000054
                 _0x2000053:
0001e1 81ae      	LDD  R26,Y+6
0001e2 81bf      	LDD  R27,Y+6+1
0001e3 912d      	LD   R18,X+
0001e4 83ae      	STD  Y+6,R26
0001e5 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e6 940e 0327 	CALL SUBOPT_0x0
0001e8 3050      	CPI  R21,0
0001e9 f009      	BREQ _0x2000055
0001ea 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001eb 5031      	SUBI R19,LOW(1)
0001ec cfea      	RJMP _0x2000050
                 _0x2000052:
0001ed c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001ee e320      	LDI  R18,LOW(48)
0001ef 81ee      	LDD  R30,Y+6
0001f0 81ff      	LDD  R31,Y+6+1
0001f1 940e 04ab 	CALL __GETW1PF
0001f3 87e8      	STD  Y+8,R30
0001f4 87f9      	STD  Y+8+1,R31
0001f5 81ee      	LDD  R30,Y+6
0001f6 81ff      	LDD  R31,Y+6+1
0001f7 9632      	ADIW R30,2
0001f8 83ee      	STD  Y+6,R30
0001f9 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001fa 85e8      	LDD  R30,Y+8
0001fb 85f9      	LDD  R31,Y+8+1
0001fc 85aa      	LDD  R26,Y+10
0001fd 85bb      	LDD  R27,Y+10+1
0001fe 17ae      	CP   R26,R30
0001ff 07bf      	CPC  R27,R31
000200 f050      	BRLO _0x200005C
000201 5f2f      	SUBI R18,-LOW(1)
000202 85a8      	LDD  R26,Y+8
000203 85b9      	LDD  R27,Y+8+1
000204 85ea      	LDD  R30,Y+10
000205 85fb      	LDD  R31,Y+10+1
000206 1bea      	SUB  R30,R26
000207 0bfb      	SBC  R31,R27
000208 87ea      	STD  Y+10,R30
000209 87fb      	STD  Y+10+1,R31
00020a cfef      	RJMP _0x200005A
                 _0x200005C:
00020b 332a      	CPI  R18,58
00020c f028      	BRLO _0x200005D
00020d ff03      	SBRS R16,3
00020e c002      	RJMP _0x200005E
00020f 5f29      	SUBI R18,-LOW(7)
000210 c001      	RJMP _0x200005F
                 _0x200005E:
000211 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000212 fd04      	SBRC R16,4
000213 c01a      	RJMP _0x2000061
000214 3321      	CPI  R18,49
000215 f420      	BRSH _0x2000063
000216 85a8      	LDD  R26,Y+8
000217 85b9      	LDD  R27,Y+8+1
000218 9711      	SBIW R26,1
000219 f409      	BRNE _0x2000062
                 _0x2000063:
00021a c009      	RJMP _0x20000CD
                 _0x2000062:
00021b 1753      	CP   R21,R19
00021c f010      	BRLO _0x2000067
00021d ff00      	SBRS R16,0
00021e c001      	RJMP _0x2000068
                 _0x2000067:
00021f c013      	RJMP _0x2000066
                 _0x2000068:
000220 e220      	LDI  R18,LOW(32)
000221 ff07      	SBRS R16,7
000222 c00b      	RJMP _0x2000069
000223 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000224 6100      	ORI  R16,LOW(16)
000225 ff02      	SBRS R16,2
000226 c007      	RJMP _0x200006A
000227 7f0b      	ANDI R16,LOW(251)
000228 934a      	ST   -Y,R20
000229 940e 0334 	CALL SUBOPT_0x2
00022b 3050      	CPI  R21,0
00022c f009      	BREQ _0x200006B
00022d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00022e 940e 0327 	CALL SUBOPT_0x0
000230 3050      	CPI  R21,0
000231 f009      	BREQ _0x200006C
000232 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000233 5031      	SUBI R19,LOW(1)
000234 85a8      	LDD  R26,Y+8
000235 85b9      	LDD  R27,Y+8+1
000236 9712      	SBIW R26,2
000237 f008      	BRLO _0x2000059
000238 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000239 ff00      	SBRS R16,0
00023a c008      	RJMP _0x200006D
                 _0x200006E:
00023b 3050      	CPI  R21,0
00023c f031      	BREQ _0x2000070
00023d 5051      	SUBI R21,LOW(1)
00023e e2e0      	LDI  R30,LOW(32)
00023f 93ea      	ST   -Y,R30
000240 940e 0334 	CALL SUBOPT_0x2
000242 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000243 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000244 cee0      	RJMP _0x2000016
                 _0x2000018:
000245 85ac      	LDD  R26,Y+12
000246 85bd      	LDD  R27,Y+12+1
000247 940e 04a7 	CALL __GETW1P
000249 940e 04bb 	CALL __LOADLOCR6
00024b 9664      	ADIW R28,20
00024c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00024d 92ff      	PUSH R15
00024e 2ef8      	MOV  R15,R24
00024f 9726      	SBIW R28,6
000250 940e 04b6 	CALL __SAVELOCR4
000252 940e 034c 	CALL SUBOPT_0x5
000254 9730      	SBIW R30,0
000255 f419      	BRNE _0x2000072
000256 efef      	LDI  R30,LOW(65535)
000257 efff      	LDI  R31,HIGH(65535)
000258 c023      	RJMP _0x2080002
                 _0x2000072:
000259 01de      	MOVW R26,R28
00025a 9616      	ADIW R26,6
00025b 940e 0492 	CALL __ADDW2R15
00025d 018d      	MOVW R16,R26
00025e 940e 034c 	CALL SUBOPT_0x5
000260 83ee      	STD  Y+6,R30
000261 83ff      	STD  Y+6+1,R31
000262 e0e0      	LDI  R30,LOW(0)
000263 87e8      	STD  Y+8,R30
000264 87e9      	STD  Y+8+1,R30
000265 01de      	MOVW R26,R28
000266 961a      	ADIW R26,10
000267 940e 0492 	CALL __ADDW2R15
000269 940e 04a7 	CALL __GETW1P
00026b 93fa      	ST   -Y,R31
00026c 93ea      	ST   -Y,R30
00026d 931a      	ST   -Y,R17
00026e 930a      	ST   -Y,R16
00026f ede9      	LDI  R30,LOW(_put_buff_G100)
000270 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000271 93fa      	ST   -Y,R31
000272 93ea      	ST   -Y,R30
000273 01de      	MOVW R26,R28
000274 961a      	ADIW R26,10
000275 dea3      	RCALL __print_G100
000276 019f      	MOVW R18,R30
000277 81ae      	LDD  R26,Y+6
000278 81bf      	LDD  R27,Y+6+1
000279 e0e0      	LDI  R30,LOW(0)
00027a 93ec      	ST   X,R30
00027b 01f9      	MOVW R30,R18
                 _0x2080002:
00027c 940e 04bd 	CALL __LOADLOCR4
00027e 962a      	ADIW R28,10
00027f 90ff      	POP  R15
000280 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000281 93aa      	ST   -Y,R26
000282 b3e5      	IN   R30,0x15
000283 70ef      	ANDI R30,LOW(0xF)
000284 2fae      	MOV  R26,R30
000285 81e8      	LD   R30,Y
000286 7fe0      	ANDI R30,LOW(0xF0)
000287 2bea      	OR   R30,R26
000288 bbe5      	OUT  0x15,R30
                +
000289 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00028a 958a     +DEC R24
00028b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00028c 9aaa      	SBI  0x15,2
                +
00028d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00028e 958a     +DEC R24
00028f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000290 98aa      	CBI  0x15,2
                +
000291 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000292 958a     +DEC R24
000293 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000294 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000295 93aa      	ST   -Y,R26
000296 81a8      	LD   R26,Y
000297 dfe9      	RCALL __lcd_write_nibble_G101
000298 81e8          ld    r30,y
000299 95e2          swap  r30
00029a 83e8          st    y,r30
00029b 81a8      	LD   R26,Y
00029c dfe4      	RCALL __lcd_write_nibble_G101
                +
00029d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00029e 958a     +DEC R24
00029f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002a0 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a1 93aa      	ST   -Y,R26
0002a2 81e8      	LD   R30,Y
0002a3 e0f0      	LDI  R31,0
0002a4 58e0      	SUBI R30,LOW(-__base_y_G101)
0002a5 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002a6 81e0      	LD   R30,Z
0002a7 81a9      	LDD  R26,Y+1
0002a8 0fae      	ADD  R26,R30
0002a9 dfeb      	RCALL __lcd_write_data
0002aa 8079      	LDD  R7,Y+1
0002ab 8068      	LDD  R6,Y+0
0002ac 9622      	ADIW R28,2
0002ad 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ae e0a2      	LDI  R26,LOW(2)
0002af 940e 0353 	CALL SUBOPT_0x6
0002b1 e0ac      	LDI  R26,LOW(12)
0002b2 dfe2      	RCALL __lcd_write_data
0002b3 e0a1      	LDI  R26,LOW(1)
0002b4 940e 0353 	CALL SUBOPT_0x6
0002b6 e0e0      	LDI  R30,LOW(0)
0002b7 2e6e      	MOV  R6,R30
0002b8 2e7e      	MOV  R7,R30
0002b9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ba 93aa      	ST   -Y,R26
0002bb 81a8      	LD   R26,Y
0002bc 30aa      	CPI  R26,LOW(0xA)
0002bd f011      	BREQ _0x2020005
0002be 1479      	CP   R7,R9
0002bf f048      	BRLO _0x2020004
                 _0x2020005:
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 93ea      	ST   -Y,R30
0002c2 9463      	INC  R6
0002c3 2da6      	MOV  R26,R6
0002c4 dfdc      	RCALL _lcd_gotoxy
0002c5 81a8      	LD   R26,Y
0002c6 30aa      	CPI  R26,LOW(0xA)
0002c7 f409      	BRNE _0x2020007
0002c8 c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002c9 9473      	INC  R7
0002ca 9aa8      	SBI  0x15,0
0002cb 81a8      	LD   R26,Y
0002cc dfc8      	RCALL __lcd_write_data
0002cd 98a8      	CBI  0x15,0
0002ce c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002cf 93ba      	ST   -Y,R27
0002d0 93aa      	ST   -Y,R26
0002d1 931a      	ST   -Y,R17
                 _0x2020008:
0002d2 81a9      	LDD  R26,Y+1
0002d3 81ba      	LDD  R27,Y+1+1
0002d4 91ed      	LD   R30,X+
0002d5 83a9      	STD  Y+1,R26
0002d6 83ba      	STD  Y+1+1,R27
0002d7 2f1e      	MOV  R17,R30
0002d8 30e0      	CPI  R30,0
0002d9 f019      	BREQ _0x202000A
0002da 2fa1      	MOV  R26,R17
0002db dfde      	RCALL _lcd_putchar
0002dc cff5      	RJMP _0x2020008
                 _0x202000A:
0002dd 8118      	LDD  R17,Y+0
0002de 9623      	ADIW R28,3
0002df 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002e0 93aa      	ST   -Y,R26
0002e1 b3e4      	IN   R30,0x14
0002e2 6fe0      	ORI  R30,LOW(0xF0)
0002e3 bbe4      	OUT  0x14,R30
0002e4 9aa2      	SBI  0x14,2
0002e5 9aa0      	SBI  0x14,0
0002e6 9aa1      	SBI  0x14,1
0002e7 98aa      	CBI  0x15,2
0002e8 98a8      	CBI  0x15,0
0002e9 98a9      	CBI  0x15,1
0002ea 8098      	LDD  R9,Y+0
0002eb 81e8      	LD   R30,Y
0002ec 58e0      	SUBI R30,-LOW(128)
                +
0002ed 93e0 0282+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002ef 81e8      	LD   R30,Y
0002f0 54e0      	SUBI R30,-LOW(192)
                +
0002f1 93e0 0283+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002f3 e1a4      	LDI  R26,LOW(20)
0002f4 e0b0      	LDI  R27,0
0002f5 940e 0361 	CALL _delay_ms
0002f7 940e 0359 	CALL SUBOPT_0x7
0002f9 940e 0359 	CALL SUBOPT_0x7
0002fb 940e 0359 	CALL SUBOPT_0x7
0002fd e2a0      	LDI  R26,LOW(32)
0002fe df82      	RCALL __lcd_write_nibble_G101
                +
0002ff ec88     +LDI R24 , LOW ( 200 )
000300 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000301 9701     +SBIW R24 , 1
000302 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000303 e2a8      	LDI  R26,LOW(40)
000304 df90      	RCALL __lcd_write_data
000305 e0a4      	LDI  R26,LOW(4)
000306 df8e      	RCALL __lcd_write_data
000307 e8a5      	LDI  R26,LOW(133)
000308 df8c      	RCALL __lcd_write_data
000309 e0a6      	LDI  R26,LOW(6)
00030a df8a      	RCALL __lcd_write_data
00030b dfa2      	RCALL _lcd_clear
                 _0x2080001:
00030c 9621      	ADIW R28,1
00030d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00030e 93ba      	ST   -Y,R27
00030f 93aa      	ST   -Y,R26
000310 91a9          ld   r26,y+
000311 91b9          ld   r27,y+
000312 27ee          clr  r30
000313 27ff          clr  r31
                 strlen0:
000314 916d          ld   r22,x+
000315 2366          tst  r22
000316 f011          breq strlen1
000317 9631          adiw r30,1
000318 cffb          rjmp strlen0
                 strlen1:
000319 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00031a 93ba      	ST   -Y,R27
00031b 93aa      	ST   -Y,R26
00031c 27aa          clr  r26
00031d 27bb          clr  r27
00031e 91e9          ld   r30,y+
00031f 91f9          ld   r31,y+
                 strlenf0:
000320 9005      	lpm  r0,z+
000321 2000          tst  r0
000322 f011          breq strlenf1
000323 9611          adiw r26,1
000324 cffb          rjmp strlenf0
                 strlenf1:
000325 01fd          movw r30,r26
000326 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _st:
00026c           	.BYTE 0x14
                 __base_y_G101:
000280           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000327 932a      	ST   -Y,R18
000328 85ad      	LDD  R26,Y+13
000329 85be      	LDD  R27,Y+13+1
00032a 85ef      	LDD  R30,Y+15
00032b 89f8      	LDD  R31,Y+15+1
00032c 9509      	ICALL
00032d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00032e 89e8      	LDD  R30,Y+16
00032f 89f9      	LDD  R31,Y+16+1
000330 9734      	SBIW R30,4
000331 8be8      	STD  Y+16,R30
000332 8bf9      	STD  Y+16+1,R31
000333 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000334 85ad      	LDD  R26,Y+13
000335 85be      	LDD  R27,Y+13+1
000336 85ef      	LDD  R30,Y+15
000337 89f8      	LDD  R31,Y+15+1
000338 9509      	ICALL
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00033a 89a8      	LDD  R26,Y+16
00033b 89b9      	LDD  R27,Y+16+1
00033c 9614      	ADIW R26,4
00033d 940e 04a7 	CALL __GETW1P
00033f 83ee      	STD  Y+6,R30
000340 83ff      	STD  Y+6+1,R31
000341 81ae      	LDD  R26,Y+6
000342 81bf      	LDD  R27,Y+6+1
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000344 89a8      	LDD  R26,Y+16
000345 89b9      	LDD  R27,Y+16+1
000346 9614      	ADIW R26,4
000347 940e 04a7 	CALL __GETW1P
000349 87ea      	STD  Y+10,R30
00034a 87fb      	STD  Y+10+1,R31
00034b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00034c 01de      	MOVW R26,R28
00034d 961c      	ADIW R26,12
00034e 940e 0492 	CALL __ADDW2R15
000350 940e 04a7 	CALL __GETW1P
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000353 940e 0295 	CALL __lcd_write_data
000355 e0a3      	LDI  R26,LOW(3)
000356 e0b0      	LDI  R27,0
000357 940c 0361 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000359 e3a0      	LDI  R26,LOW(48)
00035a 940e 0281 	CALL __lcd_write_nibble_G101
                +
00035c ec88     +LDI R24 , LOW ( 200 )
00035d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00035e 9701     +SBIW R24 , 1
00035f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000360 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000361 9610      	adiw r26,0
000362 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000363 ed80     +LDI R24 , LOW ( 0x7D0 )
000364 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000365 9701     +SBIW R24 , 1
000366 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000367 95a8      	wdr
000368 9711      	sbiw r26,1
000369 f7c9      	brne __delay_ms0
                 __delay_ms1:
00036a 9508      	ret
                 
                 __ROUND_REPACK:
00036b 2355      	TST  R21
00036c f442      	BRPL __REPACK
00036d 3850      	CPI  R21,0x80
00036e f411      	BRNE __ROUND_REPACK0
00036f ffe0      	SBRS R30,0
000370 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000371 9631      	ADIW R30,1
000372 1f69      	ADC  R22,R25
000373 1f79      	ADC  R23,R25
000374 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000375 e850      	LDI  R21,0x80
000376 2757      	EOR  R21,R23
000377 f411      	BRNE __REPACK0
000378 935f      	PUSH R21
000379 c073      	RJMP __ZERORES
                 __REPACK0:
00037a 3f5f      	CPI  R21,0xFF
00037b f031      	BREQ __REPACK1
00037c 0f66      	LSL  R22
00037d 0c00      	LSL  R0
00037e 9557      	ROR  R21
00037f 9567      	ROR  R22
000380 2f75      	MOV  R23,R21
000381 9508      	RET
                 __REPACK1:
000382 935f      	PUSH R21
000383 2000      	TST  R0
000384 f00a      	BRMI __REPACK2
000385 c073      	RJMP __MAXRES
                 __REPACK2:
000386 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000387 e850      	LDI  R21,0x80
000388 2e19      	MOV  R1,R25
000389 2215      	AND  R1,R21
00038a 0f88      	LSL  R24
00038b 1f99      	ROL  R25
00038c 2795      	EOR  R25,R21
00038d 0f55      	LSL  R21
00038e 9587      	ROR  R24
                 
                 __UNPACK1:
00038f e850      	LDI  R21,0x80
000390 2e07      	MOV  R0,R23
000391 2205      	AND  R0,R21
000392 0f66      	LSL  R22
000393 1f77      	ROL  R23
000394 2775      	EOR  R23,R21
000395 0f55      	LSL  R21
000396 9567      	ROR  R22
000397 9508      	RET
                 
                 __CFD1U:
000398 9468      	SET
000399 c001      	RJMP __CFD1U0
                 __CFD1:
00039a 94e8      	CLT
                 __CFD1U0:
00039b 935f      	PUSH R21
00039c dff2      	RCALL __UNPACK1
00039d 3870      	CPI  R23,0x80
00039e f018      	BRLO __CFD10
00039f 3f7f      	CPI  R23,0xFF
0003a0 f408      	BRCC __CFD10
0003a1 c04b      	RJMP __ZERORES
                 __CFD10:
0003a2 e156      	LDI  R21,22
0003a3 1b57      	SUB  R21,R23
0003a4 f4aa      	BRPL __CFD11
0003a5 9551      	NEG  R21
0003a6 3058      	CPI  R21,8
0003a7 f40e      	BRTC __CFD19
0003a8 3059      	CPI  R21,9
                 __CFD19:
0003a9 f030      	BRLO __CFD17
0003aa efef      	SER  R30
0003ab efff      	SER  R31
0003ac ef6f      	SER  R22
0003ad e77f      	LDI  R23,0x7F
0003ae f977      	BLD  R23,7
0003af c01a      	RJMP __CFD15
                 __CFD17:
0003b0 2777      	CLR  R23
0003b1 2355      	TST  R21
0003b2 f0b9      	BREQ __CFD15
                 __CFD18:
0003b3 0fee      	LSL  R30
0003b4 1fff      	ROL  R31
0003b5 1f66      	ROL  R22
0003b6 1f77      	ROL  R23
0003b7 955a      	DEC  R21
0003b8 f7d1      	BRNE __CFD18
0003b9 c010      	RJMP __CFD15
                 __CFD11:
0003ba 2777      	CLR  R23
                 __CFD12:
0003bb 3058      	CPI  R21,8
0003bc f028      	BRLO __CFD13
0003bd 2fef      	MOV  R30,R31
0003be 2ff6      	MOV  R31,R22
0003bf 2f67      	MOV  R22,R23
0003c0 5058      	SUBI R21,8
0003c1 cff9      	RJMP __CFD12
                 __CFD13:
0003c2 2355      	TST  R21
0003c3 f031      	BREQ __CFD15
                 __CFD14:
0003c4 9576      	LSR  R23
0003c5 9567      	ROR  R22
0003c6 95f7      	ROR  R31
0003c7 95e7      	ROR  R30
0003c8 955a      	DEC  R21
0003c9 f7d1      	BRNE __CFD14
                 __CFD15:
0003ca 2000      	TST  R0
0003cb f40a      	BRPL __CFD16
0003cc d0cd      	RCALL __ANEGD1
                 __CFD16:
0003cd 915f      	POP  R21
0003ce 9508      	RET
                 
                 __CDF1U:
0003cf 9468      	SET
0003d0 c001      	RJMP __CDF1U0
                 __CDF1:
0003d1 94e8      	CLT
                 __CDF1U0:
0003d2 9730      	SBIW R30,0
0003d3 4060      	SBCI R22,0
0003d4 4070      	SBCI R23,0
0003d5 f0b1      	BREQ __CDF10
0003d6 2400      	CLR  R0
0003d7 f026      	BRTS __CDF11
0003d8 2377      	TST  R23
0003d9 f412      	BRPL __CDF11
0003da 9400      	COM  R0
0003db d0be      	RCALL __ANEGD1
                 __CDF11:
0003dc 2e17      	MOV  R1,R23
0003dd e17e      	LDI  R23,30
0003de 2011      	TST  R1
                 __CDF12:
0003df f032      	BRMI __CDF13
0003e0 957a      	DEC  R23
0003e1 0fee      	LSL  R30
0003e2 1fff      	ROL  R31
0003e3 1f66      	ROL  R22
0003e4 1c11      	ROL  R1
0003e5 cff9      	RJMP __CDF12
                 __CDF13:
0003e6 2fef      	MOV  R30,R31
0003e7 2ff6      	MOV  R31,R22
0003e8 2d61      	MOV  R22,R1
0003e9 935f      	PUSH R21
0003ea df8a      	RCALL __REPACK
0003eb 915f      	POP  R21
                 __CDF10:
0003ec 9508      	RET
                 
                 __ZERORES:
0003ed 27ee      	CLR  R30
0003ee 27ff      	CLR  R31
0003ef 2766      	CLR  R22
0003f0 2777      	CLR  R23
0003f1 915f      	POP  R21
0003f2 9508      	RET
                 
                 __MINRES:
0003f3 efef      	SER  R30
0003f4 efff      	SER  R31
0003f5 e76f      	LDI  R22,0x7F
0003f6 ef7f      	SER  R23
0003f7 915f      	POP  R21
0003f8 9508      	RET
                 
                 __MAXRES:
0003f9 efef      	SER  R30
0003fa efff      	SER  R31
0003fb e76f      	LDI  R22,0x7F
0003fc e77f      	LDI  R23,0x7F
0003fd 915f      	POP  R21
0003fe 9508      	RET
                 
                 __MULF12:
0003ff 935f      	PUSH R21
000400 df86      	RCALL __UNPACK
000401 3870      	CPI  R23,0x80
000402 f351      	BREQ __ZERORES
000403 3890      	CPI  R25,0x80
000404 f341      	BREQ __ZERORES
000405 2401      	EOR  R0,R1
000406 9408      	SEC
000407 1f79      	ADC  R23,R25
000408 f423      	BRVC __MULF124
000409 f31c      	BRLT __ZERORES
                 __MULF125:
00040a 2000      	TST  R0
00040b f33a      	BRMI __MINRES
00040c cfec      	RJMP __MAXRES
                 __MULF124:
00040d 920f      	PUSH R0
00040e 931f      	PUSH R17
00040f 932f      	PUSH R18
000410 933f      	PUSH R19
000411 934f      	PUSH R20
000412 2711      	CLR  R17
000413 2722      	CLR  R18
000414 2799      	CLR  R25
000415 9f68      	MUL  R22,R24
000416 01a0      	MOVW R20,R0
000417 9f8f      	MUL  R24,R31
000418 2d30      	MOV  R19,R0
000419 0d41      	ADD  R20,R1
00041a 1f59      	ADC  R21,R25
00041b 9f6b      	MUL  R22,R27
00041c 0d30      	ADD  R19,R0
00041d 1d41      	ADC  R20,R1
00041e 1f59      	ADC  R21,R25
00041f 9f8e      	MUL  R24,R30
000420 d027      	RCALL __MULF126
000421 9fbf      	MUL  R27,R31
000422 d025      	RCALL __MULF126
000423 9f6a      	MUL  R22,R26
000424 d023      	RCALL __MULF126
000425 9fbe      	MUL  R27,R30
000426 d01d      	RCALL __MULF127
000427 9faf      	MUL  R26,R31
000428 d01b      	RCALL __MULF127
000429 9fae      	MUL  R26,R30
00042a 0d11      	ADD  R17,R1
00042b 1f29      	ADC  R18,R25
00042c 1f39      	ADC  R19,R25
00042d 1f49      	ADC  R20,R25
00042e 1f59      	ADC  R21,R25
00042f 2fe3      	MOV  R30,R19
000430 2ff4      	MOV  R31,R20
000431 2f65      	MOV  R22,R21
000432 2f52      	MOV  R21,R18
000433 914f      	POP  R20
000434 913f      	POP  R19
000435 912f      	POP  R18
000436 911f      	POP  R17
000437 900f      	POP  R0
000438 2366      	TST  R22
000439 f02a      	BRMI __MULF122
00043a 0f55      	LSL  R21
00043b 1fee      	ROL  R30
00043c 1fff      	ROL  R31
00043d 1f66      	ROL  R22
00043e c002      	RJMP __MULF123
                 __MULF122:
00043f 9573      	INC  R23
000440 f24b      	BRVS __MULF125
                 __MULF123:
000441 df29      	RCALL __ROUND_REPACK
000442 915f      	POP  R21
000443 9508      	RET
                 
                 __MULF127:
000444 0d10      	ADD  R17,R0
000445 1d21      	ADC  R18,R1
000446 1f39      	ADC  R19,R25
000447 c002      	RJMP __MULF128
                 __MULF126:
000448 0d20      	ADD  R18,R0
000449 1d31      	ADC  R19,R1
                 __MULF128:
00044a 1f49      	ADC  R20,R25
00044b 1f59      	ADC  R21,R25
00044c 9508      	RET
                 
                 __DIVF21:
00044d 935f      	PUSH R21
00044e df38      	RCALL __UNPACK
00044f 3870      	CPI  R23,0x80
000450 f421      	BRNE __DIVF210
000451 2011      	TST  R1
                 __DIVF211:
000452 f40a      	BRPL __DIVF219
000453 cf9f      	RJMP __MINRES
                 __DIVF219:
000454 cfa4      	RJMP __MAXRES
                 __DIVF210:
000455 3890      	CPI  R25,0x80
000456 f409      	BRNE __DIVF218
                 __DIVF217:
000457 cf95      	RJMP __ZERORES
                 __DIVF218:
000458 2401      	EOR  R0,R1
000459 9408      	SEC
00045a 0b97      	SBC  R25,R23
00045b f41b      	BRVC __DIVF216
00045c f3d4      	BRLT __DIVF217
00045d 2000      	TST  R0
00045e cff3      	RJMP __DIVF211
                 __DIVF216:
00045f 2f79      	MOV  R23,R25
000460 931f      	PUSH R17
000461 932f      	PUSH R18
000462 933f      	PUSH R19
000463 934f      	PUSH R20
000464 2411      	CLR  R1
000465 2711      	CLR  R17
000466 2722      	CLR  R18
000467 2733      	CLR  R19
000468 2744      	CLR  R20
000469 2755      	CLR  R21
00046a e290      	LDI  R25,32
                 __DIVF212:
00046b 17ae      	CP   R26,R30
00046c 07bf      	CPC  R27,R31
00046d 0786      	CPC  R24,R22
00046e 0741      	CPC  R20,R17
00046f f030      	BRLO __DIVF213
000470 1bae      	SUB  R26,R30
000471 0bbf      	SBC  R27,R31
000472 0b86      	SBC  R24,R22
000473 0b41      	SBC  R20,R17
000474 9408      	SEC
000475 c001      	RJMP __DIVF214
                 __DIVF213:
000476 9488      	CLC
                 __DIVF214:
000477 1f55      	ROL  R21
000478 1f22      	ROL  R18
000479 1f33      	ROL  R19
00047a 1c11      	ROL  R1
00047b 1faa      	ROL  R26
00047c 1fbb      	ROL  R27
00047d 1f88      	ROL  R24
00047e 1f44      	ROL  R20
00047f 959a      	DEC  R25
000480 f751      	BRNE __DIVF212
000481 01f9      	MOVW R30,R18
000482 2d61      	MOV  R22,R1
000483 914f      	POP  R20
000484 913f      	POP  R19
000485 912f      	POP  R18
000486 911f      	POP  R17
000487 2366      	TST  R22
000488 f032      	BRMI __DIVF215
000489 0f55      	LSL  R21
00048a 1fee      	ROL  R30
00048b 1fff      	ROL  R31
00048c 1f66      	ROL  R22
00048d 957a      	DEC  R23
00048e f243      	BRVS __DIVF217
                 __DIVF215:
00048f dedb      	RCALL __ROUND_REPACK
000490 915f      	POP  R21
000491 9508      	RET
                 
                 __ADDW2R15:
000492 2400      	CLR  R0
000493 0daf      	ADD  R26,R15
000494 1db0      	ADC  R27,R0
000495 9508      	RET
                 
                 __ANEGW1:
000496 95f1      	NEG  R31
000497 95e1      	NEG  R30
000498 40f0      	SBCI R31,0
000499 9508      	RET
                 
                 __ANEGD1:
00049a 95f0      	COM  R31
00049b 9560      	COM  R22
00049c 9570      	COM  R23
00049d 95e1      	NEG  R30
00049e 4fff      	SBCI R31,-1
00049f 4f6f      	SBCI R22,-1
0004a0 4f7f      	SBCI R23,-1
0004a1 9508      	RET
                 
                 __CWD1:
0004a2 2f6f      	MOV  R22,R31
0004a3 0f66      	ADD  R22,R22
0004a4 0b66      	SBC  R22,R22
0004a5 2f76      	MOV  R23,R22
0004a6 9508      	RET
                 
                 __GETW1P:
0004a7 91ed      	LD   R30,X+
0004a8 91fc      	LD   R31,X
0004a9 9711      	SBIW R26,1
0004aa 9508      	RET
                 
                 __GETW1PF:
0004ab 9005      	LPM  R0,Z+
0004ac 91f4      	LPM  R31,Z
0004ad 2de0      	MOV  R30,R0
0004ae 9508      	RET
                 
                 __PUTPARD1:
0004af 937a      	ST   -Y,R23
0004b0 936a      	ST   -Y,R22
0004b1 93fa      	ST   -Y,R31
0004b2 93ea      	ST   -Y,R30
0004b3 9508      	RET
                 
                 __SAVELOCR6:
0004b4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004b5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004b6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004b7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004b8 931a      	ST   -Y,R17
0004b9 930a      	ST   -Y,R16
0004ba 9508      	RET
                 
                 __LOADLOCR6:
0004bb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004bc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004bd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004be 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004bf 8119      	LDD  R17,Y+1
0004c0 8108      	LD   R16,Y
0004c1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :  18 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  34 r18:  41 r19:  20 r20:  23 r21:  66 r22:  43 r23:  36 
r24:  35 r25:  28 r26: 110 r27:  46 r28:  14 r29:   1 r30: 194 r31:  81 
x  :  23 y  : 169 z  :  15 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   9 
adiw  :  25 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   2 brmi  :   6 brne  :  38 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  :  61 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  23 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   5 cpi   :  44 cpse  :   0 dec   :  11 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  24 ld    :  26 ldd   :  77 ldi   : 115 
lds   :   0 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  36 movw  :  21 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  20 pop   :  17 push  :  16 rcall :  28 ret   :  36 
reti  :   0 rjmp  :  79 rol   :  22 ror   :   7 sbc   :   6 sbci  :   7 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  31 sts   :   2 sub   :   3 subi  :  17 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000984   2376     60   2436   32768   7.4%
[.dseg] 0x000060 0x000284      0     36     36    2048   1.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
