;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdbool.h>
;#include <stdlib.h>
;#include <spi.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;
;void Sending(char data)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E char flush_buffer;
; 0000 000F SPDR = data;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> Y+1
;	flush_buffer -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0010 while(!(SPSR & (1 << SPIF)));
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0011 flush_buffer = SPDR;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0012 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;char Receiving()
; 0000 0015 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0016 SPDR = 0xFF;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0017 while(!(SPSR & (1 << SPIF)));
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0018 return(SPDR);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0019 }
;PCODE: $0000002C VOL: 0
;char Keyboard();
;void main(void)
; 0000 001C {
;PCODE: $0000002D VOL: 0
; 0000 001D // Declare your local variables here
; 0000 001E bool choice = false;
; 0000 001F char ch, key = 'a', sent[41];
; 0000 0020 char display[8] = "1+-/.<\"";
; 0000 0021 int i = 0, ind = 0, len = 0;
; 0000 0022 
; 0000 0023 // Input/Output Ports initialization
; 0000 0024 // Port A initialization
; 0000 0025 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0026 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	choice -> R17
;	ch -> R16
;	key -> R19
;	sent -> Y+12
;	display -> Y+4
;	i -> R20,R21
;	ind -> Y+2
;	len -> Y+0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0027 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0028 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0029 
; 0000 002A // Port B initialization
; 0000 002B // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002C DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002D // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 002F 
; 0000 0030 // Port C initialization
; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0032 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0034 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0035 
; 0000 0036 // Port D initialization
; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0038 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003B 
; 0000 003C // Timer/Counter 0 initialization
; 0000 003D // Clock source: System Clock
; 0000 003E // Clock value: Timer 0 Stopped
; 0000 003F // Mode: Normal top=0xFF
; 0000 0040 // OC0 output: Disconnected
; 0000 0041 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0042 TCNT0=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0043 OCR0=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0044 
; 0000 0045 // Timer/Counter 1 initialization
; 0000 0046 // Clock source: System Clock
; 0000 0047 // Clock value: Timer1 Stopped
; 0000 0048 // Mode: Normal top=0xFFFF
; 0000 0049 // OC1A output: Disconnected
; 0000 004A // OC1B output: Disconnected
; 0000 004B // Noise Canceler: Off
; 0000 004C // Input Capture on Falling Edge
; 0000 004D // Timer1 Overflow Interrupt: Off
; 0000 004E // Input Capture Interrupt: Off
; 0000 004F // Compare A Match Interrupt: Off
; 0000 0050 // Compare B Match Interrupt: Off
; 0000 0051 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0052 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0053 TCNT1H=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0054 TCNT1L=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0055 ICR1H=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0056 ICR1L=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0057 OCR1AH=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0058 OCR1AL=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0059 OCR1BH=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005A OCR1BL=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005B 
; 0000 005C // Timer/Counter 2 initialization
; 0000 005D // Clock source: System Clock
; 0000 005E // Clock value: Timer2 Stopped
; 0000 005F // Mode: Normal top=0xFF
; 0000 0060 // OC2 output: Disconnected
; 0000 0061 ASSR=0<<AS2;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0062 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0063 TCNT2=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0064 OCR2=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0065 
; 0000 0066 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0067 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0068 
; 0000 0069 // External Interrupt(s) initialization
; 0000 006A // INT0: Off
; 0000 006B // INT1: Off
; 0000 006C // INT2: Off
; 0000 006D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006E MCUCSR=(0<<ISC2);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006F 
; 0000 0070 // USART initialization
; 0000 0071 // USART disabled
; 0000 0072 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0073 
; 0000 0074 // Analog Comparator initialization
; 0000 0075 // Analog Comparator: Off
; 0000 0076 // The Analog Comparator's positive input is
; 0000 0077 // connected to the AIN0 pin
; 0000 0078 // The Analog Comparator's negative input is
; 0000 0079 // connected to the AIN1 pin
; 0000 007A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007B SFIOR=(0<<ACME);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007C 
; 0000 007D // ADC initialization
; 0000 007E // ADC disabled
; 0000 007F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0080 
; 0000 0081 // SPI initialization
; 0000 0082 // SPI Type: Master
; 0000 0083 // SPI Clock Rate: 2*2000.000 kHz
; 0000 0084 // SPI Clock Phase: Cycle Start
; 0000 0085 // SPI Clock Polarity: Low
; 0000 0086 // SPI Data Order: MSB First
; 0000 0087 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0088 SPSR=(1<<SPI2X);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0089 
; 0000 008A // Clear the SPI interrupt flag
; 0000 008B #asm
;PCODE: $0000007D VOL: 0
; 0000 008C in   r30,spsr
in   r30,spsr
;PCODE: $0000007E VOL: 0
; 0000 008D in   r30,spdr
in   r30,spdr
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008E #endasm
; 0000 008F 
; 0000 0090 // TWI initialization
; 0000 0091 // TWI disabled
; 0000 0092 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0093 
; 0000 0094 
; 0000 0095 lcd_init(16);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0096 
; 0000 0097 // Global enable interrupts
; 0000 0098 #asm("sei")
;PCODE: $00000085 VOL: 0
	sei
;PCODE: $00000086 VOL: 0
; 0000 0099 
; 0000 009A DDRC = 0xF0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009B display[5] = 127;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 009C while (1)
;PCODE: $0000008B VOL: 0
; 0000 009D {
; 0000 009E key = 'a';
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F while (key == 'a')
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A0 key = Keyboard();
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A1 if (!choice && key != '#')
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A2 {
; 0000 00A3 if (key != '1')
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A4 {
; 0000 00A5 sent[ind++] = key;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A6 lcd_putchar(key);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00A7 }
; 0000 00A8 else
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A9 {
; 0000 00AA choice = true;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00AB lcd_gotoxy(0, 1);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AC lcd_puts(display);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AD }
;PCODE: $000000B5 VOL: 0
; 0000 00AE }
; 0000 00AF else if (choice && key >= '1' && key <= '7')
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B0 {
; 0000 00B1 if (display[key - '1'] == 127)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00B2 {
; 0000 00B3 choice = false;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00B4 lcd_gotoxy(0, 1);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00B5 lcd_puts("       ");
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B6 if (ind > 0)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00B7 {
; 0000 00B8 sent[--ind] = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B9 lcd_gotoxy(ind, 0);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00BA lcd_putchar(' ');
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BB lcd_gotoxy(ind, 0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00BC }
; 0000 00BD else
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BE {
; 0000 00BF lcd_gotoxy(ind, 0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00C0 }
;PCODE: $000000EF VOL: 0
; 0000 00C1 }
; 0000 00C2 else if (display[key - '1'] == '"')
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00C3 {
; 0000 00C4 choice = false;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00C5 for (i = 0;i < ind;i++)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C6 {
; 0000 00C7 Sending(sent[i]);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00C8 delay_ms(30);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C9 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00CA Sending('"');
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00CB delay_ms(30);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00CC ind = 0;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00CD delay_ms(5000);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00CE len = Receiving();
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CF delay_ms(30);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00D0 lcd_clear();
;PCODE: $00000120 VOL: 0
; 0000 00D1 for (i = 0;i < len;i++)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00D2 {
; 0000 00D3 ch = Receiving();
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D4 lcd_putchar(ch);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00D5 delay_ms(30);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00D6 }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D7 delay_ms(3000);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00D8 lcd_clear();
;PCODE: $00000138 VOL: 0
; 0000 00D9 for (i = 0;i < 41;i++)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00DA sent[i] = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00DB }
; 0000 00DC else
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00DD {
; 0000 00DE sent[ind] = display[key - '1'];
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DF choice = false;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00E0 lcd_gotoxy(0, 1);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00E1 lcd_puts("       ");
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00E2 lcd_gotoxy(ind++, 0);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00E3 lcd_putchar(display[key - '1']);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E4 }
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00E5 }
; 0000 00E6 delay_ms(350);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00E7 }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00E8 }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x10
;char Keyboard()
; 0000 00EA {

	.CSEG
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00EB PORTC = 0b11101111;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00EC delay_ms(5);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00ED if((PINC & 0b00000001) == 0)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00EE return '1';
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00EF if((PINC & 0b00000010) == 0)
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00F0 return '2';
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00F1 if((PINC & 0b00000100) == 0)
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00F2 return '3';
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00F3 PORTC = 0b11011111;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00F4 delay_ms(5);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00F5 if((PINC & 0b00000001) == 0)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00F6 return '4';
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00F7 if((PINC & 0b00000010) == 0)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00F8 return '5';
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00F9 if((PINC & 0b00000100) == 0)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00FA return '6';
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00FB PORTC = 0b10111111;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00FC delay_ms(5);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00FD if((PINC & 0b00000001) == 0)
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00FE return '7';
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00FF if((PINC & 0b00000010) == 0)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0100 return '8';
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0101 if((PINC & 0b00000100) == 0)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0102 return '9';
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0103 PORTC = 0b01111111;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0104 delay_ms(5);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0105 if((PINC & 0b00000001) == 0)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0106 return '*';
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0107 if((PINC & 0b00000010) == 0)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0108 return '0';
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0109 if((PINC & 0b00000100) == 0)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 010A return '#';
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 010B return 'a';
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 010C }
;PCODE: $000001DC VOL: 0
