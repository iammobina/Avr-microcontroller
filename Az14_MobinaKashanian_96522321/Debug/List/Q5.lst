
AVRASM ver. 2.1.30  C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm Fri Dec 25 23:16:27 2020

C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x9:
00002a 0000
00002b 0000
00002c 2b31
00002d 2f2d      	.DB  0x0,0x0,0x0,0x0,0x31,0x2B,0x2D,0x2F
00002e 3c2e
00002f 0022      	.DB  0x2E,0x3C,0x22,0x0
                 _0x0:
000030 2020
000031 2020
000032 2020
000033 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
                 _0x2000060:
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm(1127): warning: .cseg .db misalignment - padding zero byte
000034 0001      	.DB  0x1
                 _0x2000000:
000035 4e2d
000036 4e41
000037 4900
000038 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\AVAJANG\Documents\HW2_MobinaKashanian_96522321_Part2_Q5\Debug\List\Q5.asm(1130): warning: .cseg .db misalignment - padding zero byte
000039 0000      	.DB  0x0
                 _0x2040003:
00003a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003b 0008      	.DW  0x08
00003c 0260      	.DW  _0x1A
00003d 0060      	.DW  _0x0*2
                 
00003e 0008      	.DW  0x08
00003f 0268      	.DW  _0x1A+8
000040 0060      	.DW  _0x0*2
                 
000041 0001      	.DW  0x01
000042 0270      	.DW  __seed_G100
000043 0068      	.DW  _0x2000060*2
                 
000044 0002      	.DW  0x02
000045 0274      	.DW  __base_y_G102
000046 0074      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 0085 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;#include <stdlib.h>
                 ;#include <spi.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;void Sending(char data)
                 ; 0000 000D {
                 
                 	.CSEG
                 _Sending:
                 ; .FSTART _Sending
                 ; 0000 000E char flush_buffer;
                 ; 0000 000F SPDR = data;
000075 93aa      	ST   -Y,R26
000076 931a      	ST   -Y,R17
                 ;	data -> Y+1
                 ;	flush_buffer -> R17
000077 81e9      	LDD  R30,Y+1
000078 b9ef      	OUT  0xF,R30
                 ; 0000 0010 while(!(SPSR & (1 << SPIF)));
                 _0x3:
000079 9b77      	SBIS 0xE,7
00007a cffe      	RJMP _0x3
                 ; 0000 0011 flush_buffer = SPDR;
00007b b11f      	IN   R17,15
                 ; 0000 0012 }
00007c 8118      	LDD  R17,Y+0
00007d 940c 01ef 	JMP  _0x20C0002
                 ; .FEND
                 ;
                 ;char Receiving()
                 ; 0000 0015 {
                 _Receiving:
                 ; .FSTART _Receiving
                 ; 0000 0016 SPDR = 0xFF;
00007f efef      	LDI  R30,LOW(255)
000080 b9ef      	OUT  0xF,R30
                 ; 0000 0017 while(!(SPSR & (1 << SPIF)));
                 _0x6:
000081 9b77      	SBIS 0xE,7
000082 cffe      	RJMP _0x6
                 ; 0000 0018 return(SPDR);
000083 b1ef      	IN   R30,0xF
000084 9508      	RET
                 ; 0000 0019 }
                 ; .FEND
                 ;char Keyboard();
                 ;void main(void)
                 ; 0000 001C {
                 _main:
                 ; .FSTART _main
                 ; 0000 001D // Declare your local variables here
                 ; 0000 001E bool choice = false;
                 ; 0000 001F char ch, key = 'a', sent[41];
                 ; 0000 0020 char display[8] = "1+-/.<\"";
                 ; 0000 0021 int i = 0, ind = 0, len = 0;
                 ; 0000 0022 
                 ; 0000 0023 // Input/Output Ports initialization
                 ; 0000 0024 // Port A initialization
                 ; 0000 0025 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0026 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000085 97e5      	SBIW R28,53
000086 e08c      	LDI  R24,12
000087 e0a0      	LDI  R26,LOW(0)
000088 e0b0      	LDI  R27,HIGH(0)
000089 e5e4      	LDI  R30,LOW(_0x9*2)
00008a e0f0      	LDI  R31,HIGH(_0x9*2)
00008b 940e 0298 	CALL __INITLOCB
                 ;	choice -> R17
                 ;	ch -> R16
                 ;	key -> R19
                 ;	sent -> Y+12
                 ;	display -> Y+4
                 ;	i -> R20,R21
                 ;	ind -> Y+2
                 ;	len -> Y+0
00008d e010      	LDI  R17,0
00008e e631      	LDI  R19,97
                +
00008f e040     +LDI R20 , LOW ( 0 )
000090 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000091 e0e0      	LDI  R30,LOW(0)
000092 bbea      	OUT  0x1A,R30
                 ; 0000 0027 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0028 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000093 bbeb      	OUT  0x1B,R30
                 ; 0000 0029 
                 ; 0000 002A // Port B initialization
                 ; 0000 002B // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002C DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000094 ebe0      	LDI  R30,LOW(176)
000095 bbe7      	OUT  0x17,R30
                 ; 0000 002D // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000096 e0e0      	LDI  R30,LOW(0)
000097 bbe8      	OUT  0x18,R30
                 ; 0000 002F 
                 ; 0000 0030 // Port C initialization
                 ; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000098 e0ef      	LDI  R30,LOW(15)
000099 bbe4      	OUT  0x14,R30
                 ; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009a e0e0      	LDI  R30,LOW(0)
00009b bbe5      	OUT  0x15,R30
                 ; 0000 0035 
                 ; 0000 0036 // Port D initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00009c bbe1      	OUT  0x11,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00009d bbe2      	OUT  0x12,R30
                 ; 0000 003B 
                 ; 0000 003C // Timer/Counter 0 initialization
                 ; 0000 003D // Clock source: System Clock
                 ; 0000 003E // Clock value: Timer 0 Stopped
                 ; 0000 003F // Mode: Normal top=0xFF
                 ; 0000 0040 // OC0 output: Disconnected
                 ; 0000 0041 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00009e bfe3      	OUT  0x33,R30
                 ; 0000 0042 TCNT0=0x00;
00009f bfe2      	OUT  0x32,R30
                 ; 0000 0043 OCR0=0x00;
0000a0 bfec      	OUT  0x3C,R30
                 ; 0000 0044 
                 ; 0000 0045 // Timer/Counter 1 initialization
                 ; 0000 0046 // Clock source: System Clock
                 ; 0000 0047 // Clock value: Timer1 Stopped
                 ; 0000 0048 // Mode: Normal top=0xFFFF
                 ; 0000 0049 // OC1A output: Disconnected
                 ; 0000 004A // OC1B output: Disconnected
                 ; 0000 004B // Noise Canceler: Off
                 ; 0000 004C // Input Capture on Falling Edge
                 ; 0000 004D // Timer1 Overflow Interrupt: Off
                 ; 0000 004E // Input Capture Interrupt: Off
                 ; 0000 004F // Compare A Match Interrupt: Off
                 ; 0000 0050 // Compare B Match Interrupt: Off
                 ; 0000 0051 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a1 bdef      	OUT  0x2F,R30
                 ; 0000 0052 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a2 bdee      	OUT  0x2E,R30
                 ; 0000 0053 TCNT1H=0x00;
0000a3 bded      	OUT  0x2D,R30
                 ; 0000 0054 TCNT1L=0x00;
0000a4 bdec      	OUT  0x2C,R30
                 ; 0000 0055 ICR1H=0x00;
0000a5 bde7      	OUT  0x27,R30
                 ; 0000 0056 ICR1L=0x00;
0000a6 bde6      	OUT  0x26,R30
                 ; 0000 0057 OCR1AH=0x00;
0000a7 bdeb      	OUT  0x2B,R30
                 ; 0000 0058 OCR1AL=0x00;
0000a8 bdea      	OUT  0x2A,R30
                 ; 0000 0059 OCR1BH=0x00;
0000a9 bde9      	OUT  0x29,R30
                 ; 0000 005A OCR1BL=0x00;
0000aa bde8      	OUT  0x28,R30
                 ; 0000 005B 
                 ; 0000 005C // Timer/Counter 2 initialization
                 ; 0000 005D // Clock source: System Clock
                 ; 0000 005E // Clock value: Timer2 Stopped
                 ; 0000 005F // Mode: Normal top=0xFF
                 ; 0000 0060 // OC2 output: Disconnected
                 ; 0000 0061 ASSR=0<<AS2;
0000ab bde2      	OUT  0x22,R30
                 ; 0000 0062 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ac bde5      	OUT  0x25,R30
                 ; 0000 0063 TCNT2=0x00;
0000ad bde4      	OUT  0x24,R30
                 ; 0000 0064 OCR2=0x00;
0000ae bde3      	OUT  0x23,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0067 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000af bfe9      	OUT  0x39,R30
                 ; 0000 0068 
                 ; 0000 0069 // External Interrupt(s) initialization
                 ; 0000 006A // INT0: Off
                 ; 0000 006B // INT1: Off
                 ; 0000 006C // INT2: Off
                 ; 0000 006D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b0 bfe5      	OUT  0x35,R30
                 ; 0000 006E MCUCSR=(0<<ISC2);
0000b1 bfe4      	OUT  0x34,R30
                 ; 0000 006F 
                 ; 0000 0070 // USART initialization
                 ; 0000 0071 // USART disabled
                 ; 0000 0072 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000b2 b9ea      	OUT  0xA,R30
                 ; 0000 0073 
                 ; 0000 0074 // Analog Comparator initialization
                 ; 0000 0075 // Analog Comparator: Off
                 ; 0000 0076 // The Analog Comparator's positive input is
                 ; 0000 0077 // connected to the AIN0 pin
                 ; 0000 0078 // The Analog Comparator's negative input is
                 ; 0000 0079 // connected to the AIN1 pin
                 ; 0000 007A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b3 e8e0      	LDI  R30,LOW(128)
0000b4 b9e8      	OUT  0x8,R30
                 ; 0000 007B SFIOR=(0<<ACME);
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bfe0      	OUT  0x30,R30
                 ; 0000 007C 
                 ; 0000 007D // ADC initialization
                 ; 0000 007E // ADC disabled
                 ; 0000 007F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000b7 b9e6      	OUT  0x6,R30
                 ; 0000 0080 
                 ; 0000 0081 // SPI initialization
                 ; 0000 0082 // SPI Type: Master
                 ; 0000 0083 // SPI Clock Rate: 2*2000.000 kHz
                 ; 0000 0084 // SPI Clock Phase: Cycle Start
                 ; 0000 0085 // SPI Clock Polarity: Low
                 ; 0000 0086 // SPI Data Order: MSB First
                 ; 0000 0087 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000b8 e5e0      	LDI  R30,LOW(80)
0000b9 b9ed      	OUT  0xD,R30
                 ; 0000 0088 SPSR=(1<<SPI2X);
0000ba e0e1      	LDI  R30,LOW(1)
0000bb b9ee      	OUT  0xE,R30
                 ; 0000 0089 
                 ; 0000 008A // Clear the SPI interrupt flag
                 ; 0000 008B #asm
                 ; 0000 008C in   r30,spsr
0000bc b1ee      in   r30,spsr
                 ; 0000 008D in   r30,spdr
0000bd b1ef      in   r30,spdr
                 ; 0000 008E #endasm
                 ; 0000 008F 
                 ; 0000 0090 // TWI initialization
                 ; 0000 0091 // TWI disabled
                 ; 0000 0092 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000be e0e0      	LDI  R30,LOW(0)
0000bf bfe6      	OUT  0x36,R30
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 lcd_init(16);
0000c0 e1a0      	LDI  R26,LOW(16)
0000c1 940e 0223 	CALL _lcd_init
                 ; 0000 0096 
                 ; 0000 0097 // Global enable interrupts
                 ; 0000 0098 #asm("sei")
0000c3 9478      	sei
                 ; 0000 0099 
                 ; 0000 009A DDRC = 0xF0;
0000c4 efe0      	LDI  R30,LOW(240)
0000c5 bbe4      	OUT  0x14,R30
                 ; 0000 009B display[5] = 127;
0000c6 e7ef      	LDI  R30,LOW(127)
0000c7 87e9      	STD  Y+9,R30
                 ; 0000 009C while (1)
                 _0xA:
                 ; 0000 009D {
                 ; 0000 009E key = 'a';
0000c8 e631      	LDI  R19,LOW(97)
                 ; 0000 009F while (key == 'a')
                 _0xD:
0000c9 3631      	CPI  R19,97
0000ca f419      	BRNE _0xF
                 ; 0000 00A0 key = Keyboard();
0000cb d0ba      	RCALL _Keyboard
0000cc 2f3e      	MOV  R19,R30
0000cd cffb      	RJMP _0xD
                 _0xF:
                 ; 0000 00A1 if (!choice && key != '#')
0000ce 3010      	CPI  R17,0
0000cf f411      	BRNE _0x11
0000d0 3233      	CPI  R19,35
0000d1 f409      	BRNE _0x12
                 _0x11:
0000d2 c015      	RJMP _0x10
                 _0x12:
                 ; 0000 00A2 {
                 ; 0000 00A3 if (key != '1')
0000d3 3331      	CPI  R19,49
0000d4 f059      	BREQ _0x13
                 ; 0000 00A4 {
                 ; 0000 00A5 sent[ind++] = key;
0000d5 940e 0251 	CALL SUBOPT_0x0
0000d7 01de      	MOVW R26,R28
0000d8 961c      	ADIW R26,12
0000d9 0fea      	ADD  R30,R26
0000da 1ffb      	ADC  R31,R27
0000db 8330      	ST   Z,R19
                 ; 0000 00A6 lcd_putchar(key);
0000dc 2fa3      	MOV  R26,R19
0000dd 940e 01fd 	CALL _lcd_putchar
                 ; 0000 00A7 }
                 ; 0000 00A8 else
0000df c007      	RJMP _0x14
                 _0x13:
                 ; 0000 00A9 {
                 ; 0000 00AA choice = true;
0000e0 e011      	LDI  R17,LOW(1)
                 ; 0000 00AB lcd_gotoxy(0, 1);
0000e1 940e 0258 	CALL SUBOPT_0x1
                 ; 0000 00AC lcd_puts(display);
0000e3 01de      	MOVW R26,R28
0000e4 9614      	ADIW R26,4
0000e5 940e 0212 	CALL _lcd_puts
                 ; 0000 00AD }
                 _0x14:
                 ; 0000 00AE }
                 ; 0000 00AF else if (choice && key >= '1' && key <= '7')
0000e7 c098      	RJMP _0x15
                 _0x10:
0000e8 3010      	CPI  R17,0
0000e9 f021      	BREQ _0x17
0000ea 3331      	CPI  R19,49
0000eb f010      	BRLO _0x17
0000ec 3338      	CPI  R19,56
0000ed f008      	BRLO _0x18
                 _0x17:
0000ee c091      	RJMP _0x16
                 _0x18:
                 ; 0000 00B0 {
                 ; 0000 00B1 if (display[key - '1'] == 127)
0000ef 940e 025d 	CALL SUBOPT_0x2
0000f1 37af      	CPI  R26,LOW(0x7F)
0000f2 f509      	BRNE _0x19
                 ; 0000 00B2 {
                 ; 0000 00B3 choice = false;
0000f3 e010      	LDI  R17,LOW(0)
                 ; 0000 00B4 lcd_gotoxy(0, 1);
0000f4 940e 0258 	CALL SUBOPT_0x1
                 ; 0000 00B5 lcd_puts("       ");
                +
0000f6 e6a0     +LDI R26 , LOW ( _0x1A + ( 0 ) )
0000f7 e0b2     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
0000f8 940e 0212 	CALL _lcd_puts
                 ; 0000 00B6 if (ind > 0)
0000fa 81aa      	LDD  R26,Y+2
0000fb 81bb      	LDD  R27,Y+2+1
0000fc 940e 0294 	CALL __CPW02
0000fe f48c      	BRGE _0x1B
                 ; 0000 00B7 {
                 ; 0000 00B8 sent[--ind] = 0;
0000ff 81ea      	LDD  R30,Y+2
000100 81fb      	LDD  R31,Y+2+1
000101 9731      	SBIW R30,1
000102 83ea      	STD  Y+2,R30
000103 83fb      	STD  Y+2+1,R31
000104 01de      	MOVW R26,R28
000105 961c      	ADIW R26,12
000106 0fae      	ADD  R26,R30
000107 1fbf      	ADC  R27,R31
000108 e0e0      	LDI  R30,LOW(0)
000109 93ec      	ST   X,R30
                 ; 0000 00B9 lcd_gotoxy(ind, 0);
00010a 81ea      	LDD  R30,Y+2
00010b 940e 0266 	CALL SUBOPT_0x3
                 ; 0000 00BA lcd_putchar(' ');
00010d e2a0      	LDI  R26,LOW(32)
00010e 940e 01fd 	CALL _lcd_putchar
                 ; 0000 00BB lcd_gotoxy(ind, 0);
                 ; 0000 00BC }
                 ; 0000 00BD else
                 _0x1B:
                 ; 0000 00BE {
                 ; 0000 00BF lcd_gotoxy(ind, 0);
                 _0x36:
000110 81ea      	LDD  R30,Y+2
000111 940e 0266 	CALL SUBOPT_0x3
                 ; 0000 00C0 }
                 ; 0000 00C1 }
                 ; 0000 00C2 else if (display[key - '1'] == '"')
000113 c06c      	RJMP _0x1D
                 _0x19:
000114 940e 025d 	CALL SUBOPT_0x2
000116 32a2      	CPI  R26,LOW(0x22)
000117 f009      	BREQ PC+2
000118 c047      	RJMP _0x1E
                 ; 0000 00C3 {
                 ; 0000 00C4 choice = false;
000119 e010      	LDI  R17,LOW(0)
                 ; 0000 00C5 for (i = 0;i < ind;i++)
                +
00011a e040     +LDI R20 , LOW ( 0 )
00011b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x20:
00011c 81ea      	LDD  R30,Y+2
00011d 81fb      	LDD  R31,Y+2+1
00011e 174e      	CP   R20,R30
00011f 075f      	CPC  R21,R31
000120 f454      	BRGE _0x21
                 ; 0000 00C6 {
                 ; 0000 00C7 Sending(sent[i]);
000121 01de      	MOVW R26,R28
000122 961c      	ADIW R26,12
000123 0fa4      	ADD  R26,R20
000124 1fb5      	ADC  R27,R21
000125 91ac      	LD   R26,X
000126 940e 026a 	CALL SUBOPT_0x4
                 ; 0000 00C8 delay_ms(30);
                 ; 0000 00C9 }
                +
000128 5f4f     +SUBI R20 , LOW ( - 1 )
000129 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00012a cff1      	RJMP _0x20
                 _0x21:
                 ; 0000 00CA Sending('"');
00012b e2a2      	LDI  R26,LOW(34)
00012c 940e 026a 	CALL SUBOPT_0x4
                 ; 0000 00CB delay_ms(30);
                 ; 0000 00CC ind = 0;
00012e e0e0      	LDI  R30,LOW(0)
00012f 83ea      	STD  Y+2,R30
000130 83eb      	STD  Y+2+1,R30
                 ; 0000 00CD delay_ms(5000);
000131 e8a8      	LDI  R26,LOW(5000)
000132 e1b3      	LDI  R27,HIGH(5000)
000133 940e 028a 	CALL _delay_ms
                 ; 0000 00CE len = Receiving();
000135 df49      	RCALL _Receiving
000136 e0f0      	LDI  R31,0
000137 83e8      	ST   Y,R30
000138 83f9      	STD  Y+1,R31
                 ; 0000 00CF delay_ms(30);
000139 e1ae      	LDI  R26,LOW(30)
00013a e0b0      	LDI  R27,0
00013b 940e 0270 	CALL SUBOPT_0x5
                 ; 0000 00D0 lcd_clear();
                 ; 0000 00D1 for (i = 0;i < len;i++)
                 _0x23:
00013d 81e8      	LD   R30,Y
00013e 81f9      	LDD  R31,Y+1
00013f 174e      	CP   R20,R30
000140 075f      	CPC  R21,R31
000141 f464      	BRGE _0x24
                 ; 0000 00D2 {
                 ; 0000 00D3 ch = Receiving();
000142 df3c      	RCALL _Receiving
000143 2f0e      	MOV  R16,R30
                 ; 0000 00D4 lcd_putchar(ch);
000144 2fa0      	MOV  R26,R16
000145 940e 01fd 	CALL _lcd_putchar
                 ; 0000 00D5 delay_ms(30);
000147 e1ae      	LDI  R26,LOW(30)
000148 e0b0      	LDI  R27,0
000149 940e 028a 	CALL _delay_ms
                 ; 0000 00D6 }
                +
00014b 5f4f     +SUBI R20 , LOW ( - 1 )
00014c 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00014d cfef      	RJMP _0x23
                 _0x24:
                 ; 0000 00D7 delay_ms(3000);
00014e eba8      	LDI  R26,LOW(3000)
00014f e0bb      	LDI  R27,HIGH(3000)
000150 940e 0270 	CALL SUBOPT_0x5
                 ; 0000 00D8 lcd_clear();
                 ; 0000 00D9 for (i = 0;i < 41;i++)
                 _0x26:
                +
000152 3249     +CPI R20 , LOW ( 41 )
000153 e0e0     +LDI R30 , HIGH ( 41 )
000154 075e     +CPC R21 , R30
                 	__CPWRN 20,21,41
000155 f44c      	BRGE _0x27
                 ; 0000 00DA sent[i] = 0;
000156 01de      	MOVW R26,R28
000157 961c      	ADIW R26,12
000158 0fa4      	ADD  R26,R20
000159 1fb5      	ADC  R27,R21
00015a e0e0      	LDI  R30,LOW(0)
00015b 93ec      	ST   X,R30
                +
00015c 5f4f     +SUBI R20 , LOW ( - 1 )
00015d 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00015e cff3      	RJMP _0x26
                 _0x27:
                 ; 0000 00DB }
                 ; 0000 00DC else
00015f c020      	RJMP _0x28
                 _0x1E:
                 ; 0000 00DD {
                 ; 0000 00DE sent[ind] = display[key - '1'];
000160 81ea      	LDD  R30,Y+2
000161 81fb      	LDD  R31,Y+2+1
000162 01de      	MOVW R26,R28
000163 961c      	ADIW R26,12
000164 0fea      	ADD  R30,R26
000165 1ffb      	ADC  R31,R27
000166 010f      	MOVW R0,R30
000167 2fe3      	MOV  R30,R19
000168 e0f0      	LDI  R31,0
000169 97f1      	SBIW R30,49
00016a 01de      	MOVW R26,R28
00016b 9614      	ADIW R26,4
00016c 0fae      	ADD  R26,R30
00016d 1fbf      	ADC  R27,R31
00016e 91ec      	LD   R30,X
00016f 01d0      	MOVW R26,R0
000170 93ec      	ST   X,R30
                 ; 0000 00DF choice = false;
000171 e010      	LDI  R17,LOW(0)
                 ; 0000 00E0 lcd_gotoxy(0, 1);
000172 940e 0258 	CALL SUBOPT_0x1
                 ; 0000 00E1 lcd_puts("       ");
                +
000174 e6a8     +LDI R26 , LOW ( _0x1A + ( 8 ) )
000175 e0b2     +LDI R27 , HIGH ( _0x1A + ( 8 ) )
                 	__POINTW2MN _0x1A,8
000176 940e 0212 	CALL _lcd_puts
                 ; 0000 00E2 lcd_gotoxy(ind++, 0);
000178 940e 0251 	CALL SUBOPT_0x0
00017a 940e 0266 	CALL SUBOPT_0x3
                 ; 0000 00E3 lcd_putchar(display[key - '1']);
00017c 940e 025d 	CALL SUBOPT_0x2
00017e 940e 01fd 	CALL _lcd_putchar
                 ; 0000 00E4 }
                 _0x28:
                 _0x1D:
                 ; 0000 00E5 }
                 ; 0000 00E6 delay_ms(350);
                 _0x16:
                 _0x15:
000180 e5ae      	LDI  R26,LOW(350)
000181 e0b1      	LDI  R27,HIGH(350)
000182 940e 028a 	CALL _delay_ms
                 ; 0000 00E7 }
000184 cf43      	RJMP _0xA
                 ; 0000 00E8 }
                 _0x29:
000185 cfff      	RJMP _0x29
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
000260           	.BYTE 0x10
                 ;char Keyboard()
                 ; 0000 00EA {
                 
                 	.CSEG
                 _Keyboard:
                 ; .FSTART _Keyboard
                 ; 0000 00EB PORTC = 0b11101111;
000186 eeef      	LDI  R30,LOW(239)
000187 940e 0277 	CALL SUBOPT_0x6
                 ; 0000 00EC delay_ms(5);
                 ; 0000 00ED if((PINC & 0b00000001) == 0)
000189 9998      	SBIC 0x13,0
00018a c002      	RJMP _0x2A
                 ; 0000 00EE return '1';
00018b e3e1      	LDI  R30,LOW(49)
00018c 9508      	RET
                 ; 0000 00EF if((PINC & 0b00000010) == 0)
                 _0x2A:
00018d 9999      	SBIC 0x13,1
00018e c002      	RJMP _0x2B
                 ; 0000 00F0 return '2';
00018f e3e2      	LDI  R30,LOW(50)
000190 9508      	RET
                 ; 0000 00F1 if((PINC & 0b00000100) == 0)
                 _0x2B:
000191 999a      	SBIC 0x13,2
000192 c002      	RJMP _0x2C
                 ; 0000 00F2 return '3';
000193 e3e3      	LDI  R30,LOW(51)
000194 9508      	RET
                 ; 0000 00F3 PORTC = 0b11011111;
                 _0x2C:
000195 edef      	LDI  R30,LOW(223)
000196 940e 0277 	CALL SUBOPT_0x6
                 ; 0000 00F4 delay_ms(5);
                 ; 0000 00F5 if((PINC & 0b00000001) == 0)
000198 9998      	SBIC 0x13,0
000199 c002      	RJMP _0x2D
                 ; 0000 00F6 return '4';
00019a e3e4      	LDI  R30,LOW(52)
00019b 9508      	RET
                 ; 0000 00F7 if((PINC & 0b00000010) == 0)
                 _0x2D:
00019c 9999      	SBIC 0x13,1
00019d c002      	RJMP _0x2E
                 ; 0000 00F8 return '5';
00019e e3e5      	LDI  R30,LOW(53)
00019f 9508      	RET
                 ; 0000 00F9 if((PINC & 0b00000100) == 0)
                 _0x2E:
0001a0 999a      	SBIC 0x13,2
0001a1 c002      	RJMP _0x2F
                 ; 0000 00FA return '6';
0001a2 e3e6      	LDI  R30,LOW(54)
0001a3 9508      	RET
                 ; 0000 00FB PORTC = 0b10111111;
                 _0x2F:
0001a4 ebef      	LDI  R30,LOW(191)
0001a5 940e 0277 	CALL SUBOPT_0x6
                 ; 0000 00FC delay_ms(5);
                 ; 0000 00FD if((PINC & 0b00000001) == 0)
0001a7 9998      	SBIC 0x13,0
0001a8 c002      	RJMP _0x30
                 ; 0000 00FE return '7';
0001a9 e3e7      	LDI  R30,LOW(55)
0001aa 9508      	RET
                 ; 0000 00FF if((PINC & 0b00000010) == 0)
                 _0x30:
0001ab 9999      	SBIC 0x13,1
0001ac c002      	RJMP _0x31
                 ; 0000 0100 return '8';
0001ad e3e8      	LDI  R30,LOW(56)
0001ae 9508      	RET
                 ; 0000 0101 if((PINC & 0b00000100) == 0)
                 _0x31:
0001af 999a      	SBIC 0x13,2
0001b0 c002      	RJMP _0x32
                 ; 0000 0102 return '9';
0001b1 e3e9      	LDI  R30,LOW(57)
0001b2 9508      	RET
                 ; 0000 0103 PORTC = 0b01111111;
                 _0x32:
0001b3 e7ef      	LDI  R30,LOW(127)
0001b4 940e 0277 	CALL SUBOPT_0x6
                 ; 0000 0104 delay_ms(5);
                 ; 0000 0105 if((PINC & 0b00000001) == 0)
0001b6 9998      	SBIC 0x13,0
0001b7 c002      	RJMP _0x33
                 ; 0000 0106 return '*';
0001b8 e2ea      	LDI  R30,LOW(42)
0001b9 9508      	RET
                 ; 0000 0107 if((PINC & 0b00000010) == 0)
                 _0x33:
0001ba 9999      	SBIC 0x13,1
0001bb c002      	RJMP _0x34
                 ; 0000 0108 return '0';
0001bc e3e0      	LDI  R30,LOW(48)
0001bd 9508      	RET
                 ; 0000 0109 if((PINC & 0b00000100) == 0)
                 _0x34:
0001be 999a      	SBIC 0x13,2
0001bf c002      	RJMP _0x35
                 ; 0000 010A return '#';
0001c0 e2e3      	LDI  R30,LOW(35)
0001c1 9508      	RET
                 ; 0000 010B return 'a';
                 _0x35:
0001c2 e6e1      	LDI  R30,LOW(97)
0001c3 9508      	RET
                 ; 0000 010C }
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
0001c4 93aa      	ST   -Y,R26
0001c5 b3eb      	IN   R30,0x1B
0001c6 70ef      	ANDI R30,LOW(0xF)
0001c7 2fae      	MOV  R26,R30
0001c8 81e8      	LD   R30,Y
0001c9 7fe0      	ANDI R30,LOW(0xF0)
0001ca 2bea      	OR   R30,R26
0001cb bbeb      	OUT  0x1B,R30
                +
0001cc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001cd 958a     +DEC R24
0001ce f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001cf 9ada      	SBI  0x1B,2
                +
0001d0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001d1 958a     +DEC R24
0001d2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001d3 98da      	CBI  0x1B,2
                +
0001d4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001d5 958a     +DEC R24
0001d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001d7 c077      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001d8 93aa      	ST   -Y,R26
0001d9 81a8      	LD   R26,Y
0001da dfe9      	RCALL __lcd_write_nibble_G102
0001db 81e8          ld    r30,y
0001dc 95e2          swap  r30
0001dd 83e8          st    y,r30
0001de 81a8      	LD   R26,Y
0001df dfe4      	RCALL __lcd_write_nibble_G102
                +
0001e0 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001e1 958a     +DEC R24
0001e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001e3 c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001e4 93aa      	ST   -Y,R26
0001e5 81e8      	LD   R30,Y
0001e6 e0f0      	LDI  R31,0
0001e7 58ec      	SUBI R30,LOW(-__base_y_G102)
0001e8 4ffd      	SBCI R31,HIGH(-__base_y_G102)
0001e9 81e0      	LD   R30,Z
0001ea 81a9      	LDD  R26,Y+1
0001eb 0fae      	ADD  R26,R30
0001ec dfeb      	RCALL __lcd_write_data
0001ed 8059      	LDD  R5,Y+1
0001ee 8048      	LDD  R4,Y+0
                 _0x20C0002:
0001ef 9622      	ADIW R28,2
0001f0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001f1 e0a2      	LDI  R26,LOW(2)
0001f2 940e 027c 	CALL SUBOPT_0x7
0001f4 e0ac      	LDI  R26,LOW(12)
0001f5 dfe2      	RCALL __lcd_write_data
0001f6 e0a1      	LDI  R26,LOW(1)
0001f7 940e 027c 	CALL SUBOPT_0x7
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa 2e4e      	MOV  R4,R30
0001fb 2e5e      	MOV  R5,R30
0001fc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001fd 93aa      	ST   -Y,R26
0001fe 81a8      	LD   R26,Y
0001ff 30aa      	CPI  R26,LOW(0xA)
000200 f011      	BREQ _0x2040005
000201 1457      	CP   R5,R7
000202 f048      	BRLO _0x2040004
                 _0x2040005:
000203 e0e0      	LDI  R30,LOW(0)
000204 93ea      	ST   -Y,R30
000205 9443      	INC  R4
000206 2da4      	MOV  R26,R4
000207 dfdc      	RCALL _lcd_gotoxy
000208 81a8      	LD   R26,Y
000209 30aa      	CPI  R26,LOW(0xA)
00020a f409      	BRNE _0x2040007
00020b c043      	RJMP _0x20C0001
                 _0x2040007:
                 _0x2040004:
00020c 9453      	INC  R5
00020d 9ad8      	SBI  0x1B,0
00020e 81a8      	LD   R26,Y
00020f dfc8      	RCALL __lcd_write_data
000210 98d8      	CBI  0x1B,0
000211 c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000212 93ba      	ST   -Y,R27
000213 93aa      	ST   -Y,R26
000214 931a      	ST   -Y,R17
                 _0x2040008:
000215 81a9      	LDD  R26,Y+1
000216 81ba      	LDD  R27,Y+1+1
000217 91ed      	LD   R30,X+
000218 83a9      	STD  Y+1,R26
000219 83ba      	STD  Y+1+1,R27
00021a 2f1e      	MOV  R17,R30
00021b 30e0      	CPI  R30,0
00021c f019      	BREQ _0x204000A
00021d 2fa1      	MOV  R26,R17
00021e dfde      	RCALL _lcd_putchar
00021f cff5      	RJMP _0x2040008
                 _0x204000A:
000220 8118      	LDD  R17,Y+0
000221 9623      	ADIW R28,3
000222 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000223 93aa      	ST   -Y,R26
000224 b3ea      	IN   R30,0x1A
000225 6fe0      	ORI  R30,LOW(0xF0)
000226 bbea      	OUT  0x1A,R30
000227 9ad2      	SBI  0x1A,2
000228 9ad0      	SBI  0x1A,0
000229 9ad1      	SBI  0x1A,1
00022a 98da      	CBI  0x1B,2
00022b 98d8      	CBI  0x1B,0
00022c 98d9      	CBI  0x1B,1
00022d 8078      	LDD  R7,Y+0
00022e 81e8      	LD   R30,Y
00022f 58e0      	SUBI R30,-LOW(128)
                +
000230 93e0 0276+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000232 81e8      	LD   R30,Y
000233 54e0      	SUBI R30,-LOW(192)
                +
000234 93e0 0277+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000236 e1a4      	LDI  R26,LOW(20)
000237 e0b0      	LDI  R27,0
000238 940e 028a 	CALL _delay_ms
00023a 940e 0282 	CALL SUBOPT_0x8
00023c 940e 0282 	CALL SUBOPT_0x8
00023e 940e 0282 	CALL SUBOPT_0x8
000240 e2a0      	LDI  R26,LOW(32)
000241 df82      	RCALL __lcd_write_nibble_G102
                +
000242 ec88     +LDI R24 , LOW ( 200 )
000243 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000244 9701     +SBIW R24 , 1
000245 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000246 e2a8      	LDI  R26,LOW(40)
000247 df90      	RCALL __lcd_write_data
000248 e0a4      	LDI  R26,LOW(4)
000249 df8e      	RCALL __lcd_write_data
00024a e8a5      	LDI  R26,LOW(133)
00024b df8c      	RCALL __lcd_write_data
00024c e0a6      	LDI  R26,LOW(6)
00024d df8a      	RCALL __lcd_write_data
00024e dfa2      	RCALL _lcd_clear
                 _0x20C0001:
00024f 9621      	ADIW R28,1
000250 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000270           	.BYTE 0x4
                 __base_y_G102:
000274           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000251 81ea      	LDD  R30,Y+2
000252 81fb      	LDD  R31,Y+2+1
000253 9631      	ADIW R30,1
000254 83ea      	STD  Y+2,R30
000255 83fb      	STD  Y+2+1,R31
000256 9731      	SBIW R30,1
000257 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000258 e0e0      	LDI  R30,LOW(0)
000259 93ea      	ST   -Y,R30
00025a e0a1      	LDI  R26,LOW(1)
00025b 940c 01e4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00025d 2fe3      	MOV  R30,R19
00025e e0f0      	LDI  R31,0
00025f 97f1      	SBIW R30,49
000260 01de      	MOVW R26,R28
000261 9614      	ADIW R26,4
000262 0fae      	ADD  R26,R30
000263 1fbf      	ADC  R27,R31
000264 91ac      	LD   R26,X
000265 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000266 93ea      	ST   -Y,R30
000267 e0a0      	LDI  R26,LOW(0)
000268 940c 01e4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00026a 940e 0075 	CALL _Sending
00026c e1ae      	LDI  R26,LOW(30)
00026d e0b0      	LDI  R27,0
00026e 940c 028a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000270 940e 028a 	CALL _delay_ms
000272 940e 01f1 	CALL _lcd_clear
                +
000274 e040     +LDI R20 , LOW ( 0 )
000275 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000276 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000277 bbe5      	OUT  0x15,R30
000278 e0a5      	LDI  R26,LOW(5)
000279 e0b0      	LDI  R27,0
00027a 940c 028a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00027c 940e 01d8 	CALL __lcd_write_data
00027e e0a3      	LDI  R26,LOW(3)
00027f e0b0      	LDI  R27,0
000280 940c 028a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000282 e3a0      	LDI  R26,LOW(48)
000283 940e 01c4 	CALL __lcd_write_nibble_G102
                +
000285 ec88     +LDI R24 , LOW ( 200 )
000286 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000287 9701     +SBIW R24 , 1
000288 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000289 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00028a 9610      	adiw r26,0
00028b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00028c ed80     +LDI R24 , LOW ( 0x7D0 )
00028d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00028e 9701     +SBIW R24 , 1
00028f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000290 95a8      	wdr
000291 9711      	sbiw r26,1
000292 f7c9      	brne __delay_ms0
                 __delay_ms1:
000293 9508      	ret
                 
                 __CPW02:
000294 2400      	CLR  R0
000295 160a      	CP   R0,R26
000296 060b      	CPC  R0,R27
000297 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000298 0fac      	ADD  R26,R28
000299 1fbd      	ADC  R27,R29
                 __INITLOC0:
00029a 9005      	LPM  R0,Z+
00029b 920d      	ST   X+,R0
00029c 958a      	DEC  R24
00029d f7e1      	BRNE __INITLOC0
00029e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   2 r17:  14 r18:   0 r19:  12 r20:  11 r21:  11 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  86 r27:  27 r28:  14 r29:   2 r30: 161 r31:  24 
x  :  11 y  :  58 z  :  10 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :   9 
adiw  :  13 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  43 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   4 cpi   :  13 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  28 ld    :  16 ldd   :  22 ldi   : 117 
lds   :   0 lpm   :   8 lsl   :   0 lsr   :   0 mov   :  12 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  47 pop   :   0 push  :   0 rcall :  16 ret   :  25 
reti  :   0 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   5 sbic  :  12 sbis  :   2 sbiw  :  12 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :  10 sts   :   2 sub   :   0 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00053e   1282     60   1342   32768   4.1%
[.dseg] 0x000060 0x000278      0     24     24    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
