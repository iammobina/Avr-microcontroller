#include <mega32.h>
#include <delay.h>
#include <stdbool.h>
#include <stdlib.h>
#include <spi.h>
// Alphanumeric LCD functions
#include <alcd.h>

// Declare your global variables here


void Sending(char data)
{
char flush_buffer;
SPDR = data;
while(!(SPSR & (1 << SPIF)));
flush_buffer = SPDR;    
}

char Receiving()            
{
SPDR = 0xFF;
while(!(SPSR & (1 << SPIF)));
return(SPDR);        
}
void Keyboard(void);
void main(void)
{
// Declare your local variables here
bool choice = false;
char ch, key = 'a', sent[41];
char display[8] = "1+-/.<\"";
int i = 0, ind = 0, len = 0;

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI Type: Master
// SPI Clock Rate: 2*2000.000 kHz
// SPI Clock Phase: Cycle Start
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
SPSR=(1<<SPI2X);

// Clear the SPI interrupt flag
#asm
in   r30,spsr
in   r30,spdr
#endasm

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);


lcd_init(16);

// Global enable interrupts
#asm("sei")

DDRC = 0xF0;
display[5] = 127;
while (1)
{
key = 'a';
while (key == 'a')
key = Keyboard();
if (!choice && key != '#')
{
if (key != '1')
{
sent[ind++] = key;
lcd_putchar(key);
}
else
{
choice = true;
lcd_gotoxy(0, 1);
lcd_puts(display);
}
}
else if (choice && key >= '1' && key <= '7')
{
if (display[key - '1'] == 127)
{
choice = false;
lcd_gotoxy(0, 1);
lcd_puts("       ");
if (ind > 0)
{
sent[--ind] = 0;
lcd_gotoxy(ind, 0);
lcd_putchar(' ');
lcd_gotoxy(ind, 0);
}
else
{
lcd_gotoxy(ind, 0);
}
}
else if (display[key - '1'] == '"')
{ 
choice = false;
for (i = 0;i < ind;i++)
{
Sending(sent[i]);
delay_ms(30);
}
Sending('"');
delay_ms(30);
ind = 0;
delay_ms(5000);
len = Receiving();
delay_ms(30);
lcd_clear();
for (i = 0;i < len;i++)
{
ch = Receiving();
lcd_putchar(ch);
delay_ms(30);    
}
delay_ms(3000);
lcd_clear();
for (i = 0;i < 41;i++)
sent[i] = 0;
}
else
{
sent[ind] = display[key - '1'];
choice = false;
lcd_gotoxy(0, 1);
lcd_puts("       ");
lcd_gotoxy(ind++, 0);
lcd_putchar(display[key - '1']);
}
}
delay_ms(350);
}
}
char Keyboard()
{
PORTC = 0b11101111;
delay_ms(5);
if((PINC & 0b00000001) == 0)
return '1';
if((PINC & 0b00000010) == 0)
return '2';
if((PINC & 0b00000100) == 0)
return '3';
PORTC = 0b11011111;
delay_ms(5);
if((PINC & 0b00000001) == 0)
return '4';
if((PINC & 0b00000010) == 0)
return '5';
if((PINC & 0b00000100) == 0)
return '6';
PORTC = 0b10111111;
delay_ms(5);
if((PINC & 0b00000001) == 0)
return '7';
if((PINC & 0b00000010) == 0)
return '8';
if((PINC & 0b00000100) == 0)
return '9';
PORTC = 0b01111111;
delay_ms(5);
if((PINC & 0b00000001) == 0)
return '*';
if((PINC & 0b00000010) == 0)
return '0';
if((PINC & 0b00000100) == 0)
return '#';
return 'a';
}
